{
  "name": "Client",
  "url": "/Client",
  "description": "APIs which provide the full range of PlayFab features available to the client - authentication, account and data management, inventory, friends, matchmaking, reporting, and platform-specific functionality",
  "revision": "1.0.0.b4",
  "datatypes": {
    "AddFriendRequest": {
      "name": "AddFriendRequest",
      "properties": [
        {
          "name": "FriendPlayFabId",
          "description": "PlayFab identifier of the user to attempt to add to the local user's friend list",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FriendUsername",
          "description": "PlayFab username of the user to attempt to add to the local user's friend list",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FriendEmail",
          "description": "email address of the user to attempt to add to the local user's friend list",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FriendTitleDisplayName",
          "description": "title-specific display name of the user to attempt to add to the local user's friend list",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "AddFriendResult": {
      "name": "AddFriendResult",
      "properties": [
        {
          "name": "Created",
          "description": "was the friend request processed successfully",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "AndroidDevicePushNotificationRegistrationRequest": {
      "name": "AndroidDevicePushNotificationRegistrationRequest",
      "properties": [
        {
          "name": "DeviceToken",
          "description": "unique token generated by the Google Cloud Messaging service when the title registered to receive push notifications",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "AndroidDevicePushNotificationRegistrationResult": {
      "name": "AndroidDevicePushNotificationRegistrationResult",
      "properties": []
    },
    "CartItem": {
      "name": "CartItem",
      "properties": [
        {
          "name": "ItemId",
          "description": "unique identifier for the catalog item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemClass",
          "description": "class name to which catalog item belongs",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemInstanceId",
          "description": "unique instance identifier for this catalog item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "description": "display name for the catalog item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Description",
          "description": "description of the catalog item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrencyPrices",
          "description": "the cost of the catalog item for each applicable virtual currency",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "RealCurrencyPrices",
          "description": "the cost of the catalog item for each applicable real world currency",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "VCAmount",
          "description": "the amount of each applicable virtual currency which will be received as a result of purchasing this catalog item",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "CatalogItem": {
      "name": "CatalogItem",
      "description": "A purchasable item from the item catalog",
      "sortKey": "ItemId",
      "properties": [
        {
          "name": "ItemId",
          "description": "internal item name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ItemClass",
          "description": "class name to which item belongs",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CatalogVersion",
          "description": "catalog item we are working against",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "description": "displayable item name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Description",
          "description": "text description of item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrencyPrices",
          "description": "Price of this object in virtual currencies",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "RealCurrencyPrices",
          "description": "Price of this object in real money currencies",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "ReleaseDate",
          "description": "if this object was dropped, when it was dropped (optional)",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "ExpirationDate",
          "description": "date this object will no longer be viable (optional)",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "IsFree",
          "description": "is this a free object?",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "NotForSale",
          "description": "can we buy this object (might be only gettable by being dropped by a monster)",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "NotForTrade",
          "description": "can we pass this object to someone else?",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "Tags",
          "description": "List of item tags",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomData",
          "description": "Game specific custom data field (could be json, xml, etc)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GrantedIfPlayerHas",
          "description": "array of unique item Id's that, if the player already has, will automatically place this item in a players inventory",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Consumable",
          "description": "If set, makes this item consumable and sets consumable properties",
          "jsontype": "Object",
          "actualtype": "CatalogItemConsumableInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Container",
          "description": "If set, makes this item a container and sets container properties",
          "jsontype": "Object",
          "actualtype": "CatalogItemContainerInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Bundle",
          "description": "If set, makes this item a bundle and sets bundle properties",
          "jsontype": "Object",
          "actualtype": "CatalogItemBundleInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CatalogItemBundleInfo": {
      "name": "CatalogItemBundleInfo",
      "properties": [
        {
          "name": "BundledItems",
          "description": "array of Unique item id's that this item will grant you once you have this item in your inventory",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundledResultTables",
          "description": "array of result table id's that this item will reference and randomly create items from",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundledVirtualCurrencies",
          "description": "Virtual currencies contained in this item",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "CatalogItemConsumableInfo": {
      "name": "CatalogItemConsumableInfo",
      "properties": [
        {
          "name": "UsageCount",
          "description": "number of times this object can be used",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "UsagePeriod",
          "description": "duration of how long this item is viable after player aqquires it (in seconds) (optional)",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "UsagePeriodGroup",
          "description": "All items that have the same value in this string get their expiration dates added together.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CatalogItemContainerInfo": {
      "name": "CatalogItemContainerInfo",
      "properties": [
        {
          "name": "KeyItemId",
          "description": "unique item id that, if in posession, the object unlocks and provides the player with content items",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemContents",
          "description": "array of Unique item id's that this item will grant you once you have opened it",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ResultTableContents",
          "description": "array of result table id's that this item will reference and randomly create items from",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrencyContents",
          "description": "Virtual currencies contained in this item",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "ConfirmPurchaseRequest": {
      "name": "ConfirmPurchaseRequest",
      "properties": [
        {
          "name": "OrderId",
          "description": "purchase order identifier returned from StartPurchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "ConfirmPurchaseResult": {
      "name": "ConfirmPurchaseResult",
      "properties": [
        {
          "name": "OrderId",
          "description": "purchase order identifier",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PurchaseDate",
          "description": "date and time of the purchase",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "Items",
          "description": "array of items purchased",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PurchasedItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "ConsumeItemRequest": {
      "name": "ConsumeItemRequest",
      "properties": [
        {
          "name": "ItemInstanceId",
          "description": "Unique instance id of the item to be consumed",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ConsumeCount",
          "description": "Number of uses to consume",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "ConsumeItemResult": {
      "name": "ConsumeItemResult",
      "properties": []
    },
    "Currency": {
      "name": "Currency",
      "isenum": true,
      "enumvalues": [
        {
          "name": "USD"
        },
        {
          "name": "GBP"
        },
        {
          "name": "EUR"
        },
        {
          "name": "RUB"
        },
        {
          "name": "BRL"
        },
        {
          "name": "CIS"
        },
        {
          "name": "CAD"
        }
      ]
    },
    "CurrentGamesRequest": {
      "name": "CurrentGamesRequest",
      "properties": [
        {
          "name": "Region",
          "description": "region we are interested in",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": true
        },
        {
          "name": "BuildVersion",
          "description": "version of build we want to get stats for",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "IncludeState",
          "description": "filter on value of game server instance - running, ended, waiting for players etc.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CurrentGamesResult": {
      "name": "CurrentGamesResult",
      "properties": [
        {
          "name": "Games",
          "description": "array of games the system found",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "GameInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "PlayerCount",
          "description": "total number of players across all servers",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "GameCount",
          "description": "number of games running",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "IncompleteResult",
          "description": "indicates there are some servers it could not get a response for",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "FriendInfo": {
      "name": "FriendInfo",
      "properties": [
        {
          "name": "FriendPlayFabId",
          "description": "PlayFab unique identifier for this friend",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Username",
          "description": "PlayFab unique username for this friend",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TitleDisplayName",
          "description": "title-specific display name for this friend",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Tags",
          "description": "tags which have been associated with this friend",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CurrentMatchmakerLobbyId",
          "description": "unique lobby identifier of the Game Server Instance to which this player is currently connected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FacebookInfo",
          "description": "available Facebook information (if the user and PlayFab friend are also connected in Facebook)",
          "jsontype": "Object",
          "actualtype": "UserFacebookInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "SteamInfo",
          "description": "available Steam information (if the user and PlayFab friend are also connected in Steam)",
          "jsontype": "Object",
          "actualtype": "UserSteamInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "GameCenterInfo",
          "description": "available Game Center information (if the user and PlayFab friend are also connected in Game Center)",
          "jsontype": "Object",
          "actualtype": "UserGameCenterInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GameInfo": {
      "name": "GameInfo",
      "properties": [
        {
          "name": "Region",
          "description": "region this server is part of",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": true
        },
        {
          "name": "LobbyID",
          "description": "unique lobby id for this game server",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BuildVersion",
          "description": "build version this server is running",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GameMode",
          "description": "game mode this server is running",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Map",
          "description": "level name this server is running (if appropriate)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "MaxPlayers",
          "description": "maximum players this server can support",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "PlayerUsernames",
          "description": "array of strings of current player names on this server (note, these are usernames, which means they are account names, not display names)",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "RunTime",
          "description": "duration this server has been running (in seconds)",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "GameServerState",
          "description": "game specific string denoting server configuration",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TitleData",
          "description": "unique client provided string - passed in at start game request - that details user defined specifics about this game server instance",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GameModeInfo": {
      "name": "GameModeInfo",
      "properties": [
        {
          "name": "GameMode",
          "description": "mode game server is running in - defaults to 0 if there is only one mode",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GameCount",
          "description": "number of game servers running",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "GamePlayersCount",
          "description": "number of plaer",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        }
      ]
    },
    "GameServerRegionsRequest": {
      "name": "GameServerRegionsRequest",
      "properties": [
        {
          "name": "BuildVersion",
          "description": "version of build we want to get stats for",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "TitleId",
          "description": "is the specific game ID granted by PlayFab via the website, found on the end of the URL once you are logged in and looking at a specific game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GameServerRegionsResult": {
      "name": "GameServerRegionsResult",
      "properties": [
        {
          "name": "Regions",
          "description": "array of regions found matching the request parameters",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "RegionInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetAccountInfoRequest": {
      "name": "GetAccountInfoRequest",
      "properties": []
    },
    "GetAccountInfoResult": {
      "name": "GetAccountInfoResult",
      "properties": [
        {
          "name": "AccountInfo",
          "description": "account information for the local user",
          "jsontype": "Object",
          "actualtype": "UserAccountInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetCatalogItemsRequest": {
      "name": "GetCatalogItemsRequest",
      "properties": [
        {
          "name": "CatalogVersion",
          "description": "which catalog is being requested",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetCatalogItemsResult": {
      "name": "GetCatalogItemsResult",
      "properties": [
        {
          "name": "Catalog",
          "description": "array of inventory objects",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetFriendsListRequest": {
      "name": "GetFriendsListRequest",
      "properties": [
        {
          "name": "IncludeSteamFriends",
          "description": "indicates whether Steam service friends should also be included in the response",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "GetFriendsListResult": {
      "name": "GetFriendsListResult",
      "properties": [
        {
          "name": "Friends",
          "description": "array of friends found",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "FriendInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetTitleDataRequest": {
      "name": "GetTitleDataRequest",
      "properties": [
        {
          "name": "Keys",
          "description": " array of keys to get back data from the TitleData data blob, set by the admin tools",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetTitleDataResult": {
      "name": "GetTitleDataResult",
      "properties": [
        {
          "name": "Data",
          "description": "a dictionary object of key / value pairs",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetTitleNewsRequest": {
      "name": "GetTitleNewsRequest",
      "properties": [
        {
          "name": "Count",
          "description": "limits the results to the last n entries (defaults to 10 if not set)",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "GetTitleNewsResult": {
      "name": "GetTitleNewsResult",
      "properties": [
        {
          "name": "News",
          "description": "array of news items",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "TitleNewsItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetUserDataRequest": {
      "name": "GetUserDataRequest",
      "properties": [
        {
          "name": "Keys",
          "description": "specific keys to search for in the custom user data",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetUserDataResult": {
      "name": "GetUserDataResult",
      "properties": [
        {
          "name": "Data",
          "description": "user specific data for this title",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "UserDataRecord",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetUserInventoryRequest": {
      "name": "GetUserInventoryRequest",
      "properties": []
    },
    "GetUserInventoryResult": {
      "name": "GetUserInventoryResult",
      "properties": [
        {
          "name": "Inventory",
          "description": "array of inventory items in the user's current inventory",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        },
        {
          "name": "VirtualCurrency",
          "description": "array of virtual currency balance(s) belonging to the user",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "ItemInstance": {
      "name": "ItemInstance",
      "description": "A unique item instance in a player's inventory",
      "sortKey": "ItemInstanceId",
      "properties": [
        {
          "name": "ItemId",
          "description": "Object name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemInstanceId",
          "description": "unique item id",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemClass",
          "description": "class name object belongs to",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PurchaseDate",
          "description": "date purchased",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Expiration",
          "description": "date object will expire (optional)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "RemainingUses",
          "description": "number of remaining uses (optional)",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "Annotation",
          "description": "game specific comment",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CatalogVersion",
          "description": "catalog version that this item is part of",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundleParent",
          "description": "Unique ID of the parent of where this item may have come from (e.g. if it comes from a crate or coupon)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ItemPuchaseRequest": {
      "name": "ItemPuchaseRequest",
      "properties": [
        {
          "name": "ItemId",
          "description": "ItemId of the item to purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Quantity",
          "description": "How many to buy",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "Annotation",
          "description": "Annotation text about this purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "UpgradeFromItems",
          "description": "What items to upgrade",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "LinkFacebookAccountRequest": {
      "name": "LinkFacebookAccountRequest",
      "properties": [
        {
          "name": "AccessToken",
          "description": "unique identifier from Facebook for the user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "LinkFacebookAccountResult": {
      "name": "LinkFacebookAccountResult",
      "properties": []
    },
    "LinkGameCenterAccountRequest": {
      "name": "LinkGameCenterAccountRequest",
      "properties": [
        {
          "name": "GameCenterId",
          "description": "Game Center identifier for the player account to be linked",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "LinkGameCenterAccountResult": {
      "name": "LinkGameCenterAccountResult",
      "properties": []
    },
    "LinkSteamAccountRequest": {
      "name": "LinkSteamAccountRequest",
      "properties": [
        {
          "name": "SteamTicket",
          "description": "unique identifier from Steam for the user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "LinkSteamAccountResult": {
      "name": "LinkSteamAccountResult",
      "properties": []
    },
    "LogEventRequest": {
      "name": "LogEventRequest",
      "properties": [
        {
          "name": "eventName",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Body",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "object",
          "optional": true
        }
      ]
    },
    "LogEventResult": {
      "name": "LogEventResult",
      "properties": [
        {
          "name": "errors",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "LoginResult": {
      "name": "LoginResult",
      "properties": [
        {
          "name": "SessionTicket",
          "description": "a unique token identifying the user and game at the server level, for the current session",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "LoginWithAndroidDeviceIDRequest": {
      "name": "LoginWithAndroidDeviceIDRequest",
      "properties": [
        {
          "name": "TitleId",
          "description": "unique identifier for the title, found in the URL on the PlayFab developer site as \"TitleId=[n]\" when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "AndroidDeviceId",
          "description": "Android device identifier for the user's device",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "OS",
          "description": "specific Operating System version for the user's device",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "AndroidDevice",
          "description": "specific model of the user's device",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CreateAccount",
          "description": "automatically create a PlayFab account if one is not currently linked to this iOS device",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "LoginWithFacebookRequest": {
      "name": "LoginWithFacebookRequest",
      "properties": [
        {
          "name": "TitleId",
          "description": "unique identifier for the title, found in the URL on the PlayFab developer site as \"TitleId=[n]\" when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "AccessToken",
          "description": "unique identifier from Facebook for the user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CreateAccount",
          "description": "automatically create a PlayFab account if one is not currently linked to this Facebook account",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "LoginWithGoogleAccountRequest": {
      "name": "LoginWithGoogleAccountRequest",
      "properties": [
        {
          "name": "TitleId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "AccessToken",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "LoginWithIOSDeviceIDRequest": {
      "name": "LoginWithIOSDeviceIDRequest",
      "properties": [
        {
          "name": "TitleId",
          "description": "unique identifier for the title, found in the URL on the PlayFab developer site as \"TitleId=[n]\" when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "DeviceId",
          "description": "vendor-specific iOS identifier for the user's device",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "OS",
          "description": "specific Operating System version for the user's device",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DeviceModel",
          "description": "specific model of the user's device",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CreateAccount",
          "description": "automatically create a PlayFab account if one is not currently linked to this iOS device",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "LoginWithPlayFabRequest": {
      "name": "LoginWithPlayFabRequest",
      "properties": [
        {
          "name": "TitleId",
          "description": "unique identifier for the title, found in the URL on the PlayFab developer site as \"TitleId=[n]\" when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Username",
          "description": "PlayFab username for the account to be signed in (3-24 characters)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Password",
          "description": "password for the account to be signed in (6-24 characters)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "LoginWithSteamRequest": {
      "name": "LoginWithSteamRequest",
      "properties": [
        {
          "name": "TitleId",
          "description": "unique identifier for the title, found in the URL on the PlayFab developer site as \"TitleId=[n]\" when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "SteamTicket",
          "description": "unique identifier from Steam for the user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CreateAccount",
          "description": "automatically create a PlayFab account if one is not currently linked to this Steam account",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "MatchmakeRequest": {
      "name": "MatchmakeRequest",
      "properties": [
        {
          "name": "BuildVersion",
          "description": "build version we want to match make against",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Region",
          "description": "region we want to match make against",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": true
        },
        {
          "name": "GameMode",
          "description": "game mode we want to match make against",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "LobbyId",
          "description": "lobby ID we want to match make against (i.e. selecting a specific server)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "EnableQueue",
          "description": "if specified match specified is full, allow the user to wait in a queue to join. NOTE - only valid if LobbyId is specified",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "MatchmakeResult": {
      "name": "MatchmakeResult",
      "properties": [
        {
          "name": "LobbyID",
          "description": "unique lobby id of server we made a match against",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ServerHostname",
          "description": "server IP address we made a match against",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ServerPort",
          "description": "port number server communicates on",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "WebSocketPort",
          "description": "if server uses http connection protocols, this is the port it uses",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "Ticket",
          "description": "server authorisation ticket - used by RedeemCoupon to validate user insertion into the game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Expires",
          "description": "time/date the server expires on",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PollWaitTimeMS",
          "description": "UNKNOWN - unused in code",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "Status",
          "description": "result of match making process",
          "jsontype": "String",
          "actualtype": "MatchmakeStatus",
          "isenum": true,
          "optional": true
        },
        {
          "name": "Queue",
          "description": "queue of unique user Id's of players waiting to join this game. This user will be at the end of this list.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "MatchmakeStatus": {
      "name": "MatchmakeStatus",
      "isenum": true,
      "enumvalues": [
        {
          "name": "Complete"
        },
        {
          "name": "Waiting"
        },
        {
          "name": "GameNotFound"
        }
      ]
    },
    "PayForPurchaseRequest": {
      "name": "PayForPurchaseRequest",
      "properties": [
        {
          "name": "OrderId",
          "description": "purchase order identifier returned from StartPurchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ProviderName",
          "description": "payment provider to use to fund the purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Currency",
          "description": "currency to use to fund the purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "PayForPurchaseResult": {
      "name": "PayForPurchaseResult",
      "properties": [
        {
          "name": "OrderId",
          "description": "purchase order identifier",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Status",
          "description": "status of the transaction",
          "jsontype": "String",
          "actualtype": "TransactionStatus",
          "isenum": true,
          "optional": true
        },
        {
          "name": "VCAmount",
          "description": "virtual currency cost of the transaction",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "PurchaseCurrency",
          "description": "real world currency for the transaction",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PurchasePrice",
          "description": "real world cost of the transaction",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "CreditApplied",
          "description": "local credit applied to the transaction (provider specific)",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "ProviderData",
          "description": "provider used for the transaction",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PurchaseConfirmationPageURL",
          "description": "url to the purchase provider page that details the purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrency",
          "description": "current virtual currency totals for the user",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "PaymentOption": {
      "name": "PaymentOption",
      "properties": [
        {
          "name": "Currency",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ProviderName",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Price",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "StoreCredit",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        }
      ]
    },
    "PlaylistInfo": {
      "name": "PlaylistInfo",
      "properties": [
        {
          "name": "PlaylistId",
          "description": "unique id of a playlist",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GameCount",
          "description": "number of games running on this region",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "GamePlayersCount",
          "description": "number of players inside this region",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        }
      ]
    },
    "PurchasedItem": {
      "name": "PurchasedItem",
      "properties": [
        {
          "name": "ItemInstanceId",
          "description": "unique instance identifier for this catalog item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "unique identifier for the catalog item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CatalogVersion",
          "description": "catalog version for the item purchased",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "description": "display name for the catalog item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "UnitCurrency",
          "description": "currency type for the cost of the catalog item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "UnitPrice",
          "description": "cost of the catalog item in the given currency",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "BundleContents",
          "description": "array of unique items that were awarded when this catalog item was purchased",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "PurchaseItemRequest": {
      "name": "PurchaseItemRequest",
      "properties": [
        {
          "name": "ItemId",
          "description": "ItemId of the item to purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "VirtualCurrency",
          "description": "Virtual currency to use to purchase the item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Price",
          "description": "Price the client expects to pay for the item. Required to validate that the price hasn't changed.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "CatalogVersion",
          "description": "catalog version for the items to be purchased (defaults to most recent version",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "PurchaseItemResult": {
      "name": "PurchaseItemResult",
      "properties": [
        {
          "name": "Items",
          "description": "Items purchased. (If you purchase a bundle, you can get multiple items as a result",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PurchasedItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "RedeemCouponRequest": {
      "name": "RedeemCouponRequest",
      "properties": [
        {
          "name": "CouponCode",
          "description": "generated coupon code to redeem",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CatalogVersion",
          "description": "catalog version of the coupon",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RedeemCouponResult": {
      "name": "RedeemCouponResult",
      "properties": [
        {
          "name": "GrantedItems",
          "description": "array of items granted to the player as a result of redeeming the coupon",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "Region": {
      "name": "Region",
      "isenum": true,
      "enumvalues": [
        {
          "name": "USWest"
        },
        {
          "name": "USCentral"
        },
        {
          "name": "USEast"
        },
        {
          "name": "EUWest"
        },
        {
          "name": "APSouthEast"
        },
        {
          "name": "APNorthEast"
        },
        {
          "name": "SAEast"
        },
        {
          "name": "Australia"
        },
        {
          "name": "China"
        },
        {
          "name": "UberLan"
        }
      ]
    },
    "RegionInfo": {
      "name": "RegionInfo",
      "properties": [
        {
          "name": "Region",
          "description": "region we refer to",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": true
        },
        {
          "name": "Name",
          "description": "name of region",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Available",
          "description": "is this region available for usage (e.g. adding a server, or adding players)",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "PingUrl",
          "description": "url to ping to get rountrip time",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GameCount",
          "description": "number of games / servers running on this region",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "GamePlayersCount",
          "description": "number of players in this region",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "GameModes",
          "description": "list of game modes being supported by servers in this region",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "GameModeInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "RegionPlaylistsRequest": {
      "name": "RegionPlaylistsRequest",
      "properties": [
        {
          "name": "BuildVersion",
          "description": "version of build we want to get stats for",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Region",
          "description": "region we are interested in",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": false
        },
        {
          "name": "TitleId",
          "description": "is the specific game ID granted by PlayFab via the website, found on the end of the URL once you are logged in and looking at a specific game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RegionPlaylistsResult": {
      "name": "RegionPlaylistsResult",
      "properties": [
        {
          "name": "Playlists",
          "description": "array of games in regions found matching the request parameters",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PlaylistInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "RegisterForIOSPushNotificationRequest": {
      "name": "RegisterForIOSPushNotificationRequest",
      "properties": [
        {
          "name": "DeviceToken",
          "description": "unique token generated by the Apple Push Notification service when the title registered to receive push notifications",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "RegisterForIOSPushNotificationResult": {
      "name": "RegisterForIOSPushNotificationResult",
      "properties": []
    },
    "RegisterPlayFabUserRequest": {
      "name": "RegisterPlayFabUserRequest",
      "properties": [
        {
          "name": "TitleId",
          "description": "unique identifier for the title, found in the URL on the PlayFab developer site as \"TitleId=[n]\" when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Username",
          "description": "PlayFab username for the account to be signed in (3-24 characters)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Email",
          "description": "user email address, used for account password recovery",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Password",
          "description": "password for the account to be signed in (6-24 characters)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Origination",
          "description": "optional string indicating where this user came from (iOS iPhone, Android, etc.)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RegisterPlayFabUserResult": {
      "name": "RegisterPlayFabUserResult",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier for this newly created account",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SessionTicket",
          "description": "a unique token identifying the user and game at the server level, for the current session",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Username",
          "description": "PlayFab unique user name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RemoveFriendRequest": {
      "name": "RemoveFriendRequest",
      "properties": [
        {
          "name": "FriendPlayFabId",
          "description": "PlayFab identifier of the friend account which is to be removed",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "RemoveFriendResult": {
      "name": "RemoveFriendResult",
      "properties": []
    },
    "SendAccountRecoveryEmailRequest": {
      "name": "SendAccountRecoveryEmailRequest",
      "properties": [
        {
          "name": "Email",
          "description": "user email address, used for account password recovery",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "TitleId",
          "description": "unique identifier for the title, found in the URL on the PlayFab developer site as \"TitleId=[n]\" when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "SendAccountRecoveryEmailResult": {
      "name": "SendAccountRecoveryEmailResult",
      "properties": []
    },
    "SetFriendTagsRequest": {
      "name": "SetFriendTagsRequest",
      "properties": [
        {
          "name": "FriendPlayFabId",
          "description": "PlayFab identifier of the friend account to which the tag(s) should be applied",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Tags",
          "description": "array of tags to set on the friend account",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "SetFriendTagsResult": {
      "name": "SetFriendTagsResult",
      "properties": []
    },
    "StartGameRequest": {
      "name": "StartGameRequest",
      "properties": [
        {
          "name": "BuildVersion",
          "description": "which uploaded build of the game server we are starting up",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Region",
          "description": "the region we want to associate this server with for filtering servers",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": false
        },
        {
          "name": "GameMode",
          "description": "which user defined game mode this server is going to be running (e.g. Capture The Flag = 0, Deathmatch = 1) - default to 0 if there is only one mode",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PasswordRestricted",
          "description": "Is there a password associated with this server?",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "ReplayLobbyId",
          "description": "Lobby Id that the user came from from within the match maker service",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "StartGameResult": {
      "name": "StartGameResult",
      "properties": [
        {
          "name": "LobbyID",
          "description": "unique ID for the lobby of the server started.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ServerHostname",
          "description": "server IP address.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ServerPort",
          "description": "port on server used for communication",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "Ticket",
          "description": "unique ID for this server used in certain API calls",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Expires",
          "description": "expiration date, if appropriate",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Password",
          "description": "password to log in with",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "StartPurchaseRequest": {
      "name": "StartPurchaseRequest",
      "properties": [
        {
          "name": "CatalogVersion",
          "description": "catalog version for the items to be purchased",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Items",
          "description": "the set of items to purchase",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ItemPuchaseRequest",
          "isclass": true,
          "optional": false
        }
      ]
    },
    "StartPurchaseResult": {
      "name": "StartPurchaseResult",
      "properties": [
        {
          "name": "OrderId",
          "description": "purchase order identifier",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Contents",
          "description": "cart items to be purchased",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CartItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "PaymentOptions",
          "description": "available methods by which the user can pay",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PaymentOption",
          "isclass": true,
          "optional": true
        },
        {
          "name": "VirtualCurrencyBalances",
          "description": "current virtual currency totals for the user",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "TitleActivationStatus": {
      "name": "TitleActivationStatus",
      "isenum": true,
      "enumvalues": [
        {
          "name": "None"
        },
        {
          "name": "ActivatedTitleKey"
        },
        {
          "name": "PendingSteam"
        },
        {
          "name": "ActivatedSteam"
        },
        {
          "name": "RevokedSteam"
        }
      ]
    },
    "TitleNewsItem": {
      "name": "TitleNewsItem",
      "properties": [
        {
          "name": "Timestamp",
          "description": "date and time when the news items was posted",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "Title",
          "description": "title of the news item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Body",
          "description": "news item text",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "TransactionStatus": {
      "name": "TransactionStatus",
      "isenum": true,
      "enumvalues": [
        {
          "name": "CreateCart"
        },
        {
          "name": "Init"
        },
        {
          "name": "Approved"
        },
        {
          "name": "Succeeded"
        },
        {
          "name": "FailedByProvider"
        },
        {
          "name": "RefundPending"
        },
        {
          "name": "Refunded"
        },
        {
          "name": "RefundFailed"
        },
        {
          "name": "ChargedBack"
        },
        {
          "name": "FailedByUber"
        },
        {
          "name": "Revoked"
        },
        {
          "name": "TradePending"
        },
        {
          "name": "Upgraded"
        },
        {
          "name": "Other"
        },
        {
          "name": "Failed"
        }
      ]
    },
    "UnlinkFacebookAccountRequest": {
      "name": "UnlinkFacebookAccountRequest",
      "properties": []
    },
    "UnlinkFacebookAccountResult": {
      "name": "UnlinkFacebookAccountResult",
      "properties": []
    },
    "UnlinkGameCenterAccountRequest": {
      "name": "UnlinkGameCenterAccountRequest",
      "properties": []
    },
    "UnlinkGameCenterAccountResult": {
      "name": "UnlinkGameCenterAccountResult",
      "properties": []
    },
    "UnlinkSteamAccountResult": {
      "name": "UnlinkSteamAccountResult",
      "properties": []
    },
    "UnlockContainerItemRequest": {
      "name": "UnlockContainerItemRequest",
      "properties": [
        {
          "name": "ContainerItemId",
          "description": "unique identifier of the container to attempt to unlock",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CatalogVersion",
          "description": "catalog version of the container",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UnlockContainerItemResult": {
      "name": "UnlockContainerItemResult",
      "properties": [
        {
          "name": "UnlockedItemInstanceId",
          "description": "Unique instance id of the container unlocked",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "UnlockedWithItemInstanceId",
          "description": "Unique item instance id of the key used to unlock it, if applicable",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GrantedItems",
          "description": "array of items granted to the player as a result of unlocking the container",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        },
        {
          "name": "VirtualCurrency",
          "description": "virtual currency granted to the player as a result of unlocking the container",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "UpdateEmailAddressRequest": {
      "name": "UpdateEmailAddressRequest",
      "properties": [
        {
          "name": "Email",
          "description": "user email address, used for account password recovery",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "UpdateEmailAddressResult": {
      "name": "UpdateEmailAddressResult",
      "properties": []
    },
    "UpdatePasswordRequest": {
      "name": "UpdatePasswordRequest",
      "properties": [
        {
          "name": "Password",
          "description": "password for the account to be signed in (6-24 characters)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "UpdatePasswordResult": {
      "name": "UpdatePasswordResult",
      "properties": []
    },
    "UpdateUserDataRequest": {
      "name": "UpdateUserDataRequest",
      "properties": [
        {
          "name": "Data",
          "description": "data to be written to the user's custom data",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UpdateUserDataResult": {
      "name": "UpdateUserDataResult",
      "properties": []
    },
    "UpdateUserTitleDisplayNameRequest": {
      "name": "UpdateUserTitleDisplayNameRequest",
      "properties": [
        {
          "name": "DisplayName",
          "description": "new title display name for the user - must be between 3 and 25 characters",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "UpdateUserTitleDisplayNameResult": {
      "name": "UpdateUserTitleDisplayNameResult",
      "properties": [
        {
          "name": "DisplayName",
          "description": "current title display name for the user (this will be the original display name if the rename attempt failed)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserAccountInfo": {
      "name": "UserAccountInfo",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "unique id for account",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Created",
          "description": "time / date account was created",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "Username",
          "description": "account name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TitleInfo",
          "description": "specific game title information",
          "jsontype": "Object",
          "actualtype": "UserTitleInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "PrivateInfo",
          "description": "user's private account into",
          "jsontype": "Object",
          "actualtype": "UserPrivateAccountInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "FacebookInfo",
          "description": "facebook information (if linked)",
          "jsontype": "Object",
          "actualtype": "UserFacebookInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "SteamInfo",
          "description": "steam information (if linked)",
          "jsontype": "Object",
          "actualtype": "UserSteamInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "GameCenterInfo",
          "description": "gamecenter information (if linked)",
          "jsontype": "Object",
          "actualtype": "UserGameCenterInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UserDataRecord": {
      "name": "UserDataRecord",
      "properties": [
        {
          "name": "Value",
          "description": "The user-supplied data for this user data key",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "LastUpdated",
          "description": "The time this data was last updated",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        }
      ]
    },
    "UserFacebookInfo": {
      "name": "UserFacebookInfo",
      "properties": [
        {
          "name": "FacebookId",
          "description": "facebook id",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FacebookUsername",
          "description": "facebook username",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FacebookDisplayname",
          "description": "facebook display name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserGameCenterInfo": {
      "name": "UserGameCenterInfo",
      "properties": [
        {
          "name": "GameCenterId",
          "description": "gamecenter id if account is linked",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserOrigination": {
      "name": "UserOrigination",
      "isenum": true,
      "enumvalues": [
        {
          "name": "Organic"
        },
        {
          "name": "Steam"
        },
        {
          "name": "Google"
        },
        {
          "name": "Amazon"
        },
        {
          "name": "Facebook"
        },
        {
          "name": "Kongregate"
        },
        {
          "name": "GamersFirst"
        },
        {
          "name": "Unknown"
        },
        {
          "name": "IOS"
        },
        {
          "name": "LoadTest"
        },
        {
          "name": "Android"
        }
      ]
    },
    "UserPrivateAccountInfo": {
      "name": "UserPrivateAccountInfo",
      "properties": [
        {
          "name": "Email",
          "description": "Email address",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserSteamInfo": {
      "name": "UserSteamInfo",
      "properties": [
        {
          "name": "SteamId",
          "description": "steam id",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SteamCountry",
          "description": "if account is linked to steam, this is the country that steam reports the player being in",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SteamCurrency",
          "description": "Currency set in the user's steam account",
          "jsontype": "String",
          "actualtype": "Currency",
          "isenum": true,
          "optional": true
        },
        {
          "name": "SteamActivationStatus",
          "description": "STEAM specific - what stage of game ownership is the user at with Steam",
          "jsontype": "String",
          "actualtype": "TitleActivationStatus",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "UserTitleInfo": {
      "name": "UserTitleInfo",
      "properties": [
        {
          "name": "DisplayName",
          "description": "displayable game name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Origination",
          "description": "optional value that details where the user originated",
          "jsontype": "String",
          "actualtype": "UserOrigination",
          "isenum": true,
          "optional": true
        },
        {
          "name": "Created",
          "description": "When this object was created. Title specific reporting for user creation time should be done against this rather than the User created field since account creation can differ significantly between title registration.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "LastLogin",
          "description": "Last time the user logged in to this title",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "FirstLogin",
          "description": " Time the user first logged in. This can be different from when the UTD was created. For example we create a UTD when issuing a beta key. An arbitrary amount of time can pass before the user actually logs in.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        }
      ]
    },
    "ValidateGooglePlayPurchaseRequest": {
      "name": "ValidateGooglePlayPurchaseRequest",
      "properties": [
        {
          "name": "packageName",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "productId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "purchaseToken",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "accessToken",
          "description": "OAuth 2.0 token retrieved from Google",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ValidateGooglePlayPurchaseResult": {
      "name": "ValidateGooglePlayPurchaseResult",
      "properties": [
        {
          "name": "kind",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "purchaseTime",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "puchaseState",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "consumptionState",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "developerPayload",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ValidateIOSReceiptRequest": {
      "name": "ValidateIOSReceiptRequest",
      "properties": [
        {
          "name": "ReceiptData",
          "description": "base64 encoded receipt data, passed back by the App Store as a result of a successful purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ObjectName",
          "description": "name of the object purchased",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CurrencyCode",
          "description": "currency used for the purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PurchasePrice",
          "description": "amount of the stated currency paid for the object",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        }
      ]
    },
    "ValidateIOSReceiptResult": {
      "name": "ValidateIOSReceiptResult",
      "properties": []
    }
  },
  "calls": [
    {
      "name": "LoginWithAndroidDeviceID",
      "summary": "Signs the user in using the Android device identifier, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "If this is the first time a user has signed in with the Android device, the CreateAccount flag will be used to determine whether a new PlayFab account should be created and linked to the Android device ID. In this case, no email or username will be associated with the PlayFab account. If CreateAccount is set to false and no PlayFab account is linked to the Android device, an error indicating this will be returned, so that the title can guide the user through creation of a PlayFab account.",
      "subgroup": "Authentication",
      "url": "/Client/LoginWithAndroidDeviceID",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithAndroidDeviceIDRequest",
      "result": "LoginResult",
      "seeAlso": [
        "LoginWithIOSDeviceID"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "AccountNotFound",
        "AccountBanned"
      ]
    },
    {
      "name": "LoginWithFacebook",
      "summary": "Signs the user in using a Facebook access token, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "If this is the first time a user has signed in with the Facebook account, the CreateAccount flag will be used to determine whether a new PlayFab account should be created and linked to the provided account's Facebook ID. In this case, no email or username will be associated with the PlayFab account. If CreateAccount is set to false and no PlayFab account is linked to the Facebook account, an error indicating this will be returned, so that the title can guide the user through creation of a PlayFab account.",
      "subgroup": "Authentication",
      "url": "/Client/LoginWithFacebook",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithFacebookRequest",
      "result": "LoginResult",
      "seeAlso": [
        "LinkFacebookAccount",
        "UnlinkFacebookAccount"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "InvalidFacebookToken",
        "AccountNotFound",
        "AccountBanned"
      ]
    },
    {
      "name": "LoginWithGoogleAccount",
      "summary": "Signs the user in using a Google account access token, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "If this is the first time a user has signed in with the Google account, the CreateAccount flag will be used to determine whether a new PlayFab account should be created and linked to the provided account's Google ID. In this case, no email or username will be associated with the PlayFab account. If CreateAccount is set to false and no PlayFab account is linked to the Google account, an error indicating this will be returned, so that the title can guide the user through creation of a PlayFab account.",
      "subgroup": "Authentication",
      "url": "/Client/LoginWithGoogleAccount",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithGoogleAccountRequest",
      "result": "LoginResult",
      "errors": [
        "InvalidParams",
        "InvalidGoogleToken",
        "AccountBanned"
      ]
    },
    {
      "name": "LoginWithIOSDeviceID",
      "summary": "Signs the user in using the vendor-specific iOS device identifier, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "If this is the first time a user has signed in with the iOS device, the CreateAccount flag will be used to determine whether a new PlayFab account should be created and linked to the vendor-specific iOS device ID. In this case, no email or username will be associated with the PlayFab account. If CreateAccount is set to false and no PlayFab account is linked to the iOS device, an error indicating this will be returned, so that the title can guide the user through creation of a PlayFab account.",
      "subgroup": "Authentication",
      "url": "/Client/LoginWithIOSDeviceID",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithIOSDeviceIDRequest",
      "result": "LoginResult",
      "seeAlso": [
        "LoginWithAndroidDeviceID"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "AccountNotFound",
        "AccountBanned"
      ]
    },
    {
      "name": "LoginWithPlayFab",
      "summary": "Signs the user into the PlayFab account, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "Username and password lengths are provided for information purposes. The server will validate that data passed in conforms to the field definition and report errors appropriately. It is recommended that developers not perform this validation locally, so that future updates to the username or password do not require client updates.",
      "subgroup": "Authentication",
      "url": "/Client/LoginWithPlayFab",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithPlayFabRequest",
      "result": "LoginResult",
      "seeAlso": [
        "RegisterPlayFabUser"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "AccountNotFound",
        "AccountBanned",
        "InvalidUsernameOrPassword"
      ]
    },
    {
      "name": "LoginWithSteam",
      "summary": "Signs the user in using a Steam authentication ticket, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "If this is the first time a user has signed in with the Steam account, the CreateAccount flag will be used to determine whether a new PlayFab account should be created and linked to the provided account's Steam ID. In this case, no email or username will be associated with the PlayFab account. If CreateAccount is set to false and no PlayFab account is linked to the Steam account, an error indicating this will be returned, so that the title can guide the user through creation of a PlayFab account.",
      "subgroup": "Authentication",
      "url": "/Client/LoginWithSteam",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithSteamRequest",
      "result": "LoginResult",
      "seeAlso": [
        "LinkSteamAccount",
        "UnlinkSteamAccount"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "InvalidSteamTicket",
        "AccountNotFound",
        "AccountBanned"
      ]
    },
    {
      "name": "RegisterPlayFabUser",
      "summary": "Registers a new Playfab user account, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "resultDetails": "Each account must have a unique email address in the PlayFab service. Once created, the account may be associated with additional accounts (Steam, Facebook, Game Center, etc.), allowing for added social network lists and achievements systems.",
      "subgroup": "Authentication",
      "url": "/Client/RegisterPlayFabUser",
      "auth": "None",
      "method": "POST",
      "request": "RegisterPlayFabUserRequest",
      "result": "RegisterPlayFabUserResult",
      "seeAlso": [
        "LoginWithPlayFab"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "EmailAddressNotAvailable",
        "InvalidEmailAddress",
        "UsernameNotAvailable",
        "InvalidUsername",
        "InvalidPassword"
      ]
    },
    {
      "name": "SendAccountRecoveryEmail",
      "summary": "Forces an email to be sent to the registered email address for the user's account, with a link allowing the user to change the password",
      "requestDetails": "If the account in question is a \"temporary\" account (for example, one that was created via a call to LoginFromIOSDeviceID), thisfunction will have no effect. Only PlayFab accounts which have valid email addresses will be able to receive a password reset email using this API.",
      "subgroup": "Authentication",
      "url": "/Client/SendAccountRecoveryEmail",
      "auth": "None",
      "method": "POST",
      "request": "SendAccountRecoveryEmailRequest",
      "result": "SendAccountRecoveryEmailResult",
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "GetAccountInfo",
      "summary": "Retrieves the user's PlayFab account details",
      "resultDetails": "This API retrieves details regarding the user in the PlayFab service. Note that data returned may contain Personally Identifying Information (PII), such as email address, and so care should be taken in how this data is stored and managed. Since this call will always return the relevant information for the user, the recommendation is to not store this data locally.",
      "subgroup": "Account Management",
      "url": "/Client/GetAccountInfo",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetAccountInfoRequest",
      "result": "GetAccountInfoResult"
    },
    {
      "name": "LinkFacebookAccount",
      "summary": "Links the Facebook account associated with the provided Facebook access token to the user's PlayFab account",
      "subgroup": "Account Management",
      "url": "/Client/LinkFacebookAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LinkFacebookAccountRequest",
      "result": "LinkFacebookAccountResult",
      "seeAlso": [
        "UnlinkFacebookAccount",
        "LoginWithFacebook"
      ],
      "errors": [
        "InvalidParams",
        "InvalidFacebookToken",
        "LinkedAccountAlreadyClaimed",
        "AccountAlreadyLinked"
      ]
    },
    {
      "name": "LinkGameCenterAccount",
      "summary": "Links the Game Center account associated with the provided Game Center ID to the user's PlayFab account",
      "subgroup": "Account Management",
      "url": "/Client/LinkGameCenterAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LinkGameCenterAccountRequest",
      "result": "LinkGameCenterAccountResult",
      "seeAlso": [
        "UnlinkGameCenterAccount"
      ],
      "errors": [
        "InvalidParams",
        "LinkedAccountAlreadyClaimed",
        "AccountAlreadyLinked"
      ]
    },
    {
      "name": "LinkSteamAccount",
      "summary": "Links the Steam account associated with the provided Steam authentication ticket to the user's PlayFab account",
      "subgroup": "Account Management",
      "url": "/Client/LinkSteamAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LinkSteamAccountRequest",
      "result": "LinkSteamAccountResult",
      "seeAlso": [
        "UnlinkSteamAccount",
        "LoginWithSteam"
      ],
      "errors": [
        "InvalidParams",
        "InvalidSteamTicket",
        "LinkedAccountAlreadyClaimed",
        "AccountAlreadyLinked"
      ]
    },
    {
      "name": "UnlinkFacebookAccount",
      "summary": "Unlinks the related Facebook account from the user's PlayFab account",
      "subgroup": "Account Management",
      "url": "/Client/UnlinkFacebookAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UnlinkFacebookAccountRequest",
      "result": "UnlinkFacebookAccountResult",
      "seeAlso": [
        "LinkFacebookAccount"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotLinked"
      ]
    },
    {
      "name": "UnlinkGameCenterAccount",
      "summary": "Unlinks the related Game Center account from the user's PlayFab account",
      "subgroup": "Account Management",
      "url": "/Client/UnlinkGameCenterAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UnlinkGameCenterAccountRequest",
      "result": "UnlinkGameCenterAccountResult",
      "seeAlso": [
        "LinkGameCenterAccount"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotLinked"
      ]
    },
    {
      "name": "UnlinkSteamAccount",
      "summary": "Unlinks the related Steam account from the user's PlayFab account",
      "subgroup": "Account Management",
      "url": "/Client/UnlinkSteamAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LinkSteamAccountRequest",
      "result": "UnlinkSteamAccountResult",
      "seeAlso": [
        "LinkSteamAccount"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotLinked"
      ]
    },
    {
      "name": "UpdateEmailAddress",
      "summary": "Updates the local user's email address in PlayFab",
      "requestDetails": "At this time, the email address is validated for correctness, but no verification email is sent to the address in question.",
      "subgroup": "Account Management",
      "url": "/Client/UpdateEmailAddress",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UpdateEmailAddressRequest",
      "result": "UpdateEmailAddressResult",
      "errors": [
        "InvalidParams",
        "EmailAddressNotAvailable"
      ]
    },
    {
      "name": "UpdatePassword",
      "summary": "Updates the local user's password in PlayFab",
      "requestDetails": "Passwords are required to be between 6 and 20 characters in length.",
      "subgroup": "Account Management",
      "url": "/Client/UpdatePassword",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UpdatePasswordRequest",
      "result": "UpdatePasswordResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UpdateUserTitleDisplayName",
      "summary": "Updates the title specific display name for the user",
      "requestDetails": "In addition to the PlayFab username, titles can make use of a DisplayName which is also a unique identifier, but specific to the title. This allows for unique names which more closely match the theme or genre of a title, for example.",
      "subgroup": "Account Management",
      "url": "/Client/UpdateUserTitleDisplayName",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UpdateUserTitleDisplayNameRequest",
      "result": "UpdateUserTitleDisplayNameResult",
      "errors": [
        "InvalidParams",
        "UsernameNotAvailable"
      ]
    },
    {
      "name": "GetUserData",
      "summary": "Retrieves the title-specific custom data for the user which is readable and writable by the client",
      "requestDetails": "Data is stored as an arbitrary JSON object of key-value pairs. If the Keys parameter is provided, the custom data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "url": "/Client/GetUserData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetUserDataRequest",
      "result": "GetUserDataResult",
      "seeAlso": [
        "UpdateUserData",
        "GetUserReadOnlyData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserReadOnlyData",
      "summary": "Retrieves the title-specific custom data for the user which can only be read by the client",
      "requestDetails": "Data is stored as an arbitrary JSON object of key-value pairs. If the Keys parameter is provided, the custom data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "url": "/Client/GetUserReadOnlyData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetUserDataRequest",
      "result": "GetUserDataResult",
      "seeAlso": [
        "GetUserData",
        "UpdateUserData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UpdateUserData",
      "summary": "Creates and updates the title-specific custom data for the user which is readable and writable by the client",
      "requestDetails": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, while keys with null values will be removed. New keys will be added, with the given values. No other key-value pairs will be changed apart from those specified in the call.",
      "subgroup": "Player Data Management",
      "url": "/Client/UpdateUserData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UpdateUserDataRequest",
      "result": "UpdateUserDataResult",
      "seeAlso": [
        "GetUserData",
        "GetUserReadOnlyData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetCatalogItems",
      "summary": "Retrieves the specified version of the title's catalog of virtual goods, including all defined properties",
      "resultDetails": "If CatalogVersion is not specified, only inventory items associated with the most recent version of the catalog will be returned.",
      "subgroup": "Title-Wide Data Management",
      "url": "/Client/GetCatalogItems",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetCatalogItemsRequest",
      "result": "GetCatalogItemsResult",
      "seeAlso": [
        "GetUserInventory"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetTitleData",
      "summary": "Retrieves the key-value store of custom title settings",
      "requestDetails": "This API is designed to return title specific values which can be read, but not written to, by the client. For example, a developer could choose to store values which modify the user experience, such as enemy spawn rates, weapon strengths, movement speeds, etc. This allows a developer to update the title without the need to create, test, and ship a new build.",
      "subgroup": "Title-Wide Data Management",
      "url": "/Client/GetTitleData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetTitleDataRequest",
      "result": "GetTitleDataResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetTitleNews",
      "summary": "Retrieves the title news feed, as configured in the developer portal",
      "subgroup": "Title-Wide Data Management",
      "url": "/Client/GetTitleNews",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetTitleNewsRequest",
      "result": "GetTitleNewsResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "ConfirmPurchase",
      "summary": "Confirms with the payment provider that the purchase was approved (if applicable) and adjusts inventory and virtual currency balances as appropriate",
      "requestDetails": "The final step in the purchasing process, this API finalizes the purchase with the payment provider, where applicable, adding virtual goods to the player inventory (including random drop table resolution and recursive addition of bundled items) and adjusting virtual currency balances for funds used or added. Note that this is a pull operation, and should be polled regularly when a purchase is in progress.",
      "subgroup": "Player Item Management",
      "url": "/Client/ConfirmPurchase",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "ConfirmPurchaseRequest",
      "result": "ConfirmPurchaseResult",
      "seeAlso": [
        "StartPurchase",
        "PayForPurchase"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "ConsumeItem",
      "summary": "Consume uses of a consumable item. When all uses are consumed, it will be removed from the player's inventory.",
      "subgroup": "Player Item Management",
      "url": "/Client/ConsumeItem",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "ConsumeItemRequest",
      "result": "ConsumeItemResult",
      "errors": [
        "InvalidParams",
        "NoRemainingUses",
        "ItemNotFound"
      ]
    },
    {
      "name": "GetUserInventory",
      "summary": "Retrieves the user's current inventory of virtual goods",
      "resultDetails": "All items currently in the user inventory will be returned, irrespective of how they were acquired (via purchasing, grants, coupons, etc.). Items that are expired, fully consumed, or are no longer valid are not considered to be in the user's current inventory, and so will not be not included.",
      "subgroup": "Player Item Management",
      "url": "/Client/GetUserInventory",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetUserInventoryRequest",
      "result": "GetUserInventoryResult",
      "seeAlso": [
        "GetCatalogItems"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "PayForPurchase",
      "summary": "Selects a payment option for purchase order created via StartPurchase",
      "requestDetails": "This is the second step in the purchasing process, initiating the purchase transaction with the payment provider (if applicable). Note that there may be significant delays in responses from purchase providers - it is therefore recommended that the title not block on this operation, or (at a minimum) provide visual feedback to the user that the operation is pending.",
      "resultDetails": "For web-based payment providers, this operation returns the URL to which the user should be directed inorder to approve the purchase. Items added to the user inventory as a result of this operation will be marked as unconfirmed.",
      "subgroup": "Player Item Management",
      "url": "/Client/PayForPurchase",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "PayForPurchaseRequest",
      "result": "PayForPurchaseResult",
      "seeAlso": [
        "StartPurchase",
        "ConfirmPurchase"
      ],
      "errors": [
        "InvalidParams",
        "InvalidPaymentProvider",
        "FailedByPaymentProvider"
      ]
    },
    {
      "name": "PurchaseItem",
      "summary": "Buys a single item with virtual currency. You must specify both the virtual currency to use to purchase, as well as what the client believes the price to be. This lets the server fail the purchase if the price has changed.",
      "subgroup": "Player Item Management",
      "url": "/Client/PurchaseItem",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "PurchaseItemRequest",
      "result": "PurchaseItemResult",
      "seeAlso": [
        "StartPurchase"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "RedeemCoupon",
      "summary": "Adds the virtual goods associated with the coupon to the user's inventory",
      "requestDetails": "Coupon codes can be created for any item, or set of items, in the catalog for the title. This operation causes the coupon to be consumed, and the specific items to be awarded to the user. Attempting to re-use an already consumed code, or a code which has not yet been created in the service, will result in an error.",
      "subgroup": "Player Item Management",
      "url": "/Client/RedeemCoupon",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "RedeemCouponRequest",
      "result": "RedeemCouponResult",
      "errors": [
        "InvalidParams",
        "CouponCodeNotFound"
      ]
    },
    {
      "name": "StartPurchase",
      "summary": "Creates an order for a list of items from the title catalog",
      "requestDetails": "This is the first step in the purchasing process. For security purposes, once the order (or \"cart\") has been created, additional inventory objects may no longer be added. In addition, inventory objects will be locked to the current prices, regardless of any subsequent changes at the catalog level which may occur during the next two steps.",
      "subgroup": "Player Item Management",
      "url": "/Client/StartPurchase",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "StartPurchaseRequest",
      "result": "StartPurchaseResult",
      "seeAlso": [
        "PayForPurchase",
        "ConfirmPurchase"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UnlockContainerItem",
      "summary": "Unlocks a container item in the user's inventory and consumes a key item of the type indicated by the container item",
      "requestDetails": "Container items and their associated unlocking items (\"crates\" and \"keys\") are paired inventory objects which provide developers with a secure way to have an object which requires another object to activate, without providing the client with the opportunity to use replay attacks, packet blocking, or similar techniques to gain the objects in the container illegitimately.",
      "resultDetails": "As a result of this operation, the inventory objects defined as belonging to the container will be added to the user's inventory, including random drop table resolution and recursive addition of bundled items.",
      "subgroup": "Player Item Management",
      "url": "/Client/UnlockContainerItem",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UnlockContainerItemRequest",
      "result": "UnlockContainerItemResult",
      "errors": [
        "InvalidParams",
        "InvalidContainerItem",
        "ContainerNotOwned",
        "KeyNotOwned",
        "InvalidItemIdInTable"
      ]
    },
    {
      "name": "AddFriend",
      "summary": "Adds the PlayFab user, based upon a match against a supplied unique identifier, to the friend list of the local user",
      "subgroup": "Friend List Management",
      "url": "/Client/AddFriend",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "AddFriendRequest",
      "result": "AddFriendResult",
      "seeAlso": [
        "GetFriendsList",
        "SetFriendTags"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "GetFriendsList",
      "summary": "Retrieves the current friend list for the local user, constrained to users who have PlayFab accounts",
      "requestDetails": "This operations refreshes the friend list of the local user, including querying all linked accounts.",
      "resultDetails": "The list returned can be a mixture of friends from Steam, Facebook and PlayFab, though  Facebook friends will only be those who signed info the game via Facebook.",
      "subgroup": "Friend List Management",
      "url": "/Client/GetFriendsList",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetFriendsListRequest",
      "result": "GetFriendsListResult",
      "seeAlso": [
        "AddFriend",
        "RemoveFriend"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "RemoveFriend",
      "summary": "Removes a specified user from the friend list of the local user",
      "subgroup": "Friend List Management",
      "url": "/Client/RemoveFriend",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "RemoveFriendRequest",
      "result": "RemoveFriendResult",
      "seeAlso": [
        "AddFriend",
        "SetFriendTags"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "SetFriendTags",
      "summary": "Updates the tag list for a specified user in the friend list of the local user",
      "requestDetails": "This operation is not additive. It will completely replace the tag list for the specified user.",
      "subgroup": "Friend List Management",
      "url": "/Client/SetFriendTags",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "SetFriendTagsRequest",
      "result": "SetFriendTagsResult",
      "seeAlso": [
        "AddFriend",
        "RemoveFriend"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "RegisterForIOSPushNotification",
      "summary": "Registers the iOS device to receive push notifications",
      "subgroup": "IOS-Specific APIs",
      "url": "/Client/RegisterForIOSPushNotification",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "RegisterForIOSPushNotificationRequest",
      "result": "RegisterForIOSPushNotificationResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "ValidateIOSReceipt",
      "summary": "Validates with the iTunes store that the receipt for an iOS in-app purchase is valid and that it matches the purchased catalog item",
      "resultDetails": "Once verified, the catalog item matching the iTunes item name will be added to the user's inventory.",
      "subgroup": "IOS-Specific APIs",
      "url": "/Client/ValidateIOSReceipt",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "ValidateIOSReceiptRequest",
      "result": "ValidateIOSReceiptResult",
      "errors": [
        "InvalidParams",
        "InvalidReceipt",
        "ReceiptAlreadyUsed"
      ]
    },
    {
      "name": "GetCurrentGames",
      "summary": "Get details about all current running game servers matching the given parameters.",
      "subgroup": "Matchmaking APIs",
      "url": "/Client/GetCurrentGames",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "CurrentGamesRequest",
      "result": "CurrentGamesResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetGameServerRegions",
      "summary": " Get details about the regions hosting game servers matching the given parameters.",
      "subgroup": "Matchmaking APIs",
      "url": "/Client/GetGameServerRegions",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GameServerRegionsRequest",
      "result": "GameServerRegionsResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetRegionPlaylists",
      "summary": "Get statistics about game server mode playlists.",
      "subgroup": "Matchmaking APIs",
      "url": "/Client/GetRegionPlaylists",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "RegionPlaylistsRequest",
      "result": "RegionPlaylistsResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "Matchmake",
      "summary": "Assign the current player to an existing or new game server matching the given parameters and return the connection information.",
      "subgroup": "Matchmaking APIs",
      "url": "/Client/Matchmake",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "MatchmakeRequest",
      "result": "MatchmakeResult",
      "errors": [
        "InvalidParams",
        "GameModeNotFound"
      ]
    },
    {
      "name": "StartGame",
      "summary": "Start a new game server with a given configuration, add the current player and return the connection information.",
      "subgroup": "Matchmaking APIs",
      "url": "/Client/StartGame",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "StartGameRequest",
      "result": "StartGameResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "AndroidDevicePushNotificationRegistration",
      "summary": "Registers the Android device to receive push notifications",
      "subgroup": "Android-Specific APIs",
      "url": "/Client/AndroidDevicePushNotificationRegistration",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "AndroidDevicePushNotificationRegistrationRequest",
      "result": "AndroidDevicePushNotificationRegistrationResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "ValidateGooglePlayPurchase",
      "summary": "Validates with the GooglePlay store that the receipt for an in-app purchase is valid and that it matches the purchased catalog item",
      "resultDetails": "Once verified, the catalog item matching the GooglePlay store item name will be added to the user's inventory.",
      "subgroup": "Android-Specific APIs",
      "url": "/Client/ValidateGooglePlayPurchase",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "ValidateGooglePlayPurchaseRequest",
      "result": "ValidateGooglePlayPurchaseResult",
      "errors": [
        "InvalidParams",
        "InvalidReceipt",
        "ReceiptAlreadyUsed",
        "ReceiptCancelled"
      ]
    }
  ],
  "subgroups": [
    {
      "name": "Authentication",
      "methods": [
        "LoginWithAndroidDeviceID",
        "LoginWithFacebook",
        "LoginWithGoogleAccount",
        "LoginWithIOSDeviceID",
        "LoginWithPlayFab",
        "LoginWithSteam",
        "RegisterPlayFabUser",
        "SendAccountRecoveryEmail"
      ]
    },
    {
      "name": "Account Management",
      "methods": [
        "GetAccountInfo",
        "LinkFacebookAccount",
        "LinkGameCenterAccount",
        "LinkSteamAccount",
        "UnlinkFacebookAccount",
        "UnlinkGameCenterAccount",
        "UnlinkSteamAccount",
        "UpdateEmailAddress",
        "UpdatePassword",
        "UpdateUserTitleDisplayName"
      ]
    },
    {
      "name": "Player Data Management",
      "methods": [
        "GetUserData",
        "GetUserReadOnlyData",
        "UpdateUserData"
      ]
    },
    {
      "name": "Title-Wide Data Management",
      "methods": [
        "GetCatalogItems",
        "GetTitleData",
        "GetTitleNews"
      ]
    },
    {
      "name": "Player Item Management",
      "methods": [
        "ConfirmPurchase",
        "ConsumeItem",
        "GetUserInventory",
        "PayForPurchase",
        "PurchaseItem",
        "RedeemCoupon",
        "StartPurchase",
        "UnlockContainerItem"
      ]
    },
    {
      "name": "Friend List Management",
      "methods": [
        "AddFriend",
        "GetFriendsList",
        "RemoveFriend",
        "SetFriendTags"
      ]
    },
    {
      "name": "IOS-Specific APIs",
      "methods": [
        "RegisterForIOSPushNotification",
        "ValidateIOSReceipt"
      ]
    },
    {
      "name": "Matchmaking APIs",
      "methods": [
        "GetCurrentGames",
        "GetGameServerRegions",
        "GetRegionPlaylists",
        "Matchmake",
        "StartGame"
      ]
    },
    {
      "name": "Android-Specific APIs",
      "methods": [
        "AndroidDevicePushNotificationRegistration",
        "ValidateGooglePlayPurchase"
      ]
    }
  ],
  "errors": {
    "Success": {
      "id": 0,
      "name": "Success"
    },
    "InvalidParams": {
      "id": 1000,
      "name": "InvalidParams"
    },
    "AccountNotFound": {
      "id": 1001,
      "name": "AccountNotFound"
    },
    "AccountBanned": {
      "id": 1002,
      "name": "AccountBanned"
    },
    "InvalidUsernameOrPassword": {
      "id": 1003,
      "name": "InvalidUsernameOrPassword"
    },
    "InvalidTitleId": {
      "id": 1004,
      "name": "InvalidTitleId"
    },
    "InvalidEmailAddress": {
      "id": 1005,
      "name": "InvalidEmailAddress"
    },
    "EmailAddressNotAvailable": {
      "id": 1006,
      "name": "EmailAddressNotAvailable"
    },
    "InvalidUsername": {
      "id": 1007,
      "name": "InvalidUsername"
    },
    "InvalidPassword": {
      "id": 1008,
      "name": "InvalidPassword"
    },
    "UsernameNotAvailable": {
      "id": 1009,
      "name": "UsernameNotAvailable"
    },
    "InvalidSteamTicket": {
      "id": 1010,
      "name": "InvalidSteamTicket"
    },
    "AccountAlreadyLinked": {
      "id": 1011,
      "name": "AccountAlreadyLinked"
    },
    "LinkedAccountAlreadyClaimed": {
      "id": 1012,
      "name": "LinkedAccountAlreadyClaimed"
    },
    "InvalidFacebookToken": {
      "id": 1013,
      "name": "InvalidFacebookToken"
    },
    "AccountNotLinked": {
      "id": 1014,
      "name": "AccountNotLinked"
    },
    "FailedByPaymentProvider": {
      "id": 1015,
      "name": "FailedByPaymentProvider"
    },
    "CouponCodeNotFound": {
      "id": 1016,
      "name": "CouponCodeNotFound"
    },
    "InvalidContainerItem": {
      "id": 1017,
      "name": "InvalidContainerItem"
    },
    "ContainerNotOwned": {
      "id": 1018,
      "name": "ContainerNotOwned"
    },
    "KeyNotOwned": {
      "id": 1019,
      "name": "KeyNotOwned"
    },
    "InvalidItemIdInTable": {
      "id": 1020,
      "name": "InvalidItemIdInTable"
    },
    "InvalidReceipt": {
      "id": 1021,
      "name": "InvalidReceipt"
    },
    "ReceiptAlreadyUsed": {
      "id": 1022,
      "name": "ReceiptAlreadyUsed"
    },
    "ReceiptCancelled": {
      "id": 1023,
      "name": "ReceiptCancelled"
    },
    "GameNotFound": {
      "id": 1024,
      "name": "GameNotFound"
    },
    "GameModeNotFound": {
      "id": 1025,
      "name": "GameModeNotFound"
    },
    "InvalidGoogleToken": {
      "id": 1026,
      "name": "InvalidGoogleToken"
    },
    "BuildNotFound": {
      "id": 1027,
      "name": "BuildNotFound"
    },
    "PlayerNotInGame": {
      "id": 1028,
      "name": "PlayerNotInGame"
    },
    "InvalidTicket": {
      "id": 1029,
      "name": "InvalidTicket"
    },
    "InvalidOrderInfo": {
      "id": 1030,
      "name": "InvalidOrderInfo"
    },
    "RegistrationIncomplete": {
      "id": 1031,
      "name": "RegistrationIncomplete"
    },
    "InvalidPlatform": {
      "id": 1032,
      "name": "InvalidPlatform"
    },
    "SteamApplicationNotOwned": {
      "id": 1033,
      "name": "SteamApplicationNotOwned"
    },
    "WrongSteamAccount": {
      "id": 1034,
      "name": "WrongSteamAccount"
    },
    "TitleNotActivated": {
      "id": 1035,
      "name": "TitleNotActivated"
    },
    "RegistrationSessionNotFound": {
      "id": 1036,
      "name": "RegistrationSessionNotFound"
    },
    "NoSuchMod": {
      "id": 1037,
      "name": "NoSuchMod"
    },
    "FileNotFound": {
      "id": 1038,
      "name": "FileNotFound"
    },
    "DuplicateEmail": {
      "id": 1039,
      "name": "DuplicateEmail"
    },
    "ItemNotFound": {
      "id": 1040,
      "name": "ItemNotFound"
    },
    "ItemNotOwned": {
      "id": 1041,
      "name": "ItemNotOwned"
    },
    "ItemNotRecycleable": {
      "id": 1042,
      "name": "ItemNotRecycleable"
    },
    "ItemNotAffordable": {
      "id": 1043,
      "name": "ItemNotAffordable"
    },
    "InvalidVirtualCurrency": {
      "id": 1044,
      "name": "InvalidVirtualCurrency"
    },
    "WrongVirtualCurrency": {
      "id": 1045,
      "name": "WrongVirtualCurrency"
    },
    "WrongPrice": {
      "id": 1046,
      "name": "WrongPrice"
    },
    "NonPositiveValue": {
      "id": 1047,
      "name": "NonPositiveValue"
    },
    "InvalidRegion": {
      "id": 1048,
      "name": "InvalidRegion"
    },
    "RegionAtCapacity": {
      "id": 1049,
      "name": "RegionAtCapacity"
    },
    "ServerFailedToStart": {
      "id": 1050,
      "name": "ServerFailedToStart"
    },
    "NameNotAvailable": {
      "id": 1051,
      "name": "NameNotAvailable"
    },
    "InsufficientFunds": {
      "id": 1052,
      "name": "InsufficientFunds"
    },
    "InvalidDeviceID": {
      "id": 1053,
      "name": "InvalidDeviceID"
    },
    "InvalidPushNotificationToken": {
      "id": 1054,
      "name": "InvalidPushNotificationToken"
    },
    "NoRemainingUses": {
      "id": 1055,
      "name": "NoRemainingUses"
    },
    "InvalidPaymentProvider": {
      "id": 1056,
      "name": "InvalidPaymentProvider"
    },
    "PurchaseInitializationFailure": {
      "id": 1057,
      "name": "PurchaseInitializationFailure"
    },
    "DuplicateUsername": {
      "id": 1058,
      "name": "DuplicateUsername"
    },
    "InvalidBuyerInfo": {
      "id": 1059,
      "name": "InvalidBuyerInfo"
    },
    "NoGameModeParamsSet": {
      "id": 1060,
      "name": "NoGameModeParamsSet"
    }
  },
  "errorList": [
    "Success",
    "InvalidParams",
    "AccountNotFound",
    "AccountBanned",
    "InvalidUsernameOrPassword",
    "InvalidTitleId",
    "InvalidEmailAddress",
    "EmailAddressNotAvailable",
    "InvalidUsername",
    "InvalidPassword",
    "UsernameNotAvailable",
    "InvalidSteamTicket",
    "AccountAlreadyLinked",
    "LinkedAccountAlreadyClaimed",
    "InvalidFacebookToken",
    "AccountNotLinked",
    "FailedByPaymentProvider",
    "CouponCodeNotFound",
    "InvalidContainerItem",
    "ContainerNotOwned",
    "KeyNotOwned",
    "InvalidItemIdInTable",
    "InvalidReceipt",
    "ReceiptAlreadyUsed",
    "ReceiptCancelled",
    "GameNotFound",
    "GameModeNotFound",
    "InvalidGoogleToken",
    "BuildNotFound",
    "PlayerNotInGame",
    "InvalidTicket",
    "InvalidOrderInfo",
    "RegistrationIncomplete",
    "InvalidPlatform",
    "SteamApplicationNotOwned",
    "WrongSteamAccount",
    "TitleNotActivated",
    "RegistrationSessionNotFound",
    "NoSuchMod",
    "FileNotFound",
    "DuplicateEmail",
    "ItemNotFound",
    "ItemNotOwned",
    "ItemNotRecycleable",
    "ItemNotAffordable",
    "InvalidVirtualCurrency",
    "WrongVirtualCurrency",
    "WrongPrice",
    "NonPositiveValue",
    "InvalidRegion",
    "RegionAtCapacity",
    "ServerFailedToStart",
    "NameNotAvailable",
    "InsufficientFunds",
    "InvalidDeviceID",
    "InvalidPushNotificationToken",
    "NoRemainingUses",
    "InvalidPaymentProvider",
    "PurchaseInitializationFailure",
    "DuplicateUsername",
    "InvalidBuyerInfo",
    "NoGameModeParamsSet"
  ]
}