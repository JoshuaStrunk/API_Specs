{
  "name": "Client",
  "url": "/Client",
  "description": "APIs which provide the full range of PlayFab features available to the client - authentication, account and data management, inventory, friends, matchmaking, reporting, and platform-specific functionality",
  "revision": "1.2.1",
  "datatypes": {
    "AddFriendRequest": {
      "name": "AddFriendRequest",
      "properties": [
        {
          "name": "FriendPlayFabId",
          "description": "PlayFab identifier of the user to attempt to add to the local user's friend list",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FriendUsername",
          "description": "PlayFab username of the user to attempt to add to the local user's friend list",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FriendEmail",
          "description": "email address of the user to attempt to add to the local user's friend list",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FriendTitleDisplayName",
          "description": "title-specific display name of the user to attempt to add to the local user's friend list",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PublisherId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "AddFriendResult": {
      "name": "AddFriendResult",
      "properties": [
        {
          "name": "Created",
          "description": "was the friend request processed successfully",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "AddSharedGroupMembersRequest": {
      "name": "AddSharedGroupMembersRequest",
      "properties": [
        {
          "name": "SharedGroupId",
          "description": "unique identifier for the shared group",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PlayFabIds",
          "description": "list of PlayFabId identifiers of users to add as members of the shared group",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "AddSharedGroupMembersResult": {
      "name": "AddSharedGroupMembersResult",
      "properties": []
    },
    "AddUsernamePasswordRequest": {
      "name": "AddUsernamePasswordRequest",
      "properties": [
        {
          "name": "Username",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Email",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Password",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PublisherId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "AddUsernamePasswordResult": {
      "name": "AddUsernamePasswordResult",
      "properties": [
        {
          "name": "Username",
          "description": "PlayFab unique user name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "AddUserVirtualCurrencyRequest": {
      "name": "AddUserVirtualCurrencyRequest",
      "properties": [
        {
          "name": "VirtualCurrency",
          "description": "name of the virtual currency which is to be incremented",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Amount",
          "description": "amount to be added to the user balance of the specified virtual currency",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "AndroidDevicePushNotificationRegistrationRequest": {
      "name": "AndroidDevicePushNotificationRegistrationRequest",
      "properties": [
        {
          "name": "DeviceToken",
          "description": "the Registration ID provided by the Google Cloud Messaging service when the title registered to receive push notifications (see the GCM documentation, here: http://developer.android.com/google/gcm/client.html)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "SendPushNotificationConfirmation",
          "description": "If true, send a test push message immediately after sucessful registration. Defaults to false.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "ConfirmationMessege",
          "description": "Message to display when confirming push notification.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "AndroidDevicePushNotificationRegistrationResult": {
      "name": "AndroidDevicePushNotificationRegistrationResult",
      "properties": []
    },
    "CartItem": {
      "name": "CartItem",
      "properties": [
        {
          "name": "ItemId",
          "description": "unique identifier for the catalog item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemClass",
          "description": "class name to which catalog item belongs",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemInstanceId",
          "description": "unique instance identifier for this catalog item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "description": "display name for the catalog item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Description",
          "description": "description of the catalog item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrencyPrices",
          "description": "the cost of the catalog item for each applicable virtual currency",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "RealCurrencyPrices",
          "description": "the cost of the catalog item for each applicable real world currency",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "VCAmount",
          "description": "the amount of each applicable virtual currency which will be received as a result of purchasing this catalog item",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "CatalogItem": {
      "name": "CatalogItem",
      "description": "A purchasable item from the item catalog",
      "sortKey": "ItemId",
      "properties": [
        {
          "name": "ItemId",
          "description": "unique identifier for this item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ItemClass",
          "description": "class to which the item belongs",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CatalogVersion",
          "description": "catalog item for this item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "description": "text name for the item, to show in-game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Description",
          "description": "text description of item, to show in-game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrencyPrices",
          "description": "price of this item in virtual currencies and \"RM\" (the base Real Money purchase price, in USD pennies)",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "RealCurrencyPrices",
          "description": "override prices for this item for specific currencies",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "Tags",
          "description": "list of item tags",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomData",
          "description": "game specific custom data",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GrantedIfPlayerHas",
          "description": "array of ItemId values which are evaluated when any item is added to the player inventory - if all items in this array are present, the this item will also be added to the player inventory",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Consumable",
          "description": "defines the consumable properties (number of uses, timeout) for the item",
          "jsontype": "Object",
          "actualtype": "CatalogItemConsumableInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Container",
          "description": "defines the container properties for the item - what items it contains, including random drop tables and virtual currencies, and what item (if any) is required to open it via the UnlockContainerItem API",
          "jsontype": "Object",
          "actualtype": "CatalogItemContainerInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Bundle",
          "description": "defines the bundle properties for the item - bundles are items which contain other items, including random drop tables and virtual currencies",
          "jsontype": "Object",
          "actualtype": "CatalogItemBundleInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CatalogItemBundleInfo": {
      "name": "CatalogItemBundleInfo",
      "properties": [
        {
          "name": "BundledItems",
          "description": "unique ItemId values for all items which will be added to the player inventory when the bundle is added",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundledResultTables",
          "description": "unique TableId values for all RandomResultTable objects which are part of the bundle (random tables will be resolved and add the relevant items to the player inventory when the bundle is added)",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundledVirtualCurrencies",
          "description": "virtual currency types and balances which will be added to the player inventory when the bundle is added",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "CatalogItemConsumableInfo": {
      "name": "CatalogItemConsumableInfo",
      "properties": [
        {
          "name": "UsageCount",
          "description": "number of times this object can be used, after which it will be removed from the player inventory",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "UsagePeriod",
          "description": "duration in seconds for how long the item will remain in the player inventory - once elapsed, the item will be removed",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "UsagePeriodGroup",
          "description": "all inventory item instances in the player inventory sharing a non-null UsagePeriodGroup have their UsagePeriod values added together, and share the result - when that period has elapsed, all the items in the group will be removed",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CatalogItemContainerInfo": {
      "name": "CatalogItemContainerInfo",
      "description": "Containers are inventory items that can hold other items defined in the catalog, as well as virtual currency, which is added to the player inventory when the container is unlocked, using the UnlockContainerItem API. The items can be anything defined in the catalog, as well as RandomResultTable objects which will be resolved when the container is unlocked. Containers and their keys should be defined as Consumable (having a limited number of uses) in their catalog defintiions, unless the intent is for the player to be able to re-use them infinitely.",
      "properties": [
        {
          "name": "KeyItemId",
          "description": "ItemId for the catalog item used to unlock the container, if any (if not specified, a call to UnlockContainerItem will open the container, adding the contents to the player inventory and currency balances)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemContents",
          "description": "unique ItemId values for all items which will be added to the player inventory, once the container has been unlocked",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ResultTableContents",
          "description": "unique TableId values for all RandomResultTable objects which are part of the container (once unlocked, random tables will be resolved and add the relevant items to the player inventory)",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrencyContents",
          "description": "virtual currency types and balances which will be added to the player inventory when the container is unlocked",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "ConfirmPurchaseRequest": {
      "name": "ConfirmPurchaseRequest",
      "properties": [
        {
          "name": "OrderId",
          "description": "purchase order identifier returned from StartPurchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "ConfirmPurchaseResult": {
      "name": "ConfirmPurchaseResult",
      "properties": [
        {
          "name": "OrderId",
          "description": "purchase order identifier",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PurchaseDate",
          "description": "date and time of the purchase",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "Items",
          "description": "array of items purchased",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PurchasedItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "ConsumeItemRequest": {
      "name": "ConsumeItemRequest",
      "properties": [
        {
          "name": "ItemInstanceId",
          "description": "unique instance identifier of the item to be consumed",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ConsumeCount",
          "description": "number of uses to consume from the item",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "ConsumeItemResult": {
      "name": "ConsumeItemResult",
      "properties": [
        {
          "name": "ItemInstanceId",
          "description": "unique instance identifier of the item with uses consumed",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "RemainingUses",
          "description": "number of uses remaining on the item",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "CreateSharedGroupRequest": {
      "name": "CreateSharedGroupRequest",
      "properties": [
        {
          "name": "SharedGroupId",
          "description": "unique identifier for the shared group (a random identifier will be assigned, if one is not specified)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CreateSharedGroupResult": {
      "name": "CreateSharedGroupResult",
      "properties": [
        {
          "name": "SharedGroupId",
          "description": "unique identifier for the shared group",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "Currency": {
      "name": "Currency",
      "isenum": true,
      "enumvalues": [
        {
          "name": "USD"
        },
        {
          "name": "GBP"
        },
        {
          "name": "EUR"
        },
        {
          "name": "RUB"
        },
        {
          "name": "BRL"
        },
        {
          "name": "CIS"
        },
        {
          "name": "CAD"
        }
      ]
    },
    "CurrentGamesRequest": {
      "name": "CurrentGamesRequest",
      "properties": [
        {
          "name": "Region",
          "description": "region to check for game instances",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": true
        },
        {
          "name": "BuildVersion",
          "description": "version of build to match against",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CurrentGamesResult": {
      "name": "CurrentGamesResult",
      "properties": [
        {
          "name": "Games",
          "description": "array of games found",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "GameInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "PlayerCount",
          "description": "total number of players across all servers",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "GameCount",
          "description": "number of games running",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "EmptyResult": {
      "name": "EmptyResult",
      "properties": []
    },
    "FacebookPlayFabIdPair": {
      "name": "FacebookPlayFabIdPair",
      "properties": [
        {
          "name": "FacebookId",
          "description": "unique Facebook identifier for a user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PlayFabId",
          "description": "unique PlayFab identifier for a user, or null if no PlayFab account is linked to the Facebook identifier",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "FriendInfo": {
      "name": "FriendInfo",
      "properties": [
        {
          "name": "FriendPlayFabId",
          "description": "PlayFab unique identifier for this friend",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Username",
          "description": "PlayFab unique username for this friend",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TitleDisplayName",
          "description": "title-specific display name for this friend",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Tags",
          "description": "tags which have been associated with this friend",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CurrentMatchmakerLobbyId",
          "description": "unique lobby identifier of the Game Server Instance to which this player is currently connected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FacebookInfo",
          "description": "available Facebook information (if the user and PlayFab friend are also connected in Facebook)",
          "jsontype": "Object",
          "actualtype": "UserFacebookInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "SteamInfo",
          "description": "available Steam information (if the user and PlayFab friend are also connected in Steam)",
          "jsontype": "Object",
          "actualtype": "UserSteamInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "GameCenterInfo",
          "description": "available Game Center information (if the user and PlayFab friend are also connected in Game Center)",
          "jsontype": "Object",
          "actualtype": "UserGameCenterInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GameInfo": {
      "name": "GameInfo",
      "properties": [
        {
          "name": "Region",
          "description": "region to which this server is associated",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": true
        },
        {
          "name": "LobbyID",
          "description": "unique lobby identifier for this game server",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BuildVersion",
          "description": "build version this server is running",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GameMode",
          "description": "game mode this server is running",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "MaxPlayers",
          "description": "maximum players this server can support",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "PlayerUserIds",
          "description": "array of strings of current player names on this server (note that these are PlayFab usernames, as opposed to title display names)",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "RunTime",
          "description": "duration in seconds this server has been running",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "GameServerState",
          "description": "game specific string denoting server configuration",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GameServerRegionsRequest": {
      "name": "GameServerRegionsRequest",
      "properties": [
        {
          "name": "BuildVersion",
          "description": "version of game server for which stats are being requested",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "TitleId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GameServerRegionsResult": {
      "name": "GameServerRegionsResult",
      "properties": [
        {
          "name": "Regions",
          "description": "array of regions found matching the request parameters",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "RegionInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetAccountInfoRequest": {
      "name": "GetAccountInfoRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFabId of the user to load data for. Optional, defaults to yourself if not set.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetAccountInfoResult": {
      "name": "GetAccountInfoResult",
      "properties": [
        {
          "name": "AccountInfo",
          "description": "account information for the local user",
          "jsontype": "Object",
          "actualtype": "UserAccountInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetCatalogItemsRequest": {
      "name": "GetCatalogItemsRequest",
      "properties": [
        {
          "name": "CatalogVersion",
          "description": "which catalog is being requested",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetCatalogItemsResult": {
      "name": "GetCatalogItemsResult",
      "properties": [
        {
          "name": "Catalog",
          "description": "array of inventory objects",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetCloudScriptUrlRequest": {
      "name": "GetCloudScriptUrlRequest",
      "properties": [
        {
          "name": "Version",
          "description": "the Cloud Script Version to use (defaults to 1)",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "Testing",
          "description": "specifies whether the URL returned should be the one for the most recently uploaded Revision of the Cloud Script (true), or the Revision most recently set to live (false - the default)",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "GetCloudScriptUrlResult": {
      "name": "GetCloudScriptUrlResult",
      "properties": [
        {
          "name": "Url",
          "description": "URL of the Cloud Script logic server",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetFriendLeaderboardRequest": {
      "name": "GetFriendLeaderboardRequest",
      "properties": [
        {
          "name": "StatisticName",
          "description": "statistic used to rank friends for this leaderboard",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "StartPosition",
          "description": "position in the leaderboard to start this listing (defaults to the first entry)",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "MaxResultsCount",
          "description": "maximum number of entries to retrieve",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "GetFriendsListRequest": {
      "name": "GetFriendsListRequest",
      "properties": [
        {
          "name": "IncludeSteamFriends",
          "description": "indicates whether Steam service friends should also be included in the response",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "GetFriendsListResult": {
      "name": "GetFriendsListResult",
      "properties": [
        {
          "name": "Friends",
          "description": "array of friends found",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "FriendInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetLeaderboardAroundCurrentUserRequest": {
      "name": "GetLeaderboardAroundCurrentUserRequest",
      "properties": [
        {
          "name": "StatisticName",
          "description": "statistic used to rank players for this leaderboard",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "MaxResultsCount",
          "description": "maximum number of entries to retrieve",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "GetLeaderboardAroundCurrentUserResult": {
      "name": "GetLeaderboardAroundCurrentUserResult",
      "properties": [
        {
          "name": "Leaderboard",
          "description": "ordered listing of users and their positions in the requested leaderboard",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PlayerLeaderboardEntry",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetLeaderboardRequest": {
      "name": "GetLeaderboardRequest",
      "properties": [
        {
          "name": "StatisticName",
          "description": "statistic used to rank players for this leaderboard",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "StartPosition",
          "description": "position in the leaderboard to start this listing (defaults to the first entry)",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "MaxResultsCount",
          "description": "maximum number of entries to retrieve",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "GetLeaderboardResult": {
      "name": "GetLeaderboardResult",
      "properties": [
        {
          "name": "Leaderboard",
          "description": "ordered listing of users and their positions in the requested leaderboard",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PlayerLeaderboardEntry",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetPlayFabIDsFromFacebookIDsRequest": {
      "name": "GetPlayFabIDsFromFacebookIDsRequest",
      "properties": [
        {
          "name": "FacebookIDs",
          "description": "array of unique Facebook identifiers for which the title needs to get PlayFab identifiers",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PublisherId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetPlayFabIDsFromFacebookIDsResult": {
      "name": "GetPlayFabIDsFromFacebookIDsResult",
      "properties": [
        {
          "name": "Data",
          "description": "mapping of Facebook identifiers to PlayFab identifiers",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "FacebookPlayFabIdPair",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetPublisherDataRequest": {
      "name": "GetPublisherDataRequest",
      "properties": [
        {
          "name": "Keys",
          "description": " array of keys to get back data from the Publisher data blob, set by the admin tools",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetPublisherDataResult": {
      "name": "GetPublisherDataResult",
      "properties": [
        {
          "name": "Data",
          "description": "a dictionary object of key / value pairs",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetSharedGroupDataRequest": {
      "name": "GetSharedGroupDataRequest",
      "properties": [
        {
          "name": "SharedGroupId",
          "description": "unique identifier for the shared group",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Keys",
          "description": "specific keys to retrieve from the shared group (if not specified, all keys will be returned, while an empty array indicates that no keys should be returned)",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GetMembers",
          "description": "if true, return the list of all members of the shared group",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "GetSharedGroupDataResult": {
      "name": "GetSharedGroupDataResult",
      "properties": [
        {
          "name": "Data",
          "description": "data for the requested keys",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "SharedGroupDataRecord",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Members",
          "description": "list of PlayFabId identifiers for the members of this group, if requested",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetStoreItemsRequest": {
      "name": "GetStoreItemsRequest",
      "properties": [
        {
          "name": "StoreId",
          "description": "unqiue identifier for the store which is being requested",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetStoreItemsResult": {
      "name": "GetStoreItemsResult",
      "properties": [
        {
          "name": "Store",
          "description": "array of store items",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "StoreItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetTitleDataRequest": {
      "name": "GetTitleDataRequest",
      "properties": [
        {
          "name": "Keys",
          "description": " array of keys to get back data from the TitleData data blob, set by the admin tools",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetTitleDataResult": {
      "name": "GetTitleDataResult",
      "properties": [
        {
          "name": "Data",
          "description": "a dictionary object of key / value pairs",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetTitleNewsRequest": {
      "name": "GetTitleNewsRequest",
      "properties": [
        {
          "name": "Count",
          "description": "limits the results to the last n entries (defaults to 10 if not set)",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "GetTitleNewsResult": {
      "name": "GetTitleNewsResult",
      "properties": [
        {
          "name": "News",
          "description": "array of news items",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "TitleNewsItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetUserCombinedInfoRequest": {
      "name": "GetUserCombinedInfoRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFabId of the user to load info about. Defaults to yourself if not set.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GetAccountInfo",
          "description": "If set to false, account info will not be returned (defaults to true)",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "GetInventory",
          "description": "If set to false, inventory will not be returned (defaults to true). Inventory will never be returned for users other than yourself.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "GetVirtualCurrency",
          "description": "If set to false, virtual currency balances will not be returned (defaults to true). Currency balances will never be returned for users other than yourself.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "GetUserData",
          "description": "If set to false, custom user data will not be returned (defaults to true).",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "UserDataKeys",
          "description": "User custom data keys to return. Leave null to get all keys. For users other than yourself, only public data will be returned.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GetReadOnlyData",
          "description": "If set to false, read-only user data will not be returned (defaults to true).",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "ReadOnlyDataKeys",
          "description": "User read-only custom data keys to return. Leave null to get all keys. For users other than yourself, only public data will be returned.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetUserCombinedInfoResult": {
      "name": "GetUserCombinedInfoResult",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFabId of the owner of the combined info",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "AccountInfo",
          "description": "account information for the user",
          "jsontype": "Object",
          "actualtype": "UserAccountInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Inventory",
          "description": "array of inventory items in the user's current inventory",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        },
        {
          "name": "VirtualCurrency",
          "description": "array of virtual currency balance(s) belonging to the user",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "Data",
          "description": "user specific custom data",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "UserDataRecord",
          "isclass": true,
          "optional": true
        },
        {
          "name": "ReadOnlyData",
          "description": "user specific read-only data",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "UserDataRecord",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetUserDataRequest": {
      "name": "GetUserDataRequest",
      "properties": [
        {
          "name": "Keys",
          "description": "specific keys to search for in the custom user data. Leave null to get all keys.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PlayFabId",
          "description": "PlayFabId of the user to load data for. Optional, defaults to yourself if not set.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetUserDataResult": {
      "name": "GetUserDataResult",
      "properties": [
        {
          "name": "Data",
          "description": "user specific data for this title",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "UserDataRecord",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetUserInventoryRequest": {
      "name": "GetUserInventoryRequest",
      "properties": []
    },
    "GetUserInventoryResult": {
      "name": "GetUserInventoryResult",
      "properties": [
        {
          "name": "Inventory",
          "description": "array of inventory items in the user's current inventory",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        },
        {
          "name": "VirtualCurrency",
          "description": "array of virtual currency balance(s) belonging to the user",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "GetUserStatisticsRequest": {
      "name": "GetUserStatisticsRequest",
      "properties": []
    },
    "GetUserStatisticsResult": {
      "name": "GetUserStatisticsResult",
      "properties": [
        {
          "name": "UserStatistics",
          "description": "user statistics for the active title",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "ItemInstance": {
      "name": "ItemInstance",
      "description": "A unique instance of an item in a user's inventory",
      "sortKey": "ItemInstanceId",
      "properties": [
        {
          "name": "ItemId",
          "description": "unique identifier for the inventory item, as defined in the catalog",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemInstanceId",
          "description": "unique item identifier for this specific instance of the item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemClass",
          "description": "class name for the inventory item, as defined in the catalog",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PurchaseDate",
          "description": "timestamp for when this instance was purchased",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "Expiration",
          "description": "timestamp for when this instance will expire",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "RemainingUses",
          "description": "total number of remaining uses, if this is a consumable item",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "Annotation",
          "description": "game specific comment associated with this instance when it was added to the user inventory",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CatalogVersion",
          "description": "catalog version for the inventory item, when this instance was created",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundleParent",
          "description": "unique identifier for the parent inventory item, as defined in the catalog, for object which were added from a bundle or container",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ItemPuchaseRequest": {
      "name": "ItemPuchaseRequest",
      "properties": [
        {
          "name": "ItemId",
          "description": "unique ItemId of the item to purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Quantity",
          "description": "how many of this item to purchase",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "Annotation",
          "description": "title-specific text concerning this purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "UpgradeFromItems",
          "description": "items to be upgraded as a result of this purchase (upgraded items are hidden, as they are \"replaced\" by the new items)",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "LinkAndroidDeviceIDRequest": {
      "name": "LinkAndroidDeviceIDRequest",
      "properties": [
        {
          "name": "AndroidDeviceId",
          "description": "Android device identifier for the user's device",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PublisherId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "OS",
          "description": "specific Operating System version for the user's device",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "AndroidDevice",
          "description": "specific model of the user's device",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "LinkAndroidDeviceIDResult": {
      "name": "LinkAndroidDeviceIDResult",
      "properties": []
    },
    "LinkFacebookAccountRequest": {
      "name": "LinkFacebookAccountRequest",
      "properties": [
        {
          "name": "AccessToken",
          "description": "unique identifier from Facebook for the user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PublisherId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "LinkFacebookAccountResult": {
      "name": "LinkFacebookAccountResult",
      "properties": []
    },
    "LinkGameCenterAccountRequest": {
      "name": "LinkGameCenterAccountRequest",
      "properties": [
        {
          "name": "GameCenterId",
          "description": "Game Center identifier for the player account to be linked",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PublisherId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "LinkGameCenterAccountResult": {
      "name": "LinkGameCenterAccountResult",
      "properties": []
    },
    "LinkIOSDeviceIDRequest": {
      "name": "LinkIOSDeviceIDRequest",
      "properties": [
        {
          "name": "DeviceId",
          "description": "vendor-specific iOS identifier for the user's device",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "OS",
          "description": "specific Operating System version for the user's device",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DeviceModel",
          "description": "specific model of the user's device",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PublisherId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "LinkIOSDeviceIDResult": {
      "name": "LinkIOSDeviceIDResult",
      "properties": []
    },
    "LinkSteamAccountRequest": {
      "name": "LinkSteamAccountRequest",
      "properties": [
        {
          "name": "SteamTicket",
          "description": "authentication token for the user, returned as a byte array from Steam, and converted to a string (for example, the byte 0x08 should become \"08\")",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PublisherId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "LinkSteamAccountResult": {
      "name": "LinkSteamAccountResult",
      "properties": []
    },
    "LogEventRequest": {
      "name": "LogEventRequest",
      "properties": [
        {
          "name": "eventName",
          "description": "A unique event name which will be used as the table name in the Redshift database. The name will be made lower case, and cannot not contain spaces. The use of underscores is recommended, for readability. Events also cannot match reserved terms. The PlayFab reserved terms are 'log_in' and 'purchase', 'create' and 'request', while the Redshift reserved terms can be found here: http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Body",
          "description": "Contains all the data for this event. Event Values can be strings, booleans or numerics (float, double, integer, long) and must be consistent on a per-event basis (if the Value for Key 'A' in Event 'Foo' is an integer the first time it is sent, it must be an integer in all subsequent 'Foo' events). As with event names, Keys must also not use reserved words (see above). Finally, the size of the Body for an event must be less than 32KB (UTF-8 format).",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "object",
          "optional": true
        }
      ]
    },
    "LogEventResult": {
      "name": "LogEventResult",
      "properties": []
    },
    "LoginResult": {
      "name": "LoginResult",
      "properties": [
        {
          "name": "SessionTicket",
          "description": "a unique token authorizing the user and game at the server level, for the current session",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PlayFabId",
          "description": "player's unique PlayFabId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "NewlyCreated",
          "description": "true if the account was newly created on this login",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "LoginWithAndroidDeviceIDRequest": {
      "name": "LoginWithAndroidDeviceIDRequest",
      "properties": [
        {
          "name": "TitleId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PublisherId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "AndroidDeviceId",
          "description": "Android device identifier for the user's device",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "OS",
          "description": "specific Operating System version for the user's device",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "AndroidDevice",
          "description": "specific model of the user's device",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CreateAccount",
          "description": "automatically create a PlayFab account if one is not currently linked to this iOS device",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "LoginWithEmailAddressRequest": {
      "name": "LoginWithEmailAddressRequest",
      "properties": [
        {
          "name": "TitleId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Email",
          "description": "email address for the account",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Password",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PublisherId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "LoginWithFacebookRequest": {
      "name": "LoginWithFacebookRequest",
      "properties": [
        {
          "name": "TitleId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "AccessToken",
          "description": "unique identifier from Facebook for the user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CreateAccount",
          "description": "automatically create a PlayFab account if one is not currently linked to this Facebook account",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "PublisherId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "LoginWithGameCenterRequest": {
      "name": "LoginWithGameCenterRequest",
      "properties": [
        {
          "name": "TitleId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PlayerId",
          "description": "unique Game Center player id",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CreateAccount",
          "description": "automatically create a PlayFab account if one is not currently linked to this Game Center id",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "PublisherId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "LoginWithGoogleAccountRequest": {
      "name": "LoginWithGoogleAccountRequest",
      "properties": [
        {
          "name": "TitleId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "AccessToken",
          "description": "unique token from Google Play for the user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CreateAccount",
          "description": "automatically create a PlayFab account if one is not currently linked to this Google account",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "PublisherId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "LoginWithIOSDeviceIDRequest": {
      "name": "LoginWithIOSDeviceIDRequest",
      "properties": [
        {
          "name": "TitleId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "DeviceId",
          "description": "vendor-specific iOS identifier for the user's device",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "OS",
          "description": "specific Operating System version for the user's device",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DeviceModel",
          "description": "specific model of the user's device",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CreateAccount",
          "description": "automatically create a PlayFab account if one is not currently linked to this iOS device",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "PublisherId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "LoginWithPlayFabRequest": {
      "name": "LoginWithPlayFabRequest",
      "properties": [
        {
          "name": "TitleId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Username",
          "description": "PlayFab username for the account",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Password",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PublisherId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "LoginWithSteamRequest": {
      "name": "LoginWithSteamRequest",
      "properties": [
        {
          "name": "TitleId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "SteamTicket",
          "description": "authentication token for the user, returned as a byte array from Steam, and converted to a string (for example, the byte 0x08 should become \"08\")",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CreateAccount",
          "description": "automatically create a PlayFab account if one is not currently linked to this Steam account",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "PublisherId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "MatchmakeRequest": {
      "name": "MatchmakeRequest",
      "properties": [
        {
          "name": "BuildVersion",
          "description": "build version to match against",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Region",
          "description": "region to match make against",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": true
        },
        {
          "name": "GameMode",
          "description": "game mode to match make against",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "LobbyId",
          "description": "lobby identifier to match make against (used to select a specific server)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "EnableQueue",
          "description": "[deprecated]",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "MatchmakeResult": {
      "name": "MatchmakeResult",
      "properties": [
        {
          "name": "LobbyID",
          "description": "unique lobby identifier of the server matched",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ServerHostname",
          "description": "IP address of the server",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ServerPort",
          "description": "port number to use for non-http communications with the server",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "Ticket",
          "description": "server authorization ticket (used by RedeemCoupon to validate user insertion into the game)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Expires",
          "description": "timestamp for when the server will expire, if applicable",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PollWaitTimeMS",
          "description": "time in milliseconds the application is configured to wait on matchmaking results",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "Status",
          "description": "result of match making process",
          "jsontype": "String",
          "actualtype": "MatchmakeStatus",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "MatchmakeStatus": {
      "name": "MatchmakeStatus",
      "isenum": true,
      "enumvalues": [
        {
          "name": "Complete"
        },
        {
          "name": "Waiting"
        },
        {
          "name": "GameNotFound"
        }
      ]
    },
    "ModifyUserVirtualCurrencyResult": {
      "name": "ModifyUserVirtualCurrencyResult",
      "properties": [
        {
          "name": "VirtualCurrency",
          "description": "name of the virtual currency which was modified",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Balance",
          "description": "balance of the virtual currency after modification",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "PayForPurchaseRequest": {
      "name": "PayForPurchaseRequest",
      "properties": [
        {
          "name": "OrderId",
          "description": "purchase order identifier returned from StartPurchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ProviderName",
          "description": "payment provider to use to fund the purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Currency",
          "description": "currency to use to fund the purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "PayForPurchaseResult": {
      "name": "PayForPurchaseResult",
      "properties": [
        {
          "name": "OrderId",
          "description": "purchase order identifier",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Status",
          "description": "status of the transaction",
          "jsontype": "String",
          "actualtype": "TransactionStatus",
          "isenum": true,
          "optional": true
        },
        {
          "name": "VCAmount",
          "description": "virtual currency cost of the transaction",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "PurchaseCurrency",
          "description": "real world currency for the transaction",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PurchasePrice",
          "description": "real world cost of the transaction",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "CreditApplied",
          "description": "local credit applied to the transaction (provider specific)",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "ProviderData",
          "description": "provider used for the transaction",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PurchaseConfirmationPageURL",
          "description": "url to the purchase provider page that details the purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrency",
          "description": "current virtual currency totals for the user",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "PaymentOption": {
      "name": "PaymentOption",
      "properties": [
        {
          "name": "Currency",
          "description": "specific currency to use to fund the purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ProviderName",
          "description": "name of the purchase provider for this option",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Price",
          "description": "amount of the specified currency needed for the purchase",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "StoreCredit",
          "description": "amount of existing credit the user has with the provider",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        }
      ]
    },
    "PlayerLeaderboardEntry": {
      "name": "PlayerLeaderboardEntry",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user for this leaderboard entry",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "description": "title-specific display name of the user for this leaderboard entry",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "StatValue",
          "description": "specific value of the user's statistic",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "Position",
          "description": "user's overall position in the leaderboard",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "PurchasedItem": {
      "name": "PurchasedItem",
      "properties": [
        {
          "name": "ItemInstanceId",
          "description": "unique instance identifier for this catalog item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "unique identifier for the catalog item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CatalogVersion",
          "description": "catalog version for the item purchased",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "description": "display name for the catalog item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "UnitCurrency",
          "description": "currency type for the cost of the catalog item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "UnitPrice",
          "description": "cost of the catalog item in the given currency",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "BundleContents",
          "description": "array of unique items that were awarded when this catalog item was purchased",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "PurchaseItemRequest": {
      "name": "PurchaseItemRequest",
      "properties": [
        {
          "name": "ItemId",
          "description": "unique ItemId of the item to purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "VirtualCurrency",
          "description": "virtual currency to use to purchase the item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Price",
          "description": "price the client expects to pay for the item (in case a new catalog or store was uploaded, with new prices)",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "CatalogVersion",
          "description": "catalog version for the items to be purchased (defaults to most recent version",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "StoreId",
          "description": "store to buy this item through. If not set, prices default to those in the catalog.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "PurchaseItemResult": {
      "name": "PurchaseItemResult",
      "properties": [
        {
          "name": "Items",
          "description": "details for the items purchased",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PurchasedItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "RedeemCouponRequest": {
      "name": "RedeemCouponRequest",
      "properties": [
        {
          "name": "CouponCode",
          "description": "generated coupon code to redeem",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CatalogVersion",
          "description": "catalog version of the coupon",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RedeemCouponResult": {
      "name": "RedeemCouponResult",
      "properties": [
        {
          "name": "GrantedItems",
          "description": "items granted to the player as a result of redeeming the coupon",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "RefreshPSNAuthTokenRequest": {
      "name": "RefreshPSNAuthTokenRequest",
      "properties": [
        {
          "name": "AuthCode",
          "description": "Auth code returned by PSN OAuth system",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "Region": {
      "name": "Region",
      "isenum": true,
      "enumvalues": [
        {
          "name": "USCentral"
        },
        {
          "name": "USEast"
        },
        {
          "name": "EUWest"
        },
        {
          "name": "Singapore"
        },
        {
          "name": "Japan"
        },
        {
          "name": "Brazil"
        },
        {
          "name": "Australia"
        }
      ]
    },
    "RegionInfo": {
      "name": "RegionInfo",
      "properties": [
        {
          "name": "Region",
          "description": "unique identifier for the region",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": true
        },
        {
          "name": "Name",
          "description": "name of the region",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Available",
          "description": "indicates whether the server specified is available in this region",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "PingUrl",
          "description": "url to ping to get roundtrip time",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RegisterForIOSPushNotificationRequest": {
      "name": "RegisterForIOSPushNotificationRequest",
      "properties": [
        {
          "name": "DeviceToken",
          "description": "unique token generated by the Apple Push Notification service when the title registered to receive push notifications",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "SendPushNotificationConfirmation",
          "description": "If true, send a test push message immediately after sucessful registration. Defaults to false.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "ConfirmationMessage",
          "description": "Message to display when confirming push notification.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RegisterForIOSPushNotificationResult": {
      "name": "RegisterForIOSPushNotificationResult",
      "properties": []
    },
    "RegisterPlayFabUserRequest": {
      "name": "RegisterPlayFabUserRequest",
      "properties": [
        {
          "name": "TitleId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Username",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Email",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Password",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Origination",
          "description": "optional string indicating where this user came from (iOS iPhone, Android, etc.)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PublisherId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RegisterPlayFabUserResult": {
      "name": "RegisterPlayFabUserResult",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier for this newly created account",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SessionTicket",
          "description": "a unique token identifying the user and game at the server level, for the current session",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Username",
          "description": "PlayFab unique user name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RemoveFriendRequest": {
      "name": "RemoveFriendRequest",
      "properties": [
        {
          "name": "FriendPlayFabId",
          "description": "PlayFab identifier of the friend account which is to be removed",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "RemoveFriendResult": {
      "name": "RemoveFriendResult",
      "properties": []
    },
    "RemoveSharedGroupMembersRequest": {
      "name": "RemoveSharedGroupMembersRequest",
      "properties": [
        {
          "name": "SharedGroupId",
          "description": "unique identifier for the shared group",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PlayFabIds",
          "description": "list of PlayFabId identifiers of users to remove from the shared group",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RemoveSharedGroupMembersResult": {
      "name": "RemoveSharedGroupMembersResult",
      "properties": []
    },
    "ReportPlayerClientRequest": {
      "name": "ReportPlayerClientRequest",
      "properties": [
        {
          "name": "ReporteeId",
          "description": "PlayFabId of the reported player",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "TitleId",
          "description": "title player was reported in, optional if report not for specific title",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Comment",
          "description": "Optional additional comment by reporting player",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ReportPlayerClientResult": {
      "name": "ReportPlayerClientResult",
      "properties": [
        {
          "name": "Updated",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "SubmissionsRemaining",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "RestoreIOSPurchasesRequest": {
      "name": "RestoreIOSPurchasesRequest",
      "properties": [
        {
          "name": "ReceiptData",
          "description": "base64 encoded receipt data, passed back by the App Store as a result of a successful purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "RestoreIOSPurchasesResult": {
      "name": "RestoreIOSPurchasesResult",
      "properties": []
    },
    "RunCloudScriptRequest": {
      "name": "RunCloudScriptRequest",
      "properties": [
        {
          "name": "ActionId",
          "description": "server action to trigger",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Params",
          "description": "parameters to pass into the action (If you use this, don't use ParamsEncoded)",
          "jsontype": "Object",
          "actualtype": "object",
          "optional": true
        },
        {
          "name": "ParamsEncoded",
          "description": "json-encoded parameters to pass into the action (If you use this, don't use Params)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RunCloudScriptResult": {
      "name": "RunCloudScriptResult",
      "properties": [
        {
          "name": "ActionId",
          "description": "id of Cloud Script run",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Version",
          "description": "version of Cloud Script run",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "Revision",
          "description": "revision of Cloud Script run",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "Results",
          "description": "return values from the server action as a dynamic object",
          "jsontype": "Object",
          "actualtype": "object",
          "optional": true
        },
        {
          "name": "ResultsEncoded",
          "description": "return values from the server action as a JSON encoded string",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ActionLog",
          "description": "any log statements generated during the run of this action",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ExecutionTime",
          "description": "time this script took to run, in seconds",
          "jsontype": "Number",
          "actualtype": "double",
          "optional": false
        }
      ]
    },
    "SendAccountRecoveryEmailRequest": {
      "name": "SendAccountRecoveryEmailRequest",
      "properties": [
        {
          "name": "Email",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "TitleId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PublisherId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "SendAccountRecoveryEmailResult": {
      "name": "SendAccountRecoveryEmailResult",
      "properties": []
    },
    "SetFriendTagsRequest": {
      "name": "SetFriendTagsRequest",
      "properties": [
        {
          "name": "FriendPlayFabId",
          "description": "PlayFab identifier of the friend account to which the tag(s) should be applied",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Tags",
          "description": "array of tags to set on the friend account",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "SetFriendTagsResult": {
      "name": "SetFriendTagsResult",
      "properties": []
    },
    "SharedGroupDataRecord": {
      "name": "SharedGroupDataRecord",
      "properties": [
        {
          "name": "Value",
          "description": "data stored for the specified group data key",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "LastUpdatedBy",
          "description": "PlayFabId of the user to last update this value",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "LastUpdated",
          "description": "timestamp for when this data was last updated",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "Permission",
          "description": "indicates whether this data can be read by all users (public) or only members of the group (private)",
          "jsontype": "String",
          "actualtype": "UserDataPermission",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "StartGameRequest": {
      "name": "StartGameRequest",
      "properties": [
        {
          "name": "BuildVersion",
          "description": "version information for the build of the game server which is to be started",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Region",
          "description": "the region to associate this server with for match filtering",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": false
        },
        {
          "name": "GameMode",
          "description": "the title-defined game mode this server is to be running (defaults to 0 if there is only one mode)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CustomCommandLineData",
          "description": "custom command line argument when starting game server process",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "StartGameResult": {
      "name": "StartGameResult",
      "properties": [
        {
          "name": "LobbyID",
          "description": "unique identifier for the lobby of the server started",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ServerHostname",
          "description": "server IP address",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ServerPort",
          "description": "port on the server to be used for communication",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "Ticket",
          "description": "unique identifier for the server",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Expires",
          "description": "timestamp for when the server should expire, if applicable",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Password",
          "description": "password required to log into the server",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "StartPurchaseRequest": {
      "name": "StartPurchaseRequest",
      "properties": [
        {
          "name": "CatalogVersion",
          "description": "catalog version for the items to be purchased. Defaults to most recent catalog.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "StoreId",
          "description": "store through which to purchase items. If not set, prices will be pulled from the catalog itself.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Items",
          "description": "the set of items to purchase",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ItemPuchaseRequest",
          "isclass": true,
          "optional": false
        }
      ]
    },
    "StartPurchaseResult": {
      "name": "StartPurchaseResult",
      "properties": [
        {
          "name": "OrderId",
          "description": "purchase order identifier",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Contents",
          "description": "cart items to be purchased",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CartItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "PaymentOptions",
          "description": "available methods by which the user can pay",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PaymentOption",
          "isclass": true,
          "optional": true
        },
        {
          "name": "VirtualCurrencyBalances",
          "description": "current virtual currency totals for the user",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "StoreItem": {
      "name": "StoreItem",
      "description": "A store entry that list a catalog item at a particular price",
      "sortKey": "ItemId",
      "properties": [
        {
          "name": "ItemId",
          "description": "unique identifier of the item as it exists in the catalog - note that this must exactly match the ItemId from the catalog",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "VirtualCurrencyPrices",
          "description": "price of this item in virtual currencies and \"RM\" (the base Real Money purchase price, in USD pennies)",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "RealCurrencyPrices",
          "description": "override prices for this item for specific currencies",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "SubtractUserVirtualCurrencyRequest": {
      "name": "SubtractUserVirtualCurrencyRequest",
      "properties": [
        {
          "name": "VirtualCurrency",
          "description": "name of the virtual currency which is to be decremented",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Amount",
          "description": "amount to be subtracted from the user balance of the specified virtual currency",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "TitleActivationStatus": {
      "name": "TitleActivationStatus",
      "isenum": true,
      "enumvalues": [
        {
          "name": "None"
        },
        {
          "name": "ActivatedTitleKey"
        },
        {
          "name": "PendingSteam"
        },
        {
          "name": "ActivatedSteam"
        },
        {
          "name": "RevokedSteam"
        }
      ]
    },
    "TitleNewsItem": {
      "name": "TitleNewsItem",
      "properties": [
        {
          "name": "Timestamp",
          "description": "date and time when the news items was posted",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "NewsId",
          "description": "unique id of this bit of news",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Title",
          "description": "title of the news item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Body",
          "description": "news item text",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "TransactionStatus": {
      "name": "TransactionStatus",
      "isenum": true,
      "enumvalues": [
        {
          "name": "CreateCart"
        },
        {
          "name": "Init"
        },
        {
          "name": "Approved"
        },
        {
          "name": "Succeeded"
        },
        {
          "name": "FailedByProvider"
        },
        {
          "name": "RefundPending"
        },
        {
          "name": "Refunded"
        },
        {
          "name": "RefundFailed"
        },
        {
          "name": "ChargedBack"
        },
        {
          "name": "FailedByUber"
        },
        {
          "name": "Revoked"
        },
        {
          "name": "TradePending"
        },
        {
          "name": "Upgraded"
        },
        {
          "name": "Other"
        },
        {
          "name": "Failed"
        }
      ]
    },
    "UnlinkAndroidDeviceIDRequest": {
      "name": "UnlinkAndroidDeviceIDRequest",
      "properties": []
    },
    "UnlinkAndroidDeviceIDResult": {
      "name": "UnlinkAndroidDeviceIDResult",
      "properties": []
    },
    "UnlinkFacebookAccountRequest": {
      "name": "UnlinkFacebookAccountRequest",
      "properties": []
    },
    "UnlinkFacebookAccountResult": {
      "name": "UnlinkFacebookAccountResult",
      "properties": []
    },
    "UnlinkGameCenterAccountRequest": {
      "name": "UnlinkGameCenterAccountRequest",
      "properties": []
    },
    "UnlinkGameCenterAccountResult": {
      "name": "UnlinkGameCenterAccountResult",
      "properties": []
    },
    "UnlinkIOSDeviceIDRequest": {
      "name": "UnlinkIOSDeviceIDRequest",
      "properties": []
    },
    "UnlinkIOSDeviceIDResult": {
      "name": "UnlinkIOSDeviceIDResult",
      "properties": []
    },
    "UnlinkSteamAccountRequest": {
      "name": "UnlinkSteamAccountRequest",
      "properties": []
    },
    "UnlinkSteamAccountResult": {
      "name": "UnlinkSteamAccountResult",
      "properties": []
    },
    "UnlockContainerItemRequest": {
      "name": "UnlockContainerItemRequest",
      "properties": [
        {
          "name": "ContainerItemId",
          "description": "unique identifier of the container to attempt to unlock",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CatalogVersion",
          "description": "catalog version of the container",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UnlockContainerItemResult": {
      "name": "UnlockContainerItemResult",
      "properties": [
        {
          "name": "UnlockedItemInstanceId",
          "description": "unique instance identifier of the container unlocked",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "UnlockedWithItemInstanceId",
          "description": "unique instance identifier of the key used to unlock the container, if applicable",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GrantedItems",
          "description": "items granted to the player as a result of unlocking the container",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        },
        {
          "name": "VirtualCurrency",
          "description": "virtual currency granted to the player as a result of unlocking the container",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "UpdateSharedGroupDataRequest": {
      "name": "UpdateSharedGroupDataRequest",
      "properties": [
        {
          "name": "SharedGroupId",
          "description": "unique identifier for the shared group",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Data",
          "description": "key value pairs to be stored in the shared group - note that keys will be trimmed of whitespace, must not begin with a '!' character, and that null values will result in the removal of the key from the data set",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Permission",
          "description": "permission to be applied to all user data keys in this request",
          "jsontype": "String",
          "actualtype": "UserDataPermission",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "UpdateSharedGroupDataResult": {
      "name": "UpdateSharedGroupDataResult",
      "properties": []
    },
    "UpdateUserDataRequest": {
      "name": "UpdateUserDataRequest",
      "properties": [
        {
          "name": "Data",
          "description": "data to be written to the user's custom data. A key with a null value will be removed, rather than being set to null.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Permission",
          "description": "Permission to be applied to all user data keys written in this request. Defaults to \"private\" if not set.",
          "jsontype": "String",
          "actualtype": "UserDataPermission",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "UpdateUserDataResult": {
      "name": "UpdateUserDataResult",
      "properties": []
    },
    "UpdateUserStatisticsRequest": {
      "name": "UpdateUserStatisticsRequest",
      "properties": [
        {
          "name": "UserStatistics",
          "description": "statistics to be updated with the provided values",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "UpdateUserStatisticsResult": {
      "name": "UpdateUserStatisticsResult",
      "properties": []
    },
    "UpdateUserTitleDisplayNameRequest": {
      "name": "UpdateUserTitleDisplayNameRequest",
      "properties": [
        {
          "name": "DisplayName",
          "description": "new title display name for the user - must be between 3 and 25 characters",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "UpdateUserTitleDisplayNameResult": {
      "name": "UpdateUserTitleDisplayNameResult",
      "properties": [
        {
          "name": "DisplayName",
          "description": "current title display name for the user (this will be the original display name if the rename attempt failed)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserAccountInfo": {
      "name": "UserAccountInfo",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "unique identifier for the user account",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Created",
          "description": "timestamp indicating when the user account was created",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "Username",
          "description": "user account name in the PlayFab service",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TitleInfo",
          "description": "title-specific information for the user account",
          "jsontype": "Object",
          "actualtype": "UserTitleInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "PrivateInfo",
          "description": "personal information for the user which is considered more sensitive",
          "jsontype": "Object",
          "actualtype": "UserPrivateAccountInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "FacebookInfo",
          "description": "user Facebook information, if a Facebook account has been linked",
          "jsontype": "Object",
          "actualtype": "UserFacebookInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "SteamInfo",
          "description": "user Steam information, if a Steam account has been linked",
          "jsontype": "Object",
          "actualtype": "UserSteamInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "GameCenterInfo",
          "description": "user Gamecenter information, if a Gamecenter account has been linked",
          "jsontype": "Object",
          "actualtype": "UserGameCenterInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UserDataPermission": {
      "name": "UserDataPermission",
      "isenum": true,
      "enumvalues": [
        {
          "name": "Private"
        },
        {
          "name": "Public"
        }
      ]
    },
    "UserDataRecord": {
      "name": "UserDataRecord",
      "properties": [
        {
          "name": "Value",
          "description": "data stored for the specified user data key",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "LastUpdated",
          "description": "timestamp for when this data was last updated",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "Permission",
          "description": "indicates whether this data can be read by all users (public) or only the user (private)",
          "jsontype": "String",
          "actualtype": "UserDataPermission",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "UserFacebookInfo": {
      "name": "UserFacebookInfo",
      "properties": [
        {
          "name": "FacebookId",
          "description": "Facebook identifier",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserGameCenterInfo": {
      "name": "UserGameCenterInfo",
      "properties": [
        {
          "name": "GameCenterId",
          "description": "Gamecenter identifier",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserOrigination": {
      "name": "UserOrigination",
      "isenum": true,
      "enumvalues": [
        {
          "name": "Organic"
        },
        {
          "name": "Steam"
        },
        {
          "name": "Google"
        },
        {
          "name": "Amazon"
        },
        {
          "name": "Facebook"
        },
        {
          "name": "Kongregate"
        },
        {
          "name": "GamersFirst"
        },
        {
          "name": "Unknown"
        },
        {
          "name": "IOS"
        },
        {
          "name": "LoadTest"
        },
        {
          "name": "Android"
        },
        {
          "name": "PSN"
        },
        {
          "name": "GameCenter"
        }
      ]
    },
    "UserPrivateAccountInfo": {
      "name": "UserPrivateAccountInfo",
      "properties": [
        {
          "name": "Email",
          "description": "user email address",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserSteamInfo": {
      "name": "UserSteamInfo",
      "properties": [
        {
          "name": "SteamId",
          "description": "Steam identifier",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SteamCountry",
          "description": "the country in which the player resides, from Steam data",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SteamCurrency",
          "description": "currency type set in the user Steam account",
          "jsontype": "String",
          "actualtype": "Currency",
          "isenum": true,
          "optional": true
        },
        {
          "name": "SteamActivationStatus",
          "description": "what stage of game ownership the user is listed as being in, from Steam",
          "jsontype": "String",
          "actualtype": "TitleActivationStatus",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "UserTitleInfo": {
      "name": "UserTitleInfo",
      "properties": [
        {
          "name": "DisplayName",
          "description": "name of the user, as it is displayed in-game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Origination",
          "description": "source by which the user first joined the game, if known",
          "jsontype": "String",
          "actualtype": "UserOrigination",
          "isenum": true,
          "optional": true
        },
        {
          "name": "Created",
          "description": "timestamp indicating when the user was first associated with this game (this can differ significantly from when the user first registered with PlayFab)",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "LastLogin",
          "description": "timestamp for the last user login for this title",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "FirstLogin",
          "description": "timestamp indicating when the user first signed into this game (this can differ from the Created timestamp, as other events, such as issuing a beta key to the user, can associate the title to the user)",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "isBanned",
          "description": "boolean indicating whether or not the user is currently banned for a title",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "ValidateGooglePlayPurchaseRequest": {
      "name": "ValidateGooglePlayPurchaseRequest",
      "properties": [
        {
          "name": "ReceiptJson",
          "description": "The original json string returned by the Google Play IAB api",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Signature",
          "description": "The signature returned by the Google Play IAB api",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "ValidateGooglePlayPurchaseResult": {
      "name": "ValidateGooglePlayPurchaseResult",
      "properties": []
    },
    "ValidateIOSReceiptRequest": {
      "name": "ValidateIOSReceiptRequest",
      "properties": [
        {
          "name": "ReceiptData",
          "description": "base64 encoded receipt data, passed back by the App Store as a result of a successful purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CurrencyCode",
          "description": "currency used for the purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PurchasePrice",
          "description": "amount of the stated currency paid for the object",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "ValidateIOSReceiptResult": {
      "name": "ValidateIOSReceiptResult",
      "properties": []
    }
  },
  "calls": [
    {
      "name": "LoginWithAndroidDeviceID",
      "summary": "Signs the user in using the Android device identifier, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "On Android devices, the recommendation is to use the Settings.Secure.ANDROID_ID as the AndroidDeviceId, as described in this blog post (http://android-developers.blogspot.com/2011/03/identifying-app-installations.html). More information on this identifier can be found in the Android documentation (http://developer.android.com/reference/android/provider/Settings.Secure.html). If this is the first time a user has signed in with the Android device and CreateAccount is set to true, a new PlayFab account will be created and linked to the Android device ID. In this case, no email or username will be associated with the PlayFab account. Otherwise, if no PlayFab account is linked to the Android device, an error indicating this will be returned, so that the title can guide the user through creation of a PlayFab account.",
      "subgroup": "Authentication",
      "url": "/Client/LoginWithAndroidDeviceID",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithAndroidDeviceIDRequest",
      "result": "LoginResult",
      "seeAlso": [
        "LinkAndroidDeviceID",
        "UnlinkAndroidDeviceID"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "AccountNotFound",
        "AccountBanned"
      ]
    },
    {
      "name": "LoginWithEmailAddress",
      "summary": "Signs the user into the PlayFab account, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "Emai address and password lengths are provided for information purposes. The server will validate that data passed in conforms to the field definition and report errors appropriately. It is recommended that developers not perform this validation locally, so that future updates do not require client updates.",
      "subgroup": "Authentication",
      "url": "/Client/LoginWithEmailAddress",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithEmailAddressRequest",
      "result": "LoginResult",
      "seeAlso": [
        "RegisterPlayFabUser",
        "LoginWithPlayFab"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "AccountNotFound",
        "AccountBanned",
        "InvalidUsernameOrPassword"
      ]
    },
    {
      "name": "LoginWithFacebook",
      "summary": "Signs the user in using a Facebook access token, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "Facebook sign-in is accomplished using the Facebook User Access Token. More information on the Token can be found in the Facebook developer documentation (https://developers.facebook.com/docs/facebook-login/access-tokens/). In Unity, for example, the Token is available as AccessToken in the Facebook SDK ScriptableObject FB. If this is the first time a user has signed in with the Facebook account and CreateAccount is set to true, a new PlayFab account will be created and linked to the provided account's Facebook ID. In this case, no email or username will be associated with the PlayFab account. Otherwise, if no PlayFab account is linked to the Facebook account, an error indicating this will be returned, so that the title can guide the user through creation of a PlayFab account.",
      "subgroup": "Authentication",
      "url": "/Client/LoginWithFacebook",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithFacebookRequest",
      "result": "LoginResult",
      "seeAlso": [
        "LinkFacebookAccount",
        "UnlinkFacebookAccount"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "InvalidFacebookToken",
        "AccountNotFound",
        "AccountBanned"
      ]
    },
    {
      "name": "LoginWithGameCenter",
      "summary": "Signs the user in using an iOS Game Center player identifier, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "The Game Center player identifier (https://developer.apple.com/library/ios/documentation/Accounts/Reference/ACAccountClassRef/index.html#//apple_ref/occ/instp/ACAccount/identifier) is a generated string which is stored on the local device. As with device identifiers, care must be taken to never expose a player's Game Center identifier to end users, as that could result in a user's account being compromised. If this is the first time a user has signed in with Game Center and CreateAccount is set to true, a new PlayFab account will be created and linked to the Game Center identifier. In this case, no email or username will be associated with the PlayFab account. Otherwise, if no PlayFab account is linked to the Game Center account, an error indicating this will be returned, so that the title can guide the user through creation of a PlayFab account.",
      "subgroup": "Authentication",
      "url": "/Client/LoginWithGameCenter",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithGameCenterRequest",
      "result": "LoginResult",
      "seeAlso": [
        "LoginWithIOSDeviceID"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "AccountNotFound",
        "AccountBanned"
      ]
    },
    {
      "name": "LoginWithGoogleAccount",
      "summary": "Signs the user in using a Google account access token, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "Google sign-in is accomplished with the Google OAuth 2.0 Access Token. More information on the Token can be  found in the Google developer documentation (https://developers.google.com/accounts/docs/OAuth2) and in the Quick Start sample applications (https://developers.google.com/+/quickstart/). If this is the first time a user has signed in with the Google account and CreateAccount is set to true, a new PlayFab account will be created and linked to the Google account. In this case, no email or username will be associated with the PlayFab account. Otherwise, if no PlayFab account is linked to the Google account, an error indicating this will be returned, so that the title can guide the user through creation of a PlayFab account.",
      "subgroup": "Authentication",
      "url": "/Client/LoginWithGoogleAccount",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithGoogleAccountRequest",
      "result": "LoginResult",
      "errors": [
        "InvalidParams",
        "InvalidGoogleToken",
        "AccountBanned"
      ]
    },
    {
      "name": "LoginWithIOSDeviceID",
      "summary": "Signs the user in using the vendor-specific iOS device identifier, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "On iOS devices, the identifierForVendor  (https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDevice_Class/index.html#//apple_ref/occ/instp/UIDevice/identifierForVendor) must be used as the DeviceId, as the UIDevice uniqueIdentifier has been deprecated as of iOS 5, and use of the advertisingIdentifier for this purpose will result in failure of Apple's certification process. If this is the first time a user has signed in with the iOS device and CreateAccount is set to true, a new PlayFab account will be created and linked to the vendor-specific iOS device ID. In this case, no email or username will be associated with the PlayFab account. Otherwise, if no PlayFab account is linked to the iOS device, an error indicating this will be returned, so that the title can guide the user through creation of a PlayFab account.",
      "subgroup": "Authentication",
      "url": "/Client/LoginWithIOSDeviceID",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithIOSDeviceIDRequest",
      "result": "LoginResult",
      "seeAlso": [
        "LinkIOSDeviceID",
        "UnlinkIOSDeviceID"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "AccountNotFound",
        "AccountBanned",
        "InvalidPublisherId"
      ]
    },
    {
      "name": "LoginWithPlayFab",
      "summary": "Signs the user into the PlayFab account, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "Username and password lengths are provided for information purposes. The server will validate that data passed in conforms to the field definition and report errors appropriately. It is recommended that developers not perform this validation locally, so that future updates to the username or password do not require client updates.",
      "subgroup": "Authentication",
      "url": "/Client/LoginWithPlayFab",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithPlayFabRequest",
      "result": "LoginResult",
      "seeAlso": [
        "RegisterPlayFabUser",
        "LoginWithEmailAddress"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "AccountNotFound",
        "AccountBanned",
        "InvalidUsernameOrPassword"
      ]
    },
    {
      "name": "LoginWithSteam",
      "summary": "Signs the user in using a Steam authentication ticket, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "requestDetails": "Steam sign-in is accomplished with the Steam Session Ticket. More information on the Ticket can be found in the Steamworks SDK, here: https://partner.steamgames.com/documentation/auth (requires sign-in). NOTE: For Steam authentication to work, the title must be configured with the Steam Application ID and Publisher Key in the PlayFab Game Manager (under Properties). Information on creating a Publisher Key (referred to as the Secret Key in PlayFab) for your title can be found here: https://partner.steamgames.com/documentation/webapi#publisherkey. If this is the first time a user has signed in with the Steam account and CreateAccount is set to true, a new PlayFab account will be created and linked to the provided account's Steam ID. In this case, no email or username will be associated with the PlayFab account. Otherwise, if no PlayFab account is linked to the Steam account, an error indicating this will be returned, so that the title can guide the user through creation of a PlayFab account.",
      "subgroup": "Authentication",
      "url": "/Client/LoginWithSteam",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithSteamRequest",
      "result": "LoginResult",
      "seeAlso": [
        "LinkSteamAccount",
        "UnlinkSteamAccount"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "InvalidSteamTicket",
        "AccountNotFound",
        "AccountBanned"
      ]
    },
    {
      "name": "RegisterPlayFabUser",
      "summary": "Registers a new Playfab user account, returning a session identifier that can subsequently be used for API calls which require an authenticated user",
      "resultDetails": "Each account must have a unique email address in the PlayFab service. Once created, the account may be associated with additional accounts (Steam, Facebook, Game Center, etc.), allowing for added social network lists and achievements systems.",
      "subgroup": "Authentication",
      "url": "/Client/RegisterPlayFabUser",
      "auth": "None",
      "method": "POST",
      "request": "RegisterPlayFabUserRequest",
      "result": "RegisterPlayFabUserResult",
      "seeAlso": [
        "LoginWithPlayFab",
        "LoginWithEmailAddress"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "EmailAddressNotAvailable",
        "InvalidEmailAddress",
        "UsernameNotAvailable",
        "InvalidUsername",
        "InvalidPassword"
      ]
    },
    {
      "name": "AddUsernamePassword",
      "summary": "Adds playfab username/password auth to an existing semi-anonymous account created via a 3rd party auth method.",
      "resultDetails": "Each account must have a unique email address in the PlayFab service. Once created, the account may be associated with additional accounts (Steam, Facebook, Game Center, etc.), allowing for added social network lists and achievements systems.",
      "subgroup": "Account Management",
      "url": "/Client/AddUsernamePassword",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "AddUsernamePasswordRequest",
      "result": "AddUsernamePasswordResult",
      "seeAlso": [
        "LoginWithPlayFab",
        "LoginWithEmailAddress"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "EmailAddressNotAvailable",
        "InvalidEmailAddress",
        "UsernameNotAvailable",
        "InvalidUsername",
        "InvalidPassword"
      ]
    },
    {
      "name": "GetAccountInfo",
      "summary": "Retrieves the user's PlayFab account details",
      "resultDetails": "This API retrieves details regarding the user in the PlayFab service. Note that data returned may contain Personally Identifying Information (PII), such as email address, and so care should be taken in how this data is stored and managed. Since this call will always return the relevant information for the user, the recommendation is to not store this data locally.",
      "subgroup": "Account Management",
      "url": "/Client/GetAccountInfo",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetAccountInfoRequest",
      "result": "GetAccountInfoResult",
      "errors": [
        "AccountNotFound"
      ]
    },
    {
      "name": "GetPlayFabIDsFromFacebookIDs",
      "summary": "Retrieves the unique PlayFab identifiers for the given set of Facebook identifiers.",
      "resultDetails": "For Facebook identifiers which have not been linked to PlayFab accounts, null will be returned.",
      "subgroup": "Account Management",
      "url": "/Client/GetPlayFabIDsFromFacebookIDs",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetPlayFabIDsFromFacebookIDsRequest",
      "result": "GetPlayFabIDsFromFacebookIDsResult",
      "errors": [
        "AccountNotFound"
      ]
    },
    {
      "name": "GetUserCombinedInfo",
      "summary": "Retrieves all requested data for a user in one unified request. By default, this API returns all  data for the locally signed-in user. The input parameters may be used to limit the data retrieved any any subset of the available data, as well as retrieve the available data for a different user. Note that certain data, including inventory, virtual currency balances, and personally identifying information, may only be retrieved for the locally signed-in user. In the example below, a request is made for the account details, virtual currency balances, and specified user data for the locally signed-in user.",
      "resultDetails": "This API retrieves details regarding the user in the PlayFab service. Note that data returned for the locally signed-in user may contain Personally Identifying Information (PII), such as email address, and so care should be taken in how this data is stored and managed. Since this call will always return the relevant information for the user, the recommendation is to not store this data locally.",
      "subgroup": "Account Management",
      "url": "/Client/GetUserCombinedInfo",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetUserCombinedInfoRequest",
      "result": "GetUserCombinedInfoResult",
      "errors": [
        "AccountNotFound"
      ]
    },
    {
      "name": "LinkAndroidDeviceID",
      "summary": "Links the Android device identifier to the user's PlayFab account",
      "subgroup": "Account Management",
      "url": "/Client/LinkAndroidDeviceID",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LinkAndroidDeviceIDRequest",
      "result": "LinkAndroidDeviceIDResult",
      "seeAlso": [
        "LoginWithAndroidDeviceID",
        "UnlinkAndroidDeviceID"
      ],
      "errors": [
        "InvalidParams",
        "LinkedDeviceAlreadyClaimed",
        "DeviceAlreadyLinked"
      ]
    },
    {
      "name": "LinkFacebookAccount",
      "summary": "Links the Facebook account associated with the provided Facebook access token to the user's PlayFab account",
      "subgroup": "Account Management",
      "url": "/Client/LinkFacebookAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LinkFacebookAccountRequest",
      "result": "LinkFacebookAccountResult",
      "seeAlso": [
        "UnlinkFacebookAccount",
        "LoginWithFacebook"
      ],
      "errors": [
        "InvalidParams",
        "InvalidFacebookToken",
        "LinkedAccountAlreadyClaimed",
        "AccountAlreadyLinked"
      ]
    },
    {
      "name": "LinkGameCenterAccount",
      "summary": "Links the Game Center account associated with the provided Game Center ID to the user's PlayFab account",
      "subgroup": "Account Management",
      "url": "/Client/LinkGameCenterAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LinkGameCenterAccountRequest",
      "result": "LinkGameCenterAccountResult",
      "seeAlso": [
        "UnlinkGameCenterAccount"
      ],
      "errors": [
        "InvalidParams",
        "LinkedAccountAlreadyClaimed",
        "AccountAlreadyLinked"
      ]
    },
    {
      "name": "LinkIOSDeviceID",
      "summary": "Links the vendor-specific iOS device identifier to the user's PlayFab account",
      "subgroup": "Account Management",
      "url": "/Client/LinkIOSDeviceID",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LinkIOSDeviceIDRequest",
      "result": "LinkIOSDeviceIDResult",
      "seeAlso": [
        "LoginWithIOSDeviceID",
        "UnlinkIOSDeviceID"
      ],
      "errors": [
        "InvalidParams",
        "LinkedDeviceAlreadyClaimed",
        "DeviceAlreadyLinked"
      ]
    },
    {
      "name": "LinkSteamAccount",
      "summary": "Links the Steam account associated with the provided Steam authentication ticket to the user's PlayFab account",
      "requestDetails": "Steam authentication is accomplished with the Steam Session Ticket. More information on the Ticket can be found in the Steamworks SDK, here: https://partner.steamgames.com/documentation/auth (requires sign-in). NOTE: For Steam authentication to work, the title must be configured with the Steam Application ID and Publisher Key in the PlayFab Game Manager (under Properties). Information on creating a Publisher Key (referred to as the Secret Key in PlayFab) for your title can be found here: https://partner.steamgames.com/documentation/webapi#publisherkey.",
      "subgroup": "Account Management",
      "url": "/Client/LinkSteamAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LinkSteamAccountRequest",
      "result": "LinkSteamAccountResult",
      "seeAlso": [
        "UnlinkSteamAccount",
        "LoginWithSteam"
      ],
      "errors": [
        "InvalidParams",
        "InvalidSteamTicket",
        "LinkedAccountAlreadyClaimed",
        "AccountAlreadyLinked"
      ]
    },
    {
      "name": "SendAccountRecoveryEmail",
      "summary": "Forces an email to be sent to the registered email address for the user's account, with a link allowing the user to change the password",
      "requestDetails": "If the account in question is a \"temporary\" account (for example, one that was created via a call to LoginFromIOSDeviceID), thisfunction will have no effect. Only PlayFab accounts which have valid email addresses will be able to receive a password reset email using this API.",
      "subgroup": "Account Management",
      "url": "/Client/SendAccountRecoveryEmail",
      "auth": "None",
      "method": "POST",
      "request": "SendAccountRecoveryEmailRequest",
      "result": "SendAccountRecoveryEmailResult",
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "UnlinkAndroidDeviceID",
      "summary": "Unlinks the related Android device identifier from the user's PlayFab account",
      "subgroup": "Account Management",
      "url": "/Client/UnlinkAndroidDeviceID",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UnlinkAndroidDeviceIDRequest",
      "result": "UnlinkAndroidDeviceIDResult",
      "seeAlso": [
        "LoginWithAndroidDeviceID",
        "LinkAndroidDeviceID"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotLinked"
      ]
    },
    {
      "name": "UnlinkFacebookAccount",
      "summary": "Unlinks the related Facebook account from the user's PlayFab account",
      "subgroup": "Account Management",
      "url": "/Client/UnlinkFacebookAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UnlinkFacebookAccountRequest",
      "result": "UnlinkFacebookAccountResult",
      "seeAlso": [
        "LinkFacebookAccount"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotLinked"
      ]
    },
    {
      "name": "UnlinkGameCenterAccount",
      "summary": "Unlinks the related Game Center account from the user's PlayFab account",
      "subgroup": "Account Management",
      "url": "/Client/UnlinkGameCenterAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UnlinkGameCenterAccountRequest",
      "result": "UnlinkGameCenterAccountResult",
      "seeAlso": [
        "LinkGameCenterAccount"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotLinked"
      ]
    },
    {
      "name": "UnlinkIOSDeviceID",
      "summary": "Unlinks the related iOS device identifier from the user's PlayFab account",
      "subgroup": "Account Management",
      "url": "/Client/UnlinkIOSDeviceID",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UnlinkIOSDeviceIDRequest",
      "result": "UnlinkIOSDeviceIDResult",
      "seeAlso": [
        "LoginWithIOSDeviceID",
        "LinkIOSDeviceID"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotLinked"
      ]
    },
    {
      "name": "UnlinkSteamAccount",
      "summary": "Unlinks the related Steam account from the user's PlayFab account",
      "subgroup": "Account Management",
      "url": "/Client/UnlinkSteamAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UnlinkSteamAccountRequest",
      "result": "UnlinkSteamAccountResult",
      "seeAlso": [
        "LinkSteamAccount"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotLinked"
      ]
    },
    {
      "name": "UpdateUserTitleDisplayName",
      "summary": "Updates the title specific display name for the user",
      "requestDetails": "In addition to the PlayFab username, titles can make use of a DisplayName which is also a unique identifier, but specific to the title. This allows for unique names which more closely match the theme or genre of a title, for example.",
      "subgroup": "Account Management",
      "url": "/Client/UpdateUserTitleDisplayName",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UpdateUserTitleDisplayNameRequest",
      "result": "UpdateUserTitleDisplayNameResult",
      "errors": [
        "InvalidParams",
        "UsernameNotAvailable",
        "InsufficientFunds"
      ]
    },
    {
      "name": "GetFriendLeaderboard",
      "summary": "Retrieves a list of ranked friends of the current player for the given statistic, starting from the indicated point in the leaderboard",
      "resultDetails": "Note that the Position of the user in the results is for the overall leaderboard.",
      "subgroup": "Player Data Management",
      "url": "/Client/GetFriendLeaderboard",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetFriendLeaderboardRequest",
      "result": "GetLeaderboardResult",
      "seeAlso": [
        "GetLeaderboardAroundCurrentUser",
        "GetUserStatistics"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetLeaderboard",
      "summary": "Retrieves a list of ranked users for the given statistic, starting from the indicated point in the leaderboard",
      "resultDetails": "Note that the Position of the user in the results is for the overall leaderboard.",
      "subgroup": "Player Data Management",
      "url": "/Client/GetLeaderboard",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetLeaderboardRequest",
      "result": "GetLeaderboardResult",
      "seeAlso": [
        "GetLeaderboardAroundCurrentUser",
        "GetUserStatistics"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetLeaderboardAroundCurrentUser",
      "summary": "Retrieves a list of ranked users for the given statistic, centered on the currently signed-in user",
      "resultDetails": "Note that the Position of the user in the results is for the overall leaderboard.",
      "subgroup": "Player Data Management",
      "url": "/Client/GetLeaderboardAroundCurrentUser",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetLeaderboardAroundCurrentUserRequest",
      "result": "GetLeaderboardAroundCurrentUserResult",
      "seeAlso": [
        "GetLeaderboard",
        "GetUserStatistics"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserData",
      "summary": "Retrieves the title-specific custom data for the user which is readable and writable by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "url": "/Client/GetUserData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetUserDataRequest",
      "result": "GetUserDataResult",
      "seeAlso": [
        "UpdateUserData",
        "GetUserReadOnlyData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserPublisherData",
      "summary": "Retrieves the publisher-specific custom data for the user which is readable and writable by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "url": "/Client/GetUserPublisherData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetUserDataRequest",
      "result": "GetUserDataResult",
      "seeAlso": [
        "UpdateUserPublisherData",
        "GetUserPublisherReadOnlyData"
      ],
      "errors": [
        "InvalidParams",
        "PublisherNotSet"
      ]
    },
    {
      "name": "GetUserPublisherReadOnlyData",
      "summary": "Retrieves the publisher-specific custom data for the user which can only be read by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "url": "/Client/GetUserPublisherReadOnlyData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetUserDataRequest",
      "result": "GetUserDataResult",
      "seeAlso": [
        "GetUserPublisherData",
        "UpdateUserPublisherData"
      ],
      "errors": [
        "InvalidParams",
        "PublisherNotSet"
      ]
    },
    {
      "name": "GetUserReadOnlyData",
      "summary": "Retrieves the title-specific custom data for the user which can only be read by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "url": "/Client/GetUserReadOnlyData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetUserDataRequest",
      "result": "GetUserDataResult",
      "seeAlso": [
        "GetUserData",
        "UpdateUserData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserStatistics",
      "summary": "Retrieves the details of all title-specific statistics for the user",
      "resultDetails": "User statistics are numeric values which may only be updated by a server operation, in order to minimize the opportunity for unauthorized changes. In addition to being available for use by the title, the statistics are used for all leaderboard operations in PlayFab.",
      "subgroup": "Player Data Management",
      "url": "/Client/GetUserStatistics",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetUserStatisticsRequest",
      "result": "GetUserStatisticsResult",
      "seeAlso": [
        "GetLeaderboard",
        "GetLeaderboardAroundCurrentUser"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UpdateUserData",
      "summary": "Creates and updates the title-specific custom data for the user which is readable and writable by the client",
      "requestDetails": "This function performs an additive update of the arbitrary strings containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, while keys with null values will be removed. New keys will be added, with the given values. No other key-value pairs will be changed apart from those specified in the call.",
      "subgroup": "Player Data Management",
      "url": "/Client/UpdateUserData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UpdateUserDataRequest",
      "result": "UpdateUserDataResult",
      "seeAlso": [
        "GetUserData",
        "GetUserReadOnlyData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UpdateUserPublisherData",
      "summary": "Creates and updates the publisher-specific custom data for the user which is readable and writable by the client",
      "requestDetails": "This function performs an additive update of the arbitrary strings containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, while keys with null values will be removed. New keys will be added, with the given values. No other key-value pairs will be changed apart from those specified in the call.",
      "subgroup": "Player Data Management",
      "url": "/Client/UpdateUserPublisherData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UpdateUserDataRequest",
      "result": "UpdateUserDataResult",
      "seeAlso": [
        "GetUserPublisherData",
        "GetUserPublisherReadOnlyData"
      ],
      "errors": [
        "InvalidParams",
        "PublisherNotSet"
      ]
    },
    {
      "name": "UpdateUserStatistics",
      "summary": "Updates the values of the specified title-specific statistics for the user",
      "requestDetails": "This operation is additive. Statistics not currently defined will be added, while those already defined will be updated with the given values. All other user statistics will remain unchanged. This API must be enabled for use as an option in the game manager website. It is disabled by default.",
      "resultDetails": "User statistics are numeric values which may only be updated by a server operation, in order to minimize the opportunity for unauthorized changes. In addition to being available for use by the title, the statistics are used for all leaderboard operations in PlayFab.",
      "subgroup": "Player Data Management",
      "url": "/Client/UpdateUserStatistics",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UpdateUserStatisticsRequest",
      "result": "UpdateUserStatisticsResult",
      "seeAlso": [
        "GetLeaderboard",
        "GetLeaderboardAroundCurrentUser",
        "GetUserStatistics"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound",
        "InvalidUserStatistics",
        "APINotEnabledForGameClientAccess"
      ]
    },
    {
      "name": "GetCatalogItems",
      "summary": "Retrieves the specified version of the title's catalog of virtual goods, including all defined properties",
      "resultDetails": "If CatalogVersion is not specified, only inventory items associated with the most recent version of the catalog will be returned.",
      "subgroup": "Title-Wide Data Management",
      "url": "/Client/GetCatalogItems",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetCatalogItemsRequest",
      "result": "GetCatalogItemsResult",
      "seeAlso": [
        "GetUserInventory",
        "GetStoreItems"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetStoreItems",
      "summary": "Retrieves the set of items defined for the specified store, including all prices defined",
      "requestDetails": "A store contains an array of references to items defined in one or more catalog versions of the game, along with the prices for the item, in both real world and virtual currencies. These prices act as an override to any prices defined in the catalog. In this way, the base definitions of the items may be defined in the catalog, with all associated properties, while the pricing can be set for each store, as needed. This allows for subsets of goods to be defined for different purposes (in order to simplify showing some, but not all catalog items to users, based upon different characteristics), along with unique prices. Note that all prices defined in the catalog and store definitions for the item are considered valid, and that a compromised client can be made to send a request for an item based upon any of these definitions. If no price is specified in the store for an item, the price set in the catalog should be displayed to the user.",
      "subgroup": "Title-Wide Data Management",
      "url": "/Client/GetStoreItems",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetStoreItemsRequest",
      "result": "GetStoreItemsResult",
      "seeAlso": [
        "GetCatalogItems"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetTitleData",
      "summary": "Retrieves the key-value store of custom title settings",
      "requestDetails": "This API is designed to return title specific values which can be read, but not written to, by the client. For example, a developer could choose to store values which modify the user experience, such as enemy spawn rates, weapon strengths, movement speeds, etc. This allows a developer to update the title without the need to create, test, and ship a new build.",
      "subgroup": "Title-Wide Data Management",
      "url": "/Client/GetTitleData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetTitleDataRequest",
      "result": "GetTitleDataResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetTitleNews",
      "summary": "Retrieves the title news feed, as configured in the developer portal",
      "subgroup": "Title-Wide Data Management",
      "url": "/Client/GetTitleNews",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetTitleNewsRequest",
      "result": "GetTitleNewsResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "AddUserVirtualCurrency",
      "summary": "Increments the user's balance of the specified virtual currency by the stated amount",
      "requestDetails": "This API must be enabled for use as an option in the game manager website. It is disabled by default.",
      "subgroup": "Player Item Management",
      "url": "/Client/AddUserVirtualCurrency",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "AddUserVirtualCurrencyRequest",
      "result": "ModifyUserVirtualCurrencyResult",
      "seeAlso": [
        "SubtractUserVirtualCurrency"
      ],
      "errors": [
        "InvalidParams",
        "APINotEnabledForGameClientAccess"
      ]
    },
    {
      "name": "ConfirmPurchase",
      "summary": "Confirms with the payment provider that the purchase was approved (if applicable) and adjusts inventory and virtual currency balances as appropriate",
      "requestDetails": "The final step in the purchasing process, this API finalizes the purchase with the payment provider, where applicable, adding virtual goods to the player inventory (including random drop table resolution and recursive addition of bundled items) and adjusting virtual currency balances for funds used or added. Note that this is a pull operation, and should be polled regularly when a purchase is in progress.",
      "subgroup": "Player Item Management",
      "url": "/Client/ConfirmPurchase",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "ConfirmPurchaseRequest",
      "result": "ConfirmPurchaseResult",
      "seeAlso": [
        "StartPurchase",
        "PayForPurchase"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "ConsumeItem",
      "summary": "Consume uses of a consumable item. When all uses are consumed, it will be removed from the player's inventory.",
      "subgroup": "Player Item Management",
      "url": "/Client/ConsumeItem",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "ConsumeItemRequest",
      "result": "ConsumeItemResult",
      "errors": [
        "InvalidParams",
        "NoRemainingUses",
        "ItemNotFound"
      ]
    },
    {
      "name": "GetUserInventory",
      "summary": "Retrieves the user's current inventory of virtual goods",
      "resultDetails": "All items currently in the user inventory will be returned, irrespective of how they were acquired (via purchasing, grants, coupons, etc.). Items that are expired, fully consumed, or are no longer valid are not considered to be in the user's current inventory, and so will not be not included.",
      "subgroup": "Player Item Management",
      "url": "/Client/GetUserInventory",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetUserInventoryRequest",
      "result": "GetUserInventoryResult",
      "seeAlso": [
        "GetCatalogItems"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "PayForPurchase",
      "summary": "Selects a payment option for purchase order created via StartPurchase",
      "requestDetails": "This is the second step in the purchasing process, initiating the purchase transaction with the payment provider (if applicable). Note that there may be significant delays in responses from purchase providers - it is therefore recommended that the title not block on this operation, or (at a minimum) provide visual feedback to the user that the operation is pending.",
      "resultDetails": "For web-based payment providers, this operation returns the URL to which the user should be directed inorder to approve the purchase. Items added to the user inventory as a result of this operation will be marked as unconfirmed.",
      "subgroup": "Player Item Management",
      "url": "/Client/PayForPurchase",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "PayForPurchaseRequest",
      "result": "PayForPurchaseResult",
      "seeAlso": [
        "StartPurchase",
        "ConfirmPurchase"
      ],
      "errors": [
        "InvalidParams",
        "InvalidPaymentProvider",
        "FailedByPaymentProvider"
      ]
    },
    {
      "name": "PurchaseItem",
      "summary": "Buys a single item with virtual currency. You must specify both the virtual currency to use to purchase, as well as what the client believes the price to be. This lets the server fail the purchase if the price has changed.",
      "subgroup": "Player Item Management",
      "url": "/Client/PurchaseItem",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "PurchaseItemRequest",
      "result": "PurchaseItemResult",
      "seeAlso": [
        "StartPurchase"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "RedeemCoupon",
      "summary": "Adds the virtual goods associated with the coupon to the user's inventory",
      "requestDetails": "Coupon codes can be created for any item, or set of items, in the catalog for the title. This operation causes the coupon to be consumed, and the specific items to be awarded to the user. Attempting to re-use an already consumed code, or a code which has not yet been created in the service, will result in an error.",
      "subgroup": "Player Item Management",
      "url": "/Client/RedeemCoupon",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "RedeemCouponRequest",
      "result": "RedeemCouponResult",
      "errors": [
        "InvalidParams",
        "CouponCodeNotFound"
      ]
    },
    {
      "name": "ReportPlayer",
      "summary": "Submit a report for another player (due to bad bahavior, etc.), so that customer service representatives for the title can take action concerning potentially poxic players.",
      "resultDetails": "Players are currently limited to five reports per day. Attempts by a single user account to submit reports beyond five will result in Updated being returned as false.",
      "subgroup": "Player Item Management",
      "url": "/Client/ReportPlayer",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "ReportPlayerClientRequest",
      "result": "ReportPlayerClientResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "StartPurchase",
      "summary": "Creates an order for a list of items from the title catalog",
      "requestDetails": "This is the first step in the purchasing process. For security purposes, once the order (or \"cart\") has been created, additional inventory objects may no longer be added. In addition, inventory objects will be locked to the current prices, regardless of any subsequent changes at the catalog level which may occur during the next two steps.",
      "subgroup": "Player Item Management",
      "url": "/Client/StartPurchase",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "StartPurchaseRequest",
      "result": "StartPurchaseResult",
      "seeAlso": [
        "PayForPurchase",
        "ConfirmPurchase"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "SubtractUserVirtualCurrency",
      "summary": "Decrements the user's balance of the specified virtual currency by the stated amount",
      "requestDetails": "This API must be enabled for use as an option in the game manager website. It is disabled by default.",
      "subgroup": "Player Item Management",
      "url": "/Client/SubtractUserVirtualCurrency",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "SubtractUserVirtualCurrencyRequest",
      "result": "ModifyUserVirtualCurrencyResult",
      "seeAlso": [
        "AddUserVirtualCurrency"
      ],
      "errors": [
        "InvalidParams",
        "APINotEnabledForGameClientAccess"
      ]
    },
    {
      "name": "UnlockContainerItem",
      "summary": "Unlocks a container item in the user's inventory and consumes a key item of the type indicated by the container item",
      "requestDetails": "Container items and their associated unlocking items (\"crates\" and \"keys\") are paired inventory objects which provide developers with a secure way to have an object which requires another object to activate, without providing the client with the opportunity to use replay attacks, packet blocking, or similar techniques to gain the objects in the container illegitimately.",
      "resultDetails": "As a result of this operation, the inventory objects defined as belonging to the container will be added to the user's inventory, including random drop table resolution and recursive addition of bundled items.",
      "subgroup": "Player Item Management",
      "url": "/Client/UnlockContainerItem",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UnlockContainerItemRequest",
      "result": "UnlockContainerItemResult",
      "errors": [
        "InvalidParams",
        "InvalidContainerItem",
        "ContainerNotOwned",
        "KeyNotOwned",
        "InvalidItemIdInTable"
      ]
    },
    {
      "name": "AddFriend",
      "summary": "Adds the PlayFab user, based upon a match against a supplied unique identifier, to the friend list of the local user",
      "subgroup": "Friend List Management",
      "url": "/Client/AddFriend",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "AddFriendRequest",
      "result": "AddFriendResult",
      "seeAlso": [
        "GetFriendsList",
        "SetFriendTags"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "GetFriendsList",
      "summary": "Retrieves the current friend list for the local user, constrained to users who have PlayFab accounts",
      "requestDetails": "This operations refreshes the friend list of the local user, including querying all linked accounts.",
      "resultDetails": "The list returned can be a mixture of friends from Steam, Facebook and PlayFab, though  Facebook friends will only be those who signed info the game via Facebook.",
      "subgroup": "Friend List Management",
      "url": "/Client/GetFriendsList",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetFriendsListRequest",
      "result": "GetFriendsListResult",
      "seeAlso": [
        "AddFriend",
        "RemoveFriend"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "RemoveFriend",
      "summary": "Removes a specified user from the friend list of the local user",
      "subgroup": "Friend List Management",
      "url": "/Client/RemoveFriend",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "RemoveFriendRequest",
      "result": "RemoveFriendResult",
      "seeAlso": [
        "AddFriend",
        "SetFriendTags"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "SetFriendTags",
      "summary": "Updates the tag list for a specified user in the friend list of the local user",
      "requestDetails": "This operation is not additive. It will completely replace the tag list for the specified user.",
      "subgroup": "Friend List Management",
      "url": "/Client/SetFriendTags",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "SetFriendTagsRequest",
      "result": "SetFriendTagsResult",
      "seeAlso": [
        "AddFriend",
        "RemoveFriend"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "RegisterForIOSPushNotification",
      "summary": "Registers the iOS device to receive push notifications",
      "requestDetails": "More infomration can be found on configuring your game for the Apple Push Notification service in the  Apple documentation, here:  https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html#//apple_ref/doc/uid/TP40008194-CH100-SW9.  The steps to configure and send Push Notifications is described in the PlayFab forums, here:  https://support.playfab.com/discussions/topics/1000041035.",
      "subgroup": "IOS-Specific APIs",
      "url": "/Client/RegisterForIOSPushNotification",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "RegisterForIOSPushNotificationRequest",
      "result": "RegisterForIOSPushNotificationResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "RestoreIOSPurchases",
      "summary": "Restores all in-app purchases based on the given refresh receipt.",
      "requestDetails": "Iterates through every purchase in the receipt and restores the items if they still exist in the catalog and can be validated. ",
      "resultDetails": "Once verified, the valid items will be restored into the user's inventory.",
      "subgroup": "IOS-Specific APIs",
      "url": "/Client/RestoreIOSPurchases",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "RestoreIOSPurchasesRequest",
      "result": "RestoreIOSPurchasesResult",
      "errors": [
        "InvalidParams",
        "InvalidReceipt",
        "ReceiptAlreadyUsed",
        "ReceiptDoesNotContainInAppItems",
        "ReceiptContainsMultipleInAppItems",
        "InvalidBundleID"
      ]
    },
    {
      "name": "ValidateIOSReceipt",
      "summary": "Validates with the Apple store that the receipt for an iOS in-app purchase is valid and that it matches the purchased catalog item",
      "requestDetails": "The CurrecncyCode and PurcahsePrice must match the price which was set up for the item in the Apple store. In addition, The ItemId of the inventory in the PlayFab Catalog must match the Product ID as it was set up in the Apple store. This enables the PlayFab service to securely validate that the purchase is for the correct item, in order to prevent uses from passing valid receipts as being for more expensive items (passing a receipt for a 99-cent purchase as being for a $19.99 purchase, for example).",
      "resultDetails": "Once verified, the catalog item matching the iTunes item name will be added to the user's inventory.",
      "subgroup": "IOS-Specific APIs",
      "url": "/Client/ValidateIOSReceipt",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "ValidateIOSReceiptRequest",
      "result": "ValidateIOSReceiptResult",
      "errors": [
        "InvalidParams",
        "InvalidReceipt",
        "ReceiptAlreadyUsed",
        "ReceiptDoesNotContainInAppItems",
        "ReceiptContainsMultipleInAppItems",
        "InvalidBundleID"
      ]
    },
    {
      "name": "GetCurrentGames",
      "summary": "Get details about all current running game servers matching the given parameters.",
      "subgroup": "Matchmaking APIs",
      "url": "/Client/GetCurrentGames",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "CurrentGamesRequest",
      "result": "CurrentGamesResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetGameServerRegions",
      "summary": " Get details about the regions hosting game servers matching the given parameters.",
      "subgroup": "Matchmaking APIs",
      "url": "/Client/GetGameServerRegions",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GameServerRegionsRequest",
      "result": "GameServerRegionsResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "Matchmake",
      "summary": "Attempts to locate a game session matching the given parameters. Note that parameters specified in the search are required (they are not weighting factors). If a slot is found in a server instance matching the parameters, the slot will be assigned to that player, removing it from the availabe set. In that case, the information on the game session will be returned, otherwise the Status returned will be GameNotFound. Note that EnableQueue is deprecated at this time.",
      "subgroup": "Matchmaking APIs",
      "url": "/Client/Matchmake",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "MatchmakeRequest",
      "result": "MatchmakeResult",
      "errors": [
        "InvalidParams",
        "GameModeNotFound"
      ]
    },
    {
      "name": "StartGame",
      "summary": "Start a new game server with a given configuration, add the current player and return the connection information.",
      "subgroup": "Matchmaking APIs",
      "url": "/Client/StartGame",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "StartGameRequest",
      "result": "StartGameResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "AndroidDevicePushNotificationRegistration",
      "summary": "Registers the Android device to receive push notifications",
      "requestDetails": "More information can be found on configuring your game for the Google Cloud Messaging service in the Google developer documentation, here:  http://developer.android.com/google/gcm/client.html.  The steps to configure and send Push Notifications is described in the PlayFab forums, here:  https://support.playfab.com/discussions/topics/1000041035.",
      "subgroup": "Android-Specific APIs",
      "url": "/Client/AndroidDevicePushNotificationRegistration",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "AndroidDevicePushNotificationRegistrationRequest",
      "result": "AndroidDevicePushNotificationRegistrationResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "ValidateGooglePlayPurchase",
      "summary": "Validates a Google Play purchase and gives the corresponding item to the player.",
      "requestDetails": "The packageName and productId are defined in the GooglePlay store. The productId must match the ItemId of the inventory item in the PlayFab catalog for the title. This enables the PlayFab service to securely validate that the purchase is for the correct item, in order to prevent uses from passing valid receipts as being for more expensive items (passing a receipt for a 99-cent purchase as being for a $19.99 purchase, for example). Each receipt may be validated only once to avoid granting the same item over and over from a single purchase.",
      "resultDetails": "Once verified, the catalog item (ItemId) matching the GooglePlay store item (productId) will be added to the user's inventory.",
      "subgroup": "Android-Specific APIs",
      "url": "/Client/ValidateGooglePlayPurchase",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "ValidateGooglePlayPurchaseRequest",
      "result": "ValidateGooglePlayPurchaseResult",
      "errors": [
        "InvalidParams",
        "InvalidReceipt",
        "ReceiptAlreadyUsed",
        "ReceiptCancelled"
      ]
    },
    {
      "name": "LogEvent",
      "summary": "Logs a custom analytics event",
      "requestDetails": "This API is designed to track analytics events. Events logged using this API will be stored in the title's Redshift database. Each unique eventName will create a distinct table within the database. Within that table, a column will be created for every unique key. Using a first-person shooter as an example, the title may need to track headshots as a distinct event. The sample request below demonstrates an example of this. In addition to the values sent, timestamps and User IDs are automatically added as 'ts' and 'user_id' to each table. The 'Headshot' table in this example would then have the schema: 'user_id'|'ts'|'victim'|'gun'|'x_coord'|'y_coord'|'z_coord'|'damage|aim_assist' and the row corresponding to this event would look like: 'EF987654ABAB012'|'2014-1-1 12:12:12'|'B76543AEAE65'|'big_bad_sniper'|10|20|1|1000|1.The PlayFab service automatically creates events for all login and purchase operations. This API is intended for game specific events only. Please note that event logging is not enabled for titles by default. If you need event logging enabled, please contact us at devrel@playfab.com for more information.",
      "subgroup": "Analytics",
      "url": "/Client/LogEvent",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LogEventRequest",
      "result": "LogEventResult",
      "errors": [
        "BodyTooLarge",
        "ReservedWordInBody",
        "ReservedEventName",
        "InvalidRequest",
        "InvalidTypeInBody"
      ]
    },
    {
      "name": "AddSharedGroupMembers",
      "summary": "Adds users to the set of those able to update both the shared data, as well as the set of users in the group. Only users in the group can add new members.",
      "subgroup": "Shared Group Data",
      "url": "/Client/AddSharedGroupMembers",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "AddSharedGroupMembersRequest",
      "result": "AddSharedGroupMembersResult",
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "CreateSharedGroup",
      "summary": "Requests the creation of a shared group object, containing key/value pairs which may be updated by all members of the group. Upon creation, the current user will be the only member of the group.",
      "requestDetails": "If SharedGroupId is specified, the service will attempt to create a group with that identifier, and will return an error if it is already in use. If no SharedGroupId is specified, a random identifier will be assigned.",
      "subgroup": "Shared Group Data",
      "url": "/Client/CreateSharedGroup",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "CreateSharedGroupRequest",
      "result": "CreateSharedGroupResult",
      "errors": [
        "InvalidParams",
        "InvalidSharedGroupId"
      ]
    },
    {
      "name": "GetPublisherData",
      "summary": "Retrieves the key-value store of custom publisher settings",
      "requestDetails": "This API is designed to return publisher-specific values which can be read, but not written to, by the client. This data is shared across all titles assigned to a particular publisher, and can be used for cross-game coordination. Only titles assigned to a publisher can use this API. For more information email devrel@playfab.com",
      "subgroup": "Shared Group Data",
      "url": "/Client/GetPublisherData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetPublisherDataRequest",
      "result": "GetPublisherDataResult",
      "errors": [
        "InvalidParams",
        "PublisherNotSet"
      ]
    },
    {
      "name": "GetSharedGroupData",
      "summary": "Retrieves data stored in a shared group object, as well as the list of members in the group. Non-members of the group may use this to retrieve group data, including membership, but they will not receive data for keys marked as private.",
      "subgroup": "Shared Group Data",
      "url": "/Client/GetSharedGroupData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetSharedGroupDataRequest",
      "result": "GetSharedGroupDataResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "RemoveSharedGroupMembers",
      "summary": "Removes users from the set of those able to update the shared data and the set of users in the group. Only users in the group can remove members. If as a result of the call, zero users remain with access, the group and its associated data will be deleted.",
      "subgroup": "Shared Group Data",
      "url": "/Client/RemoveSharedGroupMembers",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "RemoveSharedGroupMembersRequest",
      "result": "RemoveSharedGroupMembersResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UpdateSharedGroupData",
      "summary": "Adds, updates, and removes data keys for a shared group object. If the permission is set to Public, all fields updated or added in this call will be readable by users not in the group. By default, data permissions are set to Private. Regardless of the permission setting, only members of the group can update the data.",
      "requestDetails": "Note that in the case of multiple calls to write to the same shared group data keys, the last write received by the PlayFab service will determine the value available to subsequent read operations. For scenarios requiring coordination of data updates, it is recommended that titles make use of user data with read permission set to public, or a combination of user data and shared group data.",
      "subgroup": "Shared Group Data",
      "url": "/Client/UpdateSharedGroupData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UpdateSharedGroupDataRequest",
      "result": "UpdateSharedGroupDataResult",
      "errors": [
        "InvalidParams",
        "NotAuthorized"
      ]
    },
    {
      "name": "RefreshPSNAuthToken",
      "summary": "Uses the supplied OAuth code to refresh the internally cached player PSN auth token",
      "subgroup": "Sony-specific APIs",
      "url": "/Client/RefreshPSNAuthToken",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "RefreshPSNAuthTokenRequest",
      "result": "EmptyResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetCloudScriptUrl",
      "summary": "Retrieves the title-specific URL for Cloud Script servers. This must be queried once, prior  to making any calls to RunCloudScript.",
      "requestDetails": "Cloud Scripts in PlayFab have both Versions and Revisions. Each time a new script is  uploaded against a Version, this creates a new Revision. If Testing is set to true, the URL returned will be for the Cloud Script Revision which was most recently uploaded. If Testing is set to false, the URL returned will be for the  Cloud Script Revision which was most recently deployed to live.",
      "resultDetails": "The URL returned is the one which must be used by the title to call into a handler in  Cloud Script. PlayFab-supplied SDKs will automatically save the results of this call, for use with any calls to  RunCloudScript.",
      "subgroup": "Server-Side Cloud Script",
      "url": "/Client/GetCloudScriptUrl",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetCloudScriptUrlRequest",
      "result": "GetCloudScriptUrlResult",
      "seeAlso": [
        "RunCloudScript"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "RunCloudScript",
      "summary": "Triggers a particular server action, passing the provided inputs to the hosted Cloud Script. An action in this context is a handler in the JavaScript.",
      "requestDetails": "Inputs to the Cloud Script may be specified either using Params, which is an object containing one or more parameters, or ParamsEncoded, which is a string containing the parameters encoded into JSON. Titles should only specify the parameters in one of these inputs - if both are specified, the ParamsEncoded will be used.",
      "resultDetails": "As part of the returned values, both Results and ResultsEncoded will be provided. As with Params and ParamsEncoded, these are respectively an object containing the returned values, and a string containing the returned values encoded into JSON. In addition, the Cloud Script may additionally generate a log, using log.info(), in order to provide additional debugging information.",
      "subgroup": "Server-Side Cloud Script",
      "url": "/Client/RunCloudScript",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "RunCloudScriptRequest",
      "result": "RunCloudScriptResult",
      "serverType": "logic",
      "seeAlso": [
        "GetCloudScriptUrl"
      ],
      "errors": [
        "InvalidParams"
      ]
    }
  ],
  "subgroups": [
    {
      "name": "Authentication",
      "methods": [
        "LoginWithAndroidDeviceID",
        "LoginWithEmailAddress",
        "LoginWithFacebook",
        "LoginWithGameCenter",
        "LoginWithGoogleAccount",
        "LoginWithIOSDeviceID",
        "LoginWithPlayFab",
        "LoginWithSteam",
        "RegisterPlayFabUser"
      ]
    },
    {
      "name": "Account Management",
      "methods": [
        "AddUsernamePassword",
        "GetAccountInfo",
        "GetPlayFabIDsFromFacebookIDs",
        "GetUserCombinedInfo",
        "LinkAndroidDeviceID",
        "LinkFacebookAccount",
        "LinkGameCenterAccount",
        "LinkIOSDeviceID",
        "LinkSteamAccount",
        "SendAccountRecoveryEmail",
        "UnlinkAndroidDeviceID",
        "UnlinkFacebookAccount",
        "UnlinkGameCenterAccount",
        "UnlinkIOSDeviceID",
        "UnlinkSteamAccount",
        "UpdateUserTitleDisplayName"
      ]
    },
    {
      "name": "Player Data Management",
      "methods": [
        "GetFriendLeaderboard",
        "GetLeaderboard",
        "GetLeaderboardAroundCurrentUser",
        "GetUserData",
        "GetUserPublisherData",
        "GetUserPublisherReadOnlyData",
        "GetUserReadOnlyData",
        "GetUserStatistics",
        "UpdateUserData",
        "UpdateUserPublisherData",
        "UpdateUserStatistics"
      ]
    },
    {
      "name": "Title-Wide Data Management",
      "methods": [
        "GetCatalogItems",
        "GetStoreItems",
        "GetTitleData",
        "GetTitleNews"
      ]
    },
    {
      "name": "Player Item Management",
      "methods": [
        "AddUserVirtualCurrency",
        "ConfirmPurchase",
        "ConsumeItem",
        "GetUserInventory",
        "PayForPurchase",
        "PurchaseItem",
        "RedeemCoupon",
        "ReportPlayer",
        "StartPurchase",
        "SubtractUserVirtualCurrency",
        "UnlockContainerItem"
      ]
    },
    {
      "name": "Friend List Management",
      "methods": [
        "AddFriend",
        "GetFriendsList",
        "RemoveFriend",
        "SetFriendTags"
      ]
    },
    {
      "name": "IOS-Specific APIs",
      "methods": [
        "RegisterForIOSPushNotification",
        "RestoreIOSPurchases",
        "ValidateIOSReceipt"
      ]
    },
    {
      "name": "Matchmaking APIs",
      "methods": [
        "GetCurrentGames",
        "GetGameServerRegions",
        "Matchmake",
        "StartGame"
      ]
    },
    {
      "name": "Android-Specific APIs",
      "methods": [
        "AndroidDevicePushNotificationRegistration",
        "ValidateGooglePlayPurchase"
      ]
    },
    {
      "name": "Analytics",
      "methods": [
        "LogEvent"
      ]
    },
    {
      "name": "Shared Group Data",
      "methods": [
        "AddSharedGroupMembers",
        "CreateSharedGroup",
        "GetPublisherData",
        "GetSharedGroupData",
        "RemoveSharedGroupMembers",
        "UpdateSharedGroupData"
      ]
    },
    {
      "name": "Sony-specific APIs",
      "methods": [
        "RefreshPSNAuthToken"
      ]
    },
    {
      "name": "Server-Side Cloud Script",
      "methods": [
        "GetCloudScriptUrl",
        "RunCloudScript"
      ]
    }
  ],
  "errors": {
    "Success": {
      "id": 0,
      "name": "Success"
    },
    "InvalidParams": {
      "id": 1000,
      "name": "InvalidParams"
    },
    "AccountNotFound": {
      "id": 1001,
      "name": "AccountNotFound"
    },
    "AccountBanned": {
      "id": 1002,
      "name": "AccountBanned"
    },
    "InvalidUsernameOrPassword": {
      "id": 1003,
      "name": "InvalidUsernameOrPassword"
    },
    "InvalidTitleId": {
      "id": 1004,
      "name": "InvalidTitleId"
    },
    "InvalidEmailAddress": {
      "id": 1005,
      "name": "InvalidEmailAddress"
    },
    "EmailAddressNotAvailable": {
      "id": 1006,
      "name": "EmailAddressNotAvailable"
    },
    "InvalidUsername": {
      "id": 1007,
      "name": "InvalidUsername"
    },
    "InvalidPassword": {
      "id": 1008,
      "name": "InvalidPassword"
    },
    "UsernameNotAvailable": {
      "id": 1009,
      "name": "UsernameNotAvailable"
    },
    "InvalidSteamTicket": {
      "id": 1010,
      "name": "InvalidSteamTicket"
    },
    "AccountAlreadyLinked": {
      "id": 1011,
      "name": "AccountAlreadyLinked"
    },
    "LinkedAccountAlreadyClaimed": {
      "id": 1012,
      "name": "LinkedAccountAlreadyClaimed"
    },
    "InvalidFacebookToken": {
      "id": 1013,
      "name": "InvalidFacebookToken"
    },
    "AccountNotLinked": {
      "id": 1014,
      "name": "AccountNotLinked"
    },
    "FailedByPaymentProvider": {
      "id": 1015,
      "name": "FailedByPaymentProvider"
    },
    "CouponCodeNotFound": {
      "id": 1016,
      "name": "CouponCodeNotFound"
    },
    "InvalidContainerItem": {
      "id": 1017,
      "name": "InvalidContainerItem"
    },
    "ContainerNotOwned": {
      "id": 1018,
      "name": "ContainerNotOwned"
    },
    "KeyNotOwned": {
      "id": 1019,
      "name": "KeyNotOwned"
    },
    "InvalidItemIdInTable": {
      "id": 1020,
      "name": "InvalidItemIdInTable"
    },
    "InvalidReceipt": {
      "id": 1021,
      "name": "InvalidReceipt"
    },
    "ReceiptAlreadyUsed": {
      "id": 1022,
      "name": "ReceiptAlreadyUsed"
    },
    "ReceiptCancelled": {
      "id": 1023,
      "name": "ReceiptCancelled"
    },
    "GameNotFound": {
      "id": 1024,
      "name": "GameNotFound"
    },
    "GameModeNotFound": {
      "id": 1025,
      "name": "GameModeNotFound"
    },
    "InvalidGoogleToken": {
      "id": 1026,
      "name": "InvalidGoogleToken"
    },
    "UserIsNotPartOfDeveloper": {
      "id": 1027,
      "name": "UserIsNotPartOfDeveloper"
    },
    "InvalidTitleForDeveloper": {
      "id": 1028,
      "name": "InvalidTitleForDeveloper"
    },
    "TitleNameConflicts": {
      "id": 1029,
      "name": "TitleNameConflicts"
    },
    "UserisNotValid": {
      "id": 1030,
      "name": "UserisNotValid"
    },
    "ValueAlreadyExists": {
      "id": 1031,
      "name": "ValueAlreadyExists"
    },
    "BuildNotFound": {
      "id": 1032,
      "name": "BuildNotFound"
    },
    "PlayerNotInGame": {
      "id": 1033,
      "name": "PlayerNotInGame"
    },
    "InvalidTicket": {
      "id": 1034,
      "name": "InvalidTicket"
    },
    "InvalidDeveloper": {
      "id": 1035,
      "name": "InvalidDeveloper"
    },
    "InvalidOrderInfo": {
      "id": 1036,
      "name": "InvalidOrderInfo"
    },
    "RegistrationIncomplete": {
      "id": 1037,
      "name": "RegistrationIncomplete"
    },
    "InvalidPlatform": {
      "id": 1038,
      "name": "InvalidPlatform"
    },
    "UnknownError": {
      "id": 1039,
      "name": "UnknownError"
    },
    "SteamApplicationNotOwned": {
      "id": 1040,
      "name": "SteamApplicationNotOwned"
    },
    "WrongSteamAccount": {
      "id": 1041,
      "name": "WrongSteamAccount"
    },
    "TitleNotActivated": {
      "id": 1042,
      "name": "TitleNotActivated"
    },
    "RegistrationSessionNotFound": {
      "id": 1043,
      "name": "RegistrationSessionNotFound"
    },
    "NoSuchMod": {
      "id": 1044,
      "name": "NoSuchMod"
    },
    "FileNotFound": {
      "id": 1045,
      "name": "FileNotFound"
    },
    "DuplicateEmail": {
      "id": 1046,
      "name": "DuplicateEmail"
    },
    "ItemNotFound": {
      "id": 1047,
      "name": "ItemNotFound"
    },
    "ItemNotOwned": {
      "id": 1048,
      "name": "ItemNotOwned"
    },
    "ItemNotRecycleable": {
      "id": 1049,
      "name": "ItemNotRecycleable"
    },
    "ItemNotAffordable": {
      "id": 1050,
      "name": "ItemNotAffordable"
    },
    "InvalidVirtualCurrency": {
      "id": 1051,
      "name": "InvalidVirtualCurrency"
    },
    "WrongVirtualCurrency": {
      "id": 1052,
      "name": "WrongVirtualCurrency"
    },
    "WrongPrice": {
      "id": 1053,
      "name": "WrongPrice"
    },
    "NonPositiveValue": {
      "id": 1054,
      "name": "NonPositiveValue"
    },
    "InvalidRegion": {
      "id": 1055,
      "name": "InvalidRegion"
    },
    "RegionAtCapacity": {
      "id": 1056,
      "name": "RegionAtCapacity"
    },
    "ServerFailedToStart": {
      "id": 1057,
      "name": "ServerFailedToStart"
    },
    "NameNotAvailable": {
      "id": 1058,
      "name": "NameNotAvailable"
    },
    "InsufficientFunds": {
      "id": 1059,
      "name": "InsufficientFunds"
    },
    "InvalidDeviceID": {
      "id": 1060,
      "name": "InvalidDeviceID"
    },
    "InvalidPushNotificationToken": {
      "id": 1061,
      "name": "InvalidPushNotificationToken"
    },
    "NoRemainingUses": {
      "id": 1062,
      "name": "NoRemainingUses"
    },
    "InvalidPaymentProvider": {
      "id": 1063,
      "name": "InvalidPaymentProvider"
    },
    "PurchaseInitializationFailure": {
      "id": 1064,
      "name": "PurchaseInitializationFailure"
    },
    "DuplicateUsername": {
      "id": 1065,
      "name": "DuplicateUsername"
    },
    "InvalidBuyerInfo": {
      "id": 1066,
      "name": "InvalidBuyerInfo"
    },
    "NoGameModeParamsSet": {
      "id": 1067,
      "name": "NoGameModeParamsSet"
    },
    "BodyTooLarge": {
      "id": 1068,
      "name": "BodyTooLarge"
    },
    "ReservedWordInBody": {
      "id": 1069,
      "name": "ReservedWordInBody"
    },
    "InvalidTypeInBody": {
      "id": 1070,
      "name": "InvalidTypeInBody"
    },
    "InvalidRequest": {
      "id": 1071,
      "name": "InvalidRequest"
    },
    "ReservedEventName": {
      "id": 1072,
      "name": "ReservedEventName"
    },
    "InvalidUserStatistics": {
      "id": 1073,
      "name": "InvalidUserStatistics"
    },
    "NotAuthenticated": {
      "id": 1074,
      "name": "NotAuthenticated"
    },
    "StreamAlreadyExists": {
      "id": 1075,
      "name": "StreamAlreadyExists"
    },
    "ErrorCreatingStream": {
      "id": 1076,
      "name": "ErrorCreatingStream"
    },
    "StreamNotFound": {
      "id": 1077,
      "name": "StreamNotFound"
    },
    "InvalidAccount": {
      "id": 1078,
      "name": "InvalidAccount"
    },
    "PurchaseDoesNotExist": {
      "id": 1080,
      "name": "PurchaseDoesNotExist"
    },
    "InvalidPurchaseTransactionStatus": {
      "id": 1081,
      "name": "InvalidPurchaseTransactionStatus"
    },
    "APINotEnabledForGameClientAccess": {
      "id": 1082,
      "name": "APINotEnabledForGameClientAccess"
    },
    "NoPushNotificationARNForTitle": {
      "id": 1083,
      "name": "NoPushNotificationARNForTitle"
    },
    "BuildAlreadyExists": {
      "id": 1084,
      "name": "BuildAlreadyExists"
    },
    "BuildPackageDoesNotExist": {
      "id": 1085,
      "name": "BuildPackageDoesNotExist"
    },
    "CustomAnalyticsEventsNotEnabledForTitle": {
      "id": 1087,
      "name": "CustomAnalyticsEventsNotEnabledForTitle"
    },
    "InvalidSharedGroupId": {
      "id": 1088,
      "name": "InvalidSharedGroupId"
    },
    "NotAuthorized": {
      "id": 1089,
      "name": "NotAuthorized"
    },
    "MissingTitleGoogleProperties": {
      "id": 1090,
      "name": "MissingTitleGoogleProperties"
    },
    "InvalidItemProperties": {
      "id": 1091,
      "name": "InvalidItemProperties"
    },
    "InvalidPSNAuthCode": {
      "id": 1092,
      "name": "InvalidPSNAuthCode"
    },
    "InvalidItemId": {
      "id": 1093,
      "name": "InvalidItemId"
    },
    "PushNotEnabledForAccount": {
      "id": 1094,
      "name": "PushNotEnabledForAccount"
    },
    "PushServiceError": {
      "id": 1095,
      "name": "PushServiceError"
    },
    "ReceiptDoesNotContainInAppItems": {
      "id": 1096,
      "name": "ReceiptDoesNotContainInAppItems"
    },
    "ReceiptContainsMultipleInAppItems": {
      "id": 1097,
      "name": "ReceiptContainsMultipleInAppItems"
    },
    "InvalidBundleID": {
      "id": 1098,
      "name": "InvalidBundleID"
    },
    "JavascriptException": {
      "id": 1099,
      "name": "JavascriptException"
    },
    "InvalidSessionTicket": {
      "id": 1100,
      "name": "InvalidSessionTicket"
    },
    "UnableToConnectToDatabase": {
      "id": 1101,
      "name": "UnableToConnectToDatabase"
    },
    "InternalServerError": {
      "id": 1110,
      "name": "InternalServerError"
    },
    "InvalidReportDate": {
      "id": 1111,
      "name": "InvalidReportDate"
    },
    "ReportNotAvailable": {
      "id": 1112,
      "name": "ReportNotAvailable"
    },
    "DatabaseThroughputExceeded": {
      "id": 1113,
      "name": "DatabaseThroughputExceeded"
    },
    "InvalidLobbyId": {
      "id": 1114,
      "name": "InvalidLobbyId"
    },
    "InvalidGameTicket": {
      "id": 1115,
      "name": "InvalidGameTicket"
    },
    "ExpiredGameTicket": {
      "id": 1116,
      "name": "ExpiredGameTicket"
    },
    "GameTicketDoesNotMatchLobby": {
      "id": 1117,
      "name": "GameTicketDoesNotMatchLobby"
    },
    "LinkedDeviceAlreadyClaimed": {
      "id": 1118,
      "name": "LinkedDeviceAlreadyClaimed"
    },
    "DeviceAlreadyLinked": {
      "id": 1119,
      "name": "DeviceAlreadyLinked"
    },
    "DeviceNotLinked": {
      "id": 1120,
      "name": "DeviceNotLinked"
    },
    "PartialFailure": {
      "id": 1121,
      "name": "PartialFailure"
    },
    "PublisherNotSet": {
      "id": 1122,
      "name": "PublisherNotSet"
    },
    "ServiceUnavailable": {
      "id": 1123,
      "name": "ServiceUnavailable"
    },
    "VersionNotFound": {
      "id": 1124,
      "name": "VersionNotFound"
    },
    "RevisionNotFound": {
      "id": 1125,
      "name": "RevisionNotFound"
    },
    "InvalidPublisherId": {
      "id": 1126,
      "name": "InvalidPublisherId"
    },
    "DownstreamServiceUnavailable": {
      "id": 1127,
      "name": "DownstreamServiceUnavailable"
    },
    "APINotIncludedInTitleUsageTier": {
      "id": 1128,
      "name": "APINotIncludedInTitleUsageTier"
    },
    "DAULimitExceeded": {
      "id": 1129,
      "name": "DAULimitExceeded"
    },
    "APIRequestLimitExceeded": {
      "id": 1130,
      "name": "APIRequestLimitExceeded"
    },
    "InvalidAPIEndpoint": {
      "id": 1131,
      "name": "InvalidAPIEndpoint"
    },
    "BuildNotAvailable": {
      "id": 1132,
      "name": "BuildNotAvailable"
    },
    "ConcurrentEditError": {
      "id": 1133,
      "name": "ConcurrentEditError"
    }
  },
  "errorList": [
    "Success",
    "InvalidParams",
    "AccountNotFound",
    "AccountBanned",
    "InvalidUsernameOrPassword",
    "InvalidTitleId",
    "InvalidEmailAddress",
    "EmailAddressNotAvailable",
    "InvalidUsername",
    "InvalidPassword",
    "UsernameNotAvailable",
    "InvalidSteamTicket",
    "AccountAlreadyLinked",
    "LinkedAccountAlreadyClaimed",
    "InvalidFacebookToken",
    "AccountNotLinked",
    "FailedByPaymentProvider",
    "CouponCodeNotFound",
    "InvalidContainerItem",
    "ContainerNotOwned",
    "KeyNotOwned",
    "InvalidItemIdInTable",
    "InvalidReceipt",
    "ReceiptAlreadyUsed",
    "ReceiptCancelled",
    "GameNotFound",
    "GameModeNotFound",
    "InvalidGoogleToken",
    "UserIsNotPartOfDeveloper",
    "InvalidTitleForDeveloper",
    "TitleNameConflicts",
    "UserisNotValid",
    "ValueAlreadyExists",
    "BuildNotFound",
    "PlayerNotInGame",
    "InvalidTicket",
    "InvalidDeveloper",
    "InvalidOrderInfo",
    "RegistrationIncomplete",
    "InvalidPlatform",
    "UnknownError",
    "SteamApplicationNotOwned",
    "WrongSteamAccount",
    "TitleNotActivated",
    "RegistrationSessionNotFound",
    "NoSuchMod",
    "FileNotFound",
    "DuplicateEmail",
    "ItemNotFound",
    "ItemNotOwned",
    "ItemNotRecycleable",
    "ItemNotAffordable",
    "InvalidVirtualCurrency",
    "WrongVirtualCurrency",
    "WrongPrice",
    "NonPositiveValue",
    "InvalidRegion",
    "RegionAtCapacity",
    "ServerFailedToStart",
    "NameNotAvailable",
    "InsufficientFunds",
    "InvalidDeviceID",
    "InvalidPushNotificationToken",
    "NoRemainingUses",
    "InvalidPaymentProvider",
    "PurchaseInitializationFailure",
    "DuplicateUsername",
    "InvalidBuyerInfo",
    "NoGameModeParamsSet",
    "BodyTooLarge",
    "ReservedWordInBody",
    "InvalidTypeInBody",
    "InvalidRequest",
    "ReservedEventName",
    "InvalidUserStatistics",
    "NotAuthenticated",
    "StreamAlreadyExists",
    "ErrorCreatingStream",
    "StreamNotFound",
    "InvalidAccount",
    "PurchaseDoesNotExist",
    "InvalidPurchaseTransactionStatus",
    "APINotEnabledForGameClientAccess",
    "NoPushNotificationARNForTitle",
    "BuildAlreadyExists",
    "BuildPackageDoesNotExist",
    "CustomAnalyticsEventsNotEnabledForTitle",
    "InvalidSharedGroupId",
    "NotAuthorized",
    "MissingTitleGoogleProperties",
    "InvalidItemProperties",
    "InvalidPSNAuthCode",
    "InvalidItemId",
    "PushNotEnabledForAccount",
    "PushServiceError",
    "ReceiptDoesNotContainInAppItems",
    "ReceiptContainsMultipleInAppItems",
    "InvalidBundleID",
    "JavascriptException",
    "InvalidSessionTicket",
    "UnableToConnectToDatabase",
    "InternalServerError",
    "InvalidReportDate",
    "ReportNotAvailable",
    "DatabaseThroughputExceeded",
    "InvalidLobbyId",
    "InvalidGameTicket",
    "ExpiredGameTicket",
    "GameTicketDoesNotMatchLobby",
    "LinkedDeviceAlreadyClaimed",
    "DeviceAlreadyLinked",
    "DeviceNotLinked",
    "PartialFailure",
    "PublisherNotSet",
    "ServiceUnavailable",
    "VersionNotFound",
    "RevisionNotFound",
    "InvalidPublisherId",
    "DownstreamServiceUnavailable",
    "APINotIncludedInTitleUsageTier",
    "DAULimitExceeded",
    "APIRequestLimitExceeded",
    "InvalidAPIEndpoint",
    "BuildNotAvailable",
    "ConcurrentEditError"
  ]
}