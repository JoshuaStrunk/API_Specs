{
  "name": "Client",
  "url": "/Client",
  "description": "User authentication, catalog, inventory, purchasing, player data and friends list APIs called by the game client running on the player's device.",
  "datatypes": {
    "RemoveFriendRequest": {
      "name": "RemoveFriendRequest",
      "properties": [
        {
          "name": "FriendPlayFabId",
          "description": "unique ID for friend player to remove tags on",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "RemoveFriendResult": {
      "name": "RemoveFriendResult",
      "properties": []
    },
    "SetFriendTagsRequest": {
      "name": "SetFriendTagsRequest",
      "properties": [
        {
          "name": "FriendPlayFabId",
          "description": "unique ID for friend player to set tags on",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Tags",
          "description": "array of tags to set on player",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "SetFriendTagsResult": {
      "name": "SetFriendTagsResult",
      "properties": []
    },
    "GetFriendsListRequest": {
      "name": "GetFriendsListRequest",
      "properties": [
        {
          "name": "IncludeSteamFriends",
          "description": "do we want to get steam friends at the same time?",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "GetFriendsListResult": {
      "name": "GetFriendsListResult",
      "properties": [
        {
          "name": "Friends",
          "description": "array of friends found",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "FriendInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "FriendInfo": {
      "name": "FriendInfo",
      "properties": [
        {
          "name": "FriendPlayFabId",
          "description": "unique ID for this player's userinfo",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Username",
          "description": "internal name for player account",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TitleDisplayName",
          "description": "user's title-specific display name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Tags",
          "description": "user generated tags associated with player",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CurrentMatchmakerLobbyId",
          "description": "unique lobby id of a game this player is currently inside",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FacebookInfo",
          "description": "facebook information (if we are friends through facebook)",
          "jsontype": "Object",
          "actualtype": "UserFacebookInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "SteamInfo",
          "description": "steam information (if we are friends through steam)",
          "jsontype": "Object",
          "actualtype": "UserSteamInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "GameCenterInfo",
          "description": "gamecenter information (is friends through gamecenter)",
          "jsontype": "Object",
          "actualtype": "UserGameCenterInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UserFacebookInfo": {
      "name": "UserFacebookInfo",
      "properties": [
        {
          "name": "FacebookId",
          "description": "facebook id",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FacebookUsername",
          "description": "facebook username",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FacebookDisplayname",
          "description": "facebook display name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserSteamInfo": {
      "name": "UserSteamInfo",
      "properties": [
        {
          "name": "SteamId",
          "description": "steam id",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SteamCountry",
          "description": "if account is linked to steam, this is the country that steam reports the player being in",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SteamCurrency",
          "description": "Currency set in the user's steam account",
          "jsontype": "String",
          "actualtype": "Currency",
          "isenum": true,
          "optional": true
        },
        {
          "name": "SteamActivationStatus",
          "description": "STEAM specific - what stage of game ownership is the user at with Steam",
          "jsontype": "String",
          "actualtype": "TitleActivationStatus",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "Currency": {
      "name": "Currency",
      "isenum": true,
      "enumvalues": [
        {
          "name": "USD"
        },
        {
          "name": "GBP"
        },
        {
          "name": "EUR"
        },
        {
          "name": "RUB"
        },
        {
          "name": "BRL"
        },
        {
          "name": "CIS"
        },
        {
          "name": "CAD"
        }
      ]
    },
    "TitleActivationStatus": {
      "name": "TitleActivationStatus",
      "isenum": true,
      "enumvalues": [
        {
          "name": "None"
        },
        {
          "name": "ActivatedTitleKey"
        },
        {
          "name": "PendingSteam"
        },
        {
          "name": "ActivatedSteam"
        },
        {
          "name": "RevokedSteam"
        }
      ]
    },
    "UserGameCenterInfo": {
      "name": "UserGameCenterInfo",
      "properties": [
        {
          "name": "GameCenterId",
          "description": "gamecenter id if account is linked",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UpdateEmailAddressRequest": {
      "name": "UpdateEmailAddressRequest",
      "properties": [
        {
          "name": "Email",
          "description": "is a validated email, used for account password recovery",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "UpdateEmailAddressResult": {
      "name": "UpdateEmailAddressResult",
      "properties": []
    },
    "UpdatePasswordRequest": {
      "name": "UpdatePasswordRequest",
      "properties": [
        {
          "name": "Password",
          "description": "is the 6-24 length string of the user entered password",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "UpdatePasswordResult": {
      "name": "UpdatePasswordResult",
      "properties": []
    },
    "LogEventRequest": {
      "name": "LogEventRequest",
      "properties": [
        {
          "name": "eventName",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Body",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "Object",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "Object": {
      "name": "Object",
      "properties": []
    },
    "LogEventResult": {
      "name": "LogEventResult",
      "properties": [
        {
          "name": "errors",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "LoginWithPlayFabRequest": {
      "name": "LoginWithPlayFabRequest",
      "properties": [
        {
          "name": "TitleId",
          "description": "is the specific game ID granted by PlayFab via the website, found on the end of the URL once you are logged in and looking at a specific game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Username",
          "description": "is the 3-24 length string of the user entered Username",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Password",
          "description": "is the 6-24 length string of the user entered password",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "LoginResult": {
      "name": "LoginResult",
      "properties": [
        {
          "name": "SessionTicket",
          "description": "the new session ID that most queries to Playfab will require. This identifies the player and game at the server level, ensuring data is placed in the right place in the Database for a specific game and player",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "LoginWithFacebookRequest": {
      "name": "LoginWithFacebookRequest",
      "properties": [
        {
          "name": "AccessToken",
          "description": "Facebook token generated by signing up app on Facebook website",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "TitleId",
          "description": "is the specific game ID granted by PlayFab via the website, found on the end of the URL once you are logged in and looking at a specific game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CreateAccount",
          "description": "automatically create an account if none is currenly linked to this facebook ID",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "LoginWithSteamRequest": {
      "name": "LoginWithSteamRequest",
      "properties": [
        {
          "name": "TitleId",
          "description": "is the specific game ID granted by PlayFab via the website, found on the end of the URL once you are logged in and looking at a specific game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "SteamTicket",
          "description": "is the ticket from Steam for the game as registered on that website",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CreateAccount",
          "description": "automatically create an account if none is currenly linked to this Steam ID",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "LoginWithIOSDeviceIDRequest": {
      "name": "LoginWithIOSDeviceIDRequest",
      "properties": [
        {
          "name": "DeviceId",
          "description": "is the IOS generated specific UUID of this particular device",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "TitleId",
          "description": "is the specific game ID granted by PlayFab via the website, found on the end of the URL once you are logged in and looking at a specific game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "OS",
          "description": "is the (optional) specific OS version the iDevice is running",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DeviceModel",
          "description": "is the (optional) actual device model string",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CreateAccount",
          "description": "automatically create an account if none is currenly linked to this IOS Device ID",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "LoginWithAndroidDeviceIDRequest": {
      "name": "LoginWithAndroidDeviceIDRequest",
      "properties": [
        {
          "name": "AndroidDeviceId",
          "description": "is the Android ID of this particular device",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "TitleId",
          "description": "is the specific game ID granted by PlayFab via the website, found on the end of the URL once you are logged in and looking at a specific game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "OS",
          "description": "is the (optional) specific OS version the Android Device is running",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "AndroidDevice",
          "description": "is the (optional) actual device model string",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CreateAccount",
          "description": "automatically create an account if none is currenly linked to this IOS Device ID",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "RegisterPlayFabUserRequest": {
      "name": "RegisterPlayFabUserRequest",
      "properties": [
        {
          "name": "TitleId",
          "description": "is the specific game ID granted by PlayFab via the website, found on the end of the URL once you are logged in and looking at a specific game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Username",
          "description": "is the 3-24 length string of the user entered Username",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Email",
          "description": "is a validated email, used for account password recovery",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Password",
          "description": "is the 6-24 length string of the user entered password",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Origination",
          "description": "is an optional string, indicating where this user came from (e.g. IOS Iphone, Android)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RegisterPlayFabUserResult": {
      "name": "RegisterPlayFabUserResult",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "unique ID for this new account",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SessionTicket",
          "description": "the new session ID that most queries to Playfab will require. This identifies the player and game at the server level, ensuring data is placed in the right place in the Database for a specific game and player",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Username",
          "description": "account name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "description": "game display name (same as Username on initial registration)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "LinkSteamAccountRequest": {
      "name": "LinkSteamAccountRequest",
      "properties": [
        {
          "name": "SteamTicket",
          "description": "is the ticket from Steam for the game as registered on that website",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "LinkSteamAccountResult": {
      "name": "LinkSteamAccountResult",
      "properties": []
    },
    "UnlinkSteamAccountResult": {
      "name": "UnlinkSteamAccountResult",
      "properties": []
    },
    "LinkFacebookAccountRequest": {
      "name": "LinkFacebookAccountRequest",
      "properties": [
        {
          "name": "AccessToken",
          "description": "Facebook token generated by signing up app on Facebook website",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "LinkFacebookAccountResult": {
      "name": "LinkFacebookAccountResult",
      "properties": []
    },
    "UnlinkFacebookAccountRequest": {
      "name": "UnlinkFacebookAccountRequest",
      "properties": []
    },
    "UnlinkFacebookAccountResult": {
      "name": "UnlinkFacebookAccountResult",
      "properties": []
    },
    "LinkGameCenterAccountRequest": {
      "name": "LinkGameCenterAccountRequest",
      "properties": [
        {
          "name": "GameCenterId",
          "description": "GameCenter game id from defining game in Itunes Connect",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "LinkGameCenterAccountResult": {
      "name": "LinkGameCenterAccountResult",
      "properties": []
    },
    "UnlinkGameCenterAccountRequest": {
      "name": "UnlinkGameCenterAccountRequest",
      "properties": []
    },
    "UnlinkGameCenterAccountResult": {
      "name": "UnlinkGameCenterAccountResult",
      "properties": []
    },
    "GetAccountInfoRequest": {
      "name": "GetAccountInfoRequest",
      "properties": []
    },
    "GetAccountInfoResult": {
      "name": "GetAccountInfoResult",
      "properties": [
        {
          "name": "AccountInfo",
          "description": "User account info for the player's account",
          "jsontype": "Object",
          "actualtype": "UserAccountInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UserAccountInfo": {
      "name": "UserAccountInfo",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "unique id for account",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Created",
          "description": "time / date account was created",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "Username",
          "description": "account name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TitleInfo",
          "description": "specific game title information",
          "jsontype": "Object",
          "actualtype": "UserTitleInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "PrivateInfo",
          "description": "user's private account into",
          "jsontype": "Object",
          "actualtype": "UserPrivateAccountInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "FacebookInfo",
          "description": "facebook information (if linked)",
          "jsontype": "Object",
          "actualtype": "UserFacebookInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "SteamInfo",
          "description": "steam information (if linked)",
          "jsontype": "Object",
          "actualtype": "UserSteamInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "GameCenterInfo",
          "description": "gamecenter information (if linked)",
          "jsontype": "Object",
          "actualtype": "UserGameCenterInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UserTitleInfo": {
      "name": "UserTitleInfo",
      "properties": [
        {
          "name": "DisplayName",
          "description": "displayable game name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Origination",
          "description": "optional value that details where the user originated",
          "jsontype": "String",
          "actualtype": "UserOrigination",
          "isenum": true,
          "optional": true
        },
        {
          "name": "Created",
          "description": "When this object was created. Title specific reporting for user creation time should be done against this rather than the User created field since account creation can differ significantly between title registration.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "LastLogin",
          "description": "Last time the user logged in to this title",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "FirstLogin",
          "description": " Time the user first logged in. This can be different from when the UTD was created. For example we create a UTD when issuing a beta key. An arbitrary amount of time can pass before the user actually logs in.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        }
      ]
    },
    "UserOrigination": {
      "name": "UserOrigination",
      "isenum": true,
      "enumvalues": [
        {
          "name": "Organic"
        },
        {
          "name": "Steam"
        },
        {
          "name": "Google"
        },
        {
          "name": "Amazon"
        },
        {
          "name": "Facebook"
        },
        {
          "name": "Kongregate"
        },
        {
          "name": "GamersFirst"
        },
        {
          "name": "Unknown"
        },
        {
          "name": "IOS"
        },
        {
          "name": "LoadTest"
        },
        {
          "name": "Android"
        }
      ]
    },
    "UserPrivateAccountInfo": {
      "name": "UserPrivateAccountInfo",
      "properties": [
        {
          "name": "Email",
          "description": "Email address",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetUserInventoryRequest": {
      "name": "GetUserInventoryRequest",
      "properties": []
    },
    "GetUserInventoryResult": {
      "name": "GetUserInventoryResult",
      "properties": [
        {
          "name": "Inventory",
          "description": "array of items in the players inventory",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        },
        {
          "name": "VirtualCurrency",
          "description": "array of amounts of virtual currency the player currently has",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "ItemInstance": {
      "name": "ItemInstance",
      "properties": [
        {
          "name": "ItemId",
          "description": "Object name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemInstanceId",
          "description": "unique item id",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemClass",
          "description": "class name object belongs to",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PurchaseDate",
          "description": "date purchased",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Expiration",
          "description": "date object will expire (optional)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "RemainingUses",
          "description": "number of remaining uses (optional)",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "Annotation",
          "description": "game specific comment",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CatalogVersion",
          "description": "catalog version that this item is part of",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundleParent",
          "description": "Unique ID of the parent of where this item may have come from (e.g. if it comes from a crate or coupon)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetCatalogItemsRequest": {
      "name": "GetCatalogItemsRequest",
      "properties": [
        {
          "name": "CatalogVersion",
          "description": "catalog version to work against",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetCatalogItemsResult": {
      "name": "GetCatalogItemsResult",
      "properties": [
        {
          "name": "Catalog",
          "description": "array of objects purchased",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CatalogItem": {
      "name": "CatalogItem",
      "properties": [
        {
          "name": "ItemId",
          "description": "internal item name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ItemClass",
          "description": "class name to which item belongs",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CatalogVersion",
          "description": "catalog item we are working against",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "description": "displayable item name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Description",
          "description": "text description of item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrencyPrices",
          "description": "Price of this object in virtual currencies",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "RealCurrencyPrices",
          "description": "Price of this object in real money currencies",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "ReleaseDate",
          "description": "if this object was dropped, when it was dropped (optional)",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "ExpirationDate",
          "description": "date this object will no longer be viable (optional)",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "IsFree",
          "description": "is this a free object?",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "NotForSale",
          "description": "can we buy this object (might be only gettable by being dropped by a monster)",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "NotForTrade",
          "description": "can we pass this object to someone else?",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "Tags",
          "description": "List of item tags",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomData",
          "description": "Game specific custom data field (could be json, xml, etc)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GrantedIfPlayerHas",
          "description": "array of unique item Id's that, if the player already has, will automatically place this item in a players inventory",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Consumable",
          "description": "If set, makes this item consumable and sets consumable properties",
          "jsontype": "Object",
          "actualtype": "CatalogItemConsumableInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Container",
          "description": "If set, makes this item a container and sets container properties",
          "jsontype": "Object",
          "actualtype": "CatalogItemContainerInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Bundle",
          "description": "If set, makes this item a bundle and sets bundle properties",
          "jsontype": "Object",
          "actualtype": "CatalogItemBundleInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CatalogItemConsumableInfo": {
      "name": "CatalogItemConsumableInfo",
      "properties": [
        {
          "name": "UsageCount",
          "description": "number of times this object can be used",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "UsagePeriod",
          "description": "duration of how long this item is viable after player aqquires it (in seconds) (optional)",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "UsagePeriodGroup",
          "description": "All items that have the same value in this string get their expiration dates added together.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CatalogItemContainerInfo": {
      "name": "CatalogItemContainerInfo",
      "properties": [
        {
          "name": "KeyItemId",
          "description": "unique item id that, if in posession, the object unlocks and provides the player with content items",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemContents",
          "description": "array of Unique item id's that this item will grant you once you have opened it",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ResultTableContents",
          "description": "array of result table id's that this item will reference and randomly create items from",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrencyContents",
          "description": "Virtual currencies contained in this item",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "CatalogItemBundleInfo": {
      "name": "CatalogItemBundleInfo",
      "properties": [
        {
          "name": "BundledItems",
          "description": "array of Unique item id's that this item will grant you once you have this item in your inventory",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundledResultTables",
          "description": "array of result table id's that this item will reference and randomly create items from",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundledVirtualCurrencies",
          "description": "Virtual currencies contained in this item",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "StartPurchaseRequest": {
      "name": "StartPurchaseRequest",
      "properties": [
        {
          "name": "CatalogVersion",
          "description": "Catalog version to work against",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Items",
          "description": "List of items to purchase",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ItemPuchaseRequest",
          "isclass": true,
          "optional": false
        }
      ]
    },
    "ItemPuchaseRequest": {
      "name": "ItemPuchaseRequest",
      "properties": [
        {
          "name": "ItemId",
          "description": "ItemId of the item to purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Quantity",
          "description": "How many to buy",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "Annotation",
          "description": "Annotation text about this purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "UpgradeFromItems",
          "description": "What items to upgrade",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "StartPurchaseResult": {
      "name": "StartPurchaseResult",
      "properties": [
        {
          "name": "OrderId",
          "description": "purchase order id",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Contents",
          "description": "cart items to be purchased",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CartItem",
          "isclass": true,
          "optional": true
        },
        {
          "name": "PaymentOptions",
          "description": "options for purchase - what ways the user can pay",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PaymentOption",
          "isclass": true,
          "optional": true
        },
        {
          "name": "VirtualCurrencyBalances",
          "description": "Current status of account virtual currencies",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "CartItem": {
      "name": "CartItem",
      "properties": [
        {
          "name": "ItemId",
          "description": "internal object name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemClass",
          "description": "class name to which purchase object belongs",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemInstanceId",
          "description": "unique instance id of this object instance",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "description": "displayable name for purchase object",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Description",
          "description": "description of purchased object",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrencyPrices",
          "description": "dictionary object of key / value pairs, of cost of the object in virtual currency",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "RealCurrencyPrices",
          "description": "dictionary object of key / value pairs, of cost of the object in real world currency",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "VCAmount",
          "description": ">List of virtual currency amounts you will recieve by purchasing this item",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "PaymentOption": {
      "name": "PaymentOption",
      "properties": [
        {
          "name": "Currency",
          "description": "currency type",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ProviderName",
          "description": "name of entity that is doing the billing",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Price",
          "description": "Price paid",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "StoreCredit",
          "description": "Credit towards this purchase",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        }
      ]
    },
    "PayForPurchaseRequest": {
      "name": "PayForPurchaseRequest",
      "properties": [
        {
          "name": "OrderId",
          "description": "OrderId of the order created by StartPurchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ProviderName",
          "description": "Name of the purchase provider to use to fund the purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Currency",
          "description": "Currency to use to fund the purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "PayForPurchaseResult": {
      "name": "PayForPurchaseResult",
      "properties": [
        {
          "name": "Purchase",
          "description": "Purchase Data values",
          "jsontype": "Object",
          "actualtype": "PurchaseData",
          "isclass": true,
          "optional": true
        },
        {
          "name": "PurchaseConfirmationPageURL",
          "description": "url to the purchase provider page that details the purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrency",
          "description": "current account state of virtual currency balances",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "PurchaseData": {
      "name": "PurchaseData",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "unique purchaseable item id",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "OrderId",
          "description": "unique order id",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Status",
          "description": "status of transactions",
          "jsontype": "String",
          "actualtype": "TransactionStatus",
          "isenum": true,
          "optional": true
        },
        {
          "name": "VCAmount",
          "description": "virtual currency cost of transaction (optional)",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "PurchaseCurrency",
          "description": "real world currency for transaction (optional)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PurchasePrice",
          "description": "real world cost of transaction (optional)",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "CreditApplied",
          "description": "local credit applied to transaction, that is the provider specific",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "ProviderData",
          "description": "provider being used by transaction (optional)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "TransactionStatus": {
      "name": "TransactionStatus",
      "isenum": true,
      "enumvalues": [
        {
          "name": "CreateCart"
        },
        {
          "name": "Init"
        },
        {
          "name": "Approved"
        },
        {
          "name": "Succeeded"
        },
        {
          "name": "FailedByProvider"
        },
        {
          "name": "RefundPending"
        },
        {
          "name": "Refunded"
        },
        {
          "name": "RefundFailed"
        },
        {
          "name": "ChargedBack"
        },
        {
          "name": "FailedByUber"
        },
        {
          "name": "Revoked"
        },
        {
          "name": "TradePending"
        },
        {
          "name": "Upgraded"
        },
        {
          "name": "Other"
        },
        {
          "name": "Failed"
        }
      ]
    },
    "ConfirmPurchaseRequest": {
      "name": "ConfirmPurchaseRequest",
      "properties": [
        {
          "name": "OrderId",
          "description": "unique id for the order we are interested in",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "ConfirmPurchaseResult": {
      "name": "ConfirmPurchaseResult",
      "properties": [
        {
          "name": "OrderId",
          "description": "uinque purchase id",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PurchaseDate",
          "description": "time / date of purchase",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "Items",
          "description": "array of items purchased",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PurchasedItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "PurchasedItem": {
      "name": "PurchasedItem",
      "properties": [
        {
          "name": "ItemInstanceId",
          "description": "unique id for individual item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "item internal name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CatalogVersion",
          "description": "catalog version we are working against",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "description": "item displayable name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "UnitCurrency",
          "description": "currency type",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "UnitPrice",
          "description": "cost in unit currency type",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "BundleContents",
          "description": "array of unique item Id's that were awarded when this item was purchased",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RedeemCouponRequest": {
      "name": "RedeemCouponRequest",
      "properties": [
        {
          "name": "CouponCode",
          "description": "name of coupon to redeem",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CatalogVersion",
          "description": "catalog version to work against",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RedeemCouponResult": {
      "name": "RedeemCouponResult",
      "properties": [
        {
          "name": "GrantedItems",
          "description": "array of items granted to the player by redeeming the coupon",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UnlockContainerItemRequest": {
      "name": "UnlockContainerItemRequest",
      "properties": [
        {
          "name": "CrateItemId",
          "description": "name of crate to unlock",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CatalogVersion",
          "description": "version of catalog to work against",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UnlockContainerItemResult": {
      "name": "UnlockContainerItemResult",
      "properties": [
        {
          "name": "UnlockedItem",
          "description": "name of crate unlocked",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GrantedItems",
          "description": "array of items that have been granted the player by unlocking the crate",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "SendAccountRecoveryEmailRequest": {
      "name": "SendAccountRecoveryEmailRequest",
      "properties": [
        {
          "name": "Email",
          "description": "is a validated email, used for account password recovery",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "TitleId",
          "description": "is the specific game ID granted by PlayFab via the website, found on the end of the URL once you are logged in and looking at a specific game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "SendAccountRecoveryEmailResult": {
      "name": "SendAccountRecoveryEmailResult",
      "properties": []
    },
    "GetTitleNewsRequest": {
      "name": "GetTitleNewsRequest",
      "properties": [
        {
          "name": "Count",
          "description": "is the optional value that limits the return to the last n entries, defaults to 10 if not set",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "GetTitleNewsResult": {
      "name": "GetTitleNewsResult",
      "properties": [
        {
          "name": "News",
          "description": "is the array of actual news items returned",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "TitleNewsItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "TitleNewsItem": {
      "name": "TitleNewsItem",
      "properties": [
        {
          "name": "Timestamp",
          "description": "time / date of when news items was posted",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "Title",
          "description": "title of news item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Body",
          "description": "news text",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetTitleDataRequest": {
      "name": "GetTitleDataRequest",
      "properties": [
        {
          "name": "Keys",
          "description": " array of keys to get back data from the TitleData data blob, set by the admin tools",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetTitleDataResult": {
      "name": "GetTitleDataResult",
      "properties": [
        {
          "name": "Data",
          "description": "a dictionary object of key / value pairs",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetUserDataRequest": {
      "name": "GetUserDataRequest",
      "properties": [
        {
          "name": "Keys",
          "description": "Specific keys to get data for in data blob",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetUserDataResult": {
      "name": "GetUserDataResult",
      "properties": [
        {
          "name": "Data",
          "description": "user defined dictionary object containing user specific data for this game",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UpdateUserDataRequest": {
      "name": "UpdateUserDataRequest",
      "properties": [
        {
          "name": "Data",
          "description": "dictionary data blob to be updated",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UpdateUserDataResult": {
      "name": "UpdateUserDataResult",
      "properties": []
    },
    "UpdateUserTitleDisplayNameRequest": {
      "name": "UpdateUserTitleDisplayNameRequest",
      "properties": [
        {
          "name": "DisplayName",
          "description": "new display name to change to - limit of 25 chars",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "UpdateUserTitleDisplayNameResult": {
      "name": "UpdateUserTitleDisplayNameResult",
      "properties": [
        {
          "name": "DisplayName",
          "description": "newly updated display name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RegisterForIOSPushNotificationRequest": {
      "name": "RegisterForIOSPushNotificationRequest",
      "properties": [
        {
          "name": "DeviceToken",
          "description": "is the specific token generated by IOS when the app is signed up for Push Notifications, at run time",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "RegisterForIOSPushNotificationResult": {
      "name": "RegisterForIOSPushNotificationResult",
      "properties": []
    },
    "AndroidDevicePushNotificationRegistrationRequest": {
      "name": "AndroidDevicePushNotificationRegistrationRequest",
      "properties": [
        {
          "name": "DeviceToken",
          "description": "is the specific token generated by IOS when the app is signed up for Push Notifications, at run time",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "AndroidDevicePushNotificationRegistrationResult": {
      "name": "AndroidDevicePushNotificationRegistrationResult",
      "properties": []
    },
    "ValidateIOSReceiptRequest": {
      "name": "ValidateIOSReceiptRequest",
      "properties": [
        {
          "name": "ReceiptData",
          "description": "this is the value passed back by the IOS purchase IAP system, once a purchase is completed",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CurrencyCode",
          "description": "currency used for purchase",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ObjectName",
          "description": "Name of object purchased",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PurchasePrice",
          "description": "price object was purchased for",
          "jsontype": "Number",
          "actualtype": "decimal",
          "optional": false
        }
      ]
    },
    "ValidateIOSReceiptResult": {
      "name": "ValidateIOSReceiptResult",
      "properties": []
    },
    "LoginWithGoogleAccountRequest": {
      "name": "LoginWithGoogleAccountRequest",
      "properties": [
        {
          "name": "TitleId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "AccessToken",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "ValidateGooglePlayPurchaseRequest": {
      "name": "ValidateGooglePlayPurchaseRequest",
      "properties": [
        {
          "name": "packageName",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "productId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "purchaseToken",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "accessToken",
          "description": "This is given to you using OAuth 2.0. Putting a value here if you have not gone through the OAuth Flow will result in Error codes",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ValidateGooglePlayPurchaseResult": {
      "name": "ValidateGooglePlayPurchaseResult",
      "properties": [
        {
          "name": "kind",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "purchaseTime",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "puchaseState",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "consumptionState",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "developerPayload",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "AddFriendRequest": {
      "name": "AddFriendRequest",
      "properties": [
        {
          "name": "FriendPlayFabId",
          "description": "PlayFabId for friend player to add tag to",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FriendUsername",
          "description": "Username to lookup if the caller doesn't have a PlayFabId",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FriendEmail",
          "description": "Email to lookup if the caller doesn't have a username",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FriendTitleDisplayName",
          "description": "Friend display name to lookup if the caller doesn't have an email",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "AddFriendResult": {
      "name": "AddFriendResult",
      "properties": [
        {
          "name": "Created",
          "description": "is a value that reports if the tag was created ok",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "StartGameRequest": {
      "name": "StartGameRequest",
      "properties": [
        {
          "name": "BuildVersion",
          "description": "which uploaded build of the game server we are starting up",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Region",
          "description": "the region we want to associate this server with for filtering servers",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": false
        },
        {
          "name": "GameMode",
          "description": "which user defined game mode this server is going to be running (e.g. Capture The Flag = 0, Deathmatch = 1) - default to 0 if there is only one mode",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PasswordRestricted",
          "description": "Is there a password associated with this server?",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "ReplayLobbyId",
          "description": "Lobby Id that the user came from from within the match maker service",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "Region": {
      "name": "Region",
      "isenum": true,
      "enumvalues": [
        {
          "name": "USWest"
        },
        {
          "name": "USCentral"
        },
        {
          "name": "USEast"
        },
        {
          "name": "EUWest"
        },
        {
          "name": "APSouthEast"
        },
        {
          "name": "APNorthEast"
        },
        {
          "name": "SAEast"
        },
        {
          "name": "Australia"
        },
        {
          "name": "China"
        },
        {
          "name": "UberLan"
        }
      ]
    },
    "StartGameResult": {
      "name": "StartGameResult",
      "properties": [
        {
          "name": "LobbyID",
          "description": "unique ID for the lobby of the server started.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ServerHostname",
          "description": "server IP address.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ServerPort",
          "description": "port on server used for communication",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "Ticket",
          "description": "unique ID for this server used in certain API calls",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Expires",
          "description": "expiration date, if appropriate",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Password",
          "description": "password to log in with",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "MatchmakeRequest": {
      "name": "MatchmakeRequest",
      "properties": [
        {
          "name": "BuildVersion",
          "description": "build version we want to match make against",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Region",
          "description": "region we want to match make against",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": true
        },
        {
          "name": "GameMode",
          "description": "game mode we want to match make against",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "LobbyId",
          "description": "lobby ID we want to match make against (i.e. selecting a specific server)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "EnableQueue",
          "description": "if specified match specified is full, allow the user to wait in a queue to join. NOTE - only valid if LobbyId is specified",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "MatchmakeResult": {
      "name": "MatchmakeResult",
      "properties": [
        {
          "name": "LobbyID",
          "description": "unique lobby id of server we made a match against",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ServerHostname",
          "description": "server IP address we made a match against",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ServerPort",
          "description": "port number server communicates on",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "WebSocketPort",
          "description": "if server uses http connection protocols, this is the port it uses",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "Ticket",
          "description": "server authorisation ticket - used by RedeemCoupon to validate user insertion into the game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Expires",
          "description": "time/date the server expires on",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PollWaitTimeMS",
          "description": "UNKNOWN - unused in code",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "Status",
          "description": "result of match making process",
          "jsontype": "String",
          "actualtype": "MatchmakeStatus",
          "isenum": true,
          "optional": true
        },
        {
          "name": "Queue",
          "description": "queue of unique user Id's of players waiting to join this game. This user will be at the end of this list.",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "MatchmakeStatus": {
      "name": "MatchmakeStatus",
      "isenum": true,
      "enumvalues": [
        {
          "name": "Complete"
        },
        {
          "name": "Waiting"
        },
        {
          "name": "GameNotFound"
        }
      ]
    },
    "CurrentGamesRequest": {
      "name": "CurrentGamesRequest",
      "properties": [
        {
          "name": "Region",
          "description": "region we are interested in",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": true
        },
        {
          "name": "BuildVersion",
          "description": "version of build we want to get stats for",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "IncludeState",
          "description": "filter on value of game server instance - running, ended, waiting for players etc.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CurrentGamesResult": {
      "name": "CurrentGamesResult",
      "properties": [
        {
          "name": "Games",
          "description": "array of games the system found",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "GameInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "PlayerCount",
          "description": "total number of players across all servers",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "GameCount",
          "description": "number of games running",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "IncompleteResult",
          "description": "indicates there are some servers it could not get a response for",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "GameInfo": {
      "name": "GameInfo",
      "properties": [
        {
          "name": "Region",
          "description": "region this server is part of",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": true
        },
        {
          "name": "LobbyID",
          "description": "unique lobby id for this game server",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BuildVersion",
          "description": "build version this server is running",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GameMode",
          "description": "game mode this server is running",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Map",
          "description": "level name this server is running (if appropriate)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "MaxPlayers",
          "description": "maximum players this server can support",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "PlayerUsernames",
          "description": "array of strings of current player names on this server (note, these are usernames, which means they are account names, not display names)",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "RunTime",
          "description": "duration this server has been running (in seconds)",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "GameServerState",
          "description": "game specific string denoting server configuration",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TitleData",
          "description": "unique client provided string - passed in at start game request - that details user defined specifics about this game server instance",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GameServerRegionsRequest": {
      "name": "GameServerRegionsRequest",
      "properties": [
        {
          "name": "BuildVersion",
          "description": "version of build we want to get stats for",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "TitleId",
          "description": "is the specific game ID granted by PlayFab via the website, found on the end of the URL once you are logged in and looking at a specific game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GameServerRegionsResult": {
      "name": "GameServerRegionsResult",
      "properties": [
        {
          "name": "Regions",
          "description": "array of regions found matching the request parameters",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "RegionInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "RegionInfo": {
      "name": "RegionInfo",
      "properties": [
        {
          "name": "Region",
          "description": "region we refer to",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": true
        },
        {
          "name": "Name",
          "description": "name of region",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Available",
          "description": "is this region available for usage (e.g. adding a server, or adding players)",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "PingUrl",
          "description": "url to ping to get rountrip time",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GameCount",
          "description": "number of games / servers running on this region",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "GamePlayersCount",
          "description": "number of players in this region",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "GameModes",
          "description": "list of game modes being supported by servers in this region",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "GameModeInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GameModeInfo": {
      "name": "GameModeInfo",
      "properties": [
        {
          "name": "GameMode",
          "description": "mode game server is running in - defaults to 0 if there is only one mode",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GameCount",
          "description": "number of game servers running",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "GamePlayersCount",
          "description": "number of plaer",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        }
      ]
    },
    "RegionPlaylistsRequest": {
      "name": "RegionPlaylistsRequest",
      "properties": [
        {
          "name": "BuildVersion",
          "description": "version of build we want to get stats for",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Region",
          "description": "region we are interested in",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": false
        },
        {
          "name": "TitleId",
          "description": "is the specific game ID granted by PlayFab via the website, found on the end of the URL once you are logged in and looking at a specific game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RegionPlaylistsResult": {
      "name": "RegionPlaylistsResult",
      "properties": [
        {
          "name": "Playlists",
          "description": "array of games in regions found matching the request parameters",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PlaylistInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "PlaylistInfo": {
      "name": "PlaylistInfo",
      "properties": [
        {
          "name": "PlaylistId",
          "description": "unique id of a playlist",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GameCount",
          "description": "number of games running on this region",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "GamePlayersCount",
          "description": "number of players inside this region",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        }
      ]
    }
  },
  "calls": [
    {
      "name": "LoginWithAndroidDeviceID",
      "summary": "Login with the device identifier for a user's linked Android device. ",
      "requestDetails": "This API call is provided to allow developers of single player experiences on IOS to handle 'instant logon' of users that don't have to fill out a full account at Playfab. This enables the user to log in, and be able to use some of Playfabs API's, but will remain totally anonymous. They cannot be match maked, and there is no way for CSR tools to find them, nor can whatever is earned be shared across devices. They can, however, have a password and email and username associated with them later, so the player doesn't lose any earned rewards. On first logon, the Playfab system creates an account using the DeviceID as a key, and then subsequently they login against the account with Device ID as the key.",
      "subgroup": "Authentication",
      "url": "/Client/LoginWithAndroidDeviceID",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithAndroidDeviceIDRequest",
      "result": "LoginResult",
      "seeAlso": [
        "LoginWithIOSDeviceID"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "AccountNotFound",
        "AccountBanned"
      ]
    },
    {
      "name": "LoginWithFacebook",
      "summary": "Login with the Facebook access token for a user's linked Facebook account",
      "requestDetails": "Note 1 - if this is the first time a user has logged in with the facebook account, it will generate a new account and then tie it to the Facebook ID. This means there is no email or username associated with this new account.",
      "subgroup": "Authentication",
      "url": "/Client/LoginWithFacebook",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithFacebookRequest",
      "result": "LoginResult",
      "seeAlso": [
        "LinkFacebookAccount",
        "UnlinkFacebookAccount"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "InvalidFacebookToken",
        "AccountNotFound",
        "AccountBanned"
      ]
    },
    {
      "name": "LoginWithGoogleAccount",
      "summary": "Login with a Google account access token",
      "subgroup": "Authentication",
      "url": "/Client/LoginWithGoogleAccount",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithGoogleAccountRequest",
      "result": "LoginResult",
      "errors": [
        "InvalidParams",
        "InvalidGoogleToken",
        "AccountBanned"
      ]
    },
    {
      "name": "LoginWithIOSDeviceID",
      "summary": "Login with the device identifier for a user's linked iOS device ",
      "requestDetails": "This API call is provided to allow developers of single player experiences on IOS to handle 'instant logon' of users that don't have to fill out a full account at Playfab. This enables the user to log in, and be able to use some of Playfabs API's, but will remain totally anonymous. They cannot be match maked, and there is no way for CSR tools to find them, nor can whatever is earned be shared across devices. They can, however, have a password and email and username associated with them later, so the player doesn't lose any earned rewards. On first logon, the Playfab system creates an account using the DeviceID as a key, and then subsequently they login against the account with Device ID as the key.",
      "subgroup": "Authentication",
      "url": "/Client/LoginWithIOSDeviceID",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithIOSDeviceIDRequest",
      "result": "LoginResult",
      "seeAlso": [
        "LoginWithAndroidDeviceID"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "AccountNotFound",
        "AccountBanned"
      ]
    },
    {
      "name": "LoginWithPlayFab",
      "summary": "Login (and generate a new session ID) with a user's username and password, where the server will verify this incoming data.",
      "requestDetails": "Note 1 - the server will do verification on the Username and Password to ensure that they are within the ranges detailed in the field definition. If they are not, an error will be reported.",
      "subgroup": "Authentication",
      "url": "/Client/LoginWithPlayFab",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithPlayFabRequest",
      "result": "LoginResult",
      "seeAlso": [
        "RegisterPlayFabUser"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "AccountNotFound",
        "AccountBanned",
        "InvalidUsernameOrPassword"
      ]
    },
    {
      "name": "LoginWithSteam",
      "summary": "Login with the Steam authentication ticket for a user's linked Steam account",
      "requestDetails": "This allows the user to login directly using a steam ID instead of the usual Playfab account information. If the account is linked to a Full Playfab Account, the system logins in with that instead.",
      "subgroup": "Authentication",
      "url": "/Client/LoginWithSteam",
      "auth": "None",
      "method": "POST",
      "request": "LoginWithSteamRequest",
      "result": "LoginResult",
      "seeAlso": [
        "LinkSteamAccount",
        "UnlinkSteamAccount"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "InvalidSteamTicket",
        "AccountNotFound",
        "AccountBanned"
      ]
    },
    {
      "name": "RegisterPlayFabUser",
      "summary": "Register a new full Playfab User Account",
      "resultDetails": "Note 1 - on success, the new player is also deemed logged in - so a SessionID is supplied Note 2 - Accounts can only be associated with one email address. Once that email address is used, it is now invalid for new accounts. Once the account is created, it's possible to associate it with a Steam ID, a Facebook ID and a game Center account, allowing for larger friends lists and achievements to be posted directly to those systems.",
      "subgroup": "Authentication",
      "url": "/Client/RegisterPlayFabUser",
      "auth": "None",
      "method": "POST",
      "request": "RegisterPlayFabUserRequest",
      "result": "RegisterPlayFabUserResult",
      "seeAlso": [
        "LoginWithPlayFab"
      ],
      "errors": [
        "InvalidParams",
        "InvalidTitleId",
        "EmailAddressNotAvailable",
        "InvalidEmailAddress",
        "UsernameNotAvailable",
        "InvalidUsername",
        "InvalidPassword"
      ]
    },
    {
      "name": "SendAccountRecoveryEmail",
      "summary": "Force server to send an email to the registered email address on the account with a link so they can change the password.",
      "requestDetails": "Note - if the account used is a temporary account (e.g. one that was generated via LoginFromIOSDeviceID), this function will have no effect; it only works against full playfab accounts",
      "subgroup": "Authentication",
      "url": "/Client/SendAccountRecoveryEmail",
      "auth": "None",
      "method": "POST",
      "request": "SendAccountRecoveryEmailRequest",
      "result": "SendAccountRecoveryEmailResult",
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "GetAccountInfo",
      "summary": "Get the user's profile details at the Playfab Account level.",
      "requestDetails": "This API call returns data that is at the Account level in Playfab, ie data that is the same for all possible games this user may be associated wiht. There is nothing game specific in the data returned.",
      "resultDetails": "NOTE - the display name here is auto populated with the account name, but can be overriden later.  E.g. a player can set up an account with the name User20943845 but then put in a displayname of 'Killer Tomatoes', which is what all games should display. The display name can further be overriden by game specific names the user may want to set up.",
      "subgroup": "Account Management",
      "url": "/Client/GetAccountInfo",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetAccountInfoRequest",
      "result": "GetAccountInfoResult"
    },
    {
      "name": "LinkFacebookAccount",
      "summary": "Link the Facebook account associated with a Facebook access token to the user's account",
      "subgroup": "Account Management",
      "url": "/Client/LinkFacebookAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LinkFacebookAccountRequest",
      "result": "LinkFacebookAccountResult",
      "seeAlso": [
        "UnlinkFacebookAccount",
        "LoginWithFacebook"
      ],
      "errors": [
        "InvalidParams",
        "InvalidFacebookToken",
        "LinkedAccountAlreadyClaimed",
        "AccountAlreadyLinked"
      ]
    },
    {
      "name": "LinkGameCenterAccount",
      "summary": "Link a GameCenter account to the user's account",
      "subgroup": "Account Management",
      "url": "/Client/LinkGameCenterAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LinkGameCenterAccountRequest",
      "result": "LinkGameCenterAccountResult",
      "seeAlso": [
        "UnlinkGameCenterAccount"
      ],
      "errors": [
        "InvalidParams",
        "LinkedAccountAlreadyClaimed",
        "AccountAlreadyLinked"
      ]
    },
    {
      "name": "LinkSteamAccount",
      "summary": "Link the Steam account associated with a Steam authentication ticket to the user's account",
      "subgroup": "Account Management",
      "url": "/Client/LinkSteamAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LinkSteamAccountRequest",
      "result": "LinkSteamAccountResult",
      "seeAlso": [
        "UnlinkSteamAccount",
        "LoginWithSteam"
      ],
      "errors": [
        "InvalidParams",
        "InvalidSteamTicket",
        "LinkedAccountAlreadyClaimed",
        "AccountAlreadyLinked"
      ]
    },
    {
      "name": "UnlinkFacebookAccount",
      "summary": "Unlink the user's linked Facebook account",
      "subgroup": "Account Management",
      "url": "/Client/UnlinkFacebookAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UnlinkFacebookAccountRequest",
      "result": "UnlinkFacebookAccountResult",
      "seeAlso": [
        "LinkFacebookAccount"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotLinked"
      ]
    },
    {
      "name": "UnlinkGameCenterAccount",
      "summary": "Unlink the user's linked GameCenter account",
      "subgroup": "Account Management",
      "url": "/Client/UnlinkGameCenterAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UnlinkGameCenterAccountRequest",
      "result": "UnlinkGameCenterAccountResult",
      "seeAlso": [
        "LinkGameCenterAccount"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotLinked"
      ]
    },
    {
      "name": "UnlinkSteamAccount",
      "summary": "Unlink the user's linked Steam account",
      "subgroup": "Account Management",
      "url": "/Client/UnlinkSteamAccount",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LinkSteamAccountRequest",
      "result": "UnlinkSteamAccountResult",
      "seeAlso": [
        "LinkSteamAccount"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotLinked"
      ]
    },
    {
      "name": "UpdateEmailAddress",
      "summary": "Update User Email Address",
      "requestDetails": "NOTE - this email is validated for parameter correctness, but no attempt is made on the server to actually validate the Email address at this time as being real.",
      "subgroup": "Account Management",
      "url": "/Client/UpdateEmailAddress",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UpdateEmailAddressRequest",
      "result": "UpdateEmailAddressResult",
      "errors": [
        "InvalidParams",
        "EmailAddressNotAvailable"
      ]
    },
    {
      "name": "UpdatePassword",
      "summary": "Update User Password",
      "requestDetails": "NOTE - this is required to be between 6 and 20 characters in length.",
      "subgroup": "Account Management",
      "url": "/Client/UpdatePassword",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UpdatePasswordRequest",
      "result": "UpdatePasswordResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UpdateUserTitleDisplayName",
      "summary": "Updates the title-specific display for the user",
      "subgroup": "Account Management",
      "url": "/Client/UpdateUserTitleDisplayName",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UpdateUserTitleDisplayNameRequest",
      "result": "UpdateUserTitleDisplayNameResult",
      "errors": [
        "InvalidParams",
        "UsernameNotAvailable"
      ]
    },
    {
      "name": "GetUserData",
      "summary": "Gets the title-specific custom data for the user. The data is an arbitrary JSON object. If the Keys parameter is provided, the custom data object is constrained to properties whose names are in the Keys list.",
      "subgroup": "Player Data Management",
      "url": "/Client/GetUserData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetUserDataRequest",
      "result": "GetUserDataResult",
      "seeAlso": [
        "UpdateUserData",
        "GetUserReadOnlyData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserReadOnlyData",
      "summary": "Gets the game client read-only title-specific custom data for the user. The data is an arbitrary JSON object. If the Keys parameter is provided, the custom data object is constrained to properties whose names are in the Keys list. This data can be read by the game client, but it can be updated only by the game server (if applicable) or developer API.",
      "subgroup": "Player Data Management",
      "url": "/Client/GetUserReadOnlyData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetUserDataRequest",
      "result": "GetUserDataResult",
      "seeAlso": [
        "GetUserData",
        "UpdateUserData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UpdateUserData",
      "summary": "Updates the title-specific custom data for the user. The data is an arbitrary JSON object. Only the custom data properties included in the reqeust are updated. To remove a property from the user's existing custom data, specify its value as null.",
      "subgroup": "Player Data Management",
      "url": "/Client/UpdateUserData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UpdateUserDataRequest",
      "result": "UpdateUserDataResult",
      "seeAlso": [
        "GetUserData",
        "GetUserReadOnlyData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetCatalogItems",
      "summary": "Get's the specified version of the title's catalog of virtual goods, including purchase options and pricing details",
      "resultDetails": "NOTE - this can be an extremely large, so it's probably a good idea to ask for this gzipped. Also, note that these values can be modified by external tools - price changing and so on, so be sure and re-get this regularly.",
      "subgroup": "Title-Wide Data Management",
      "url": "/Client/GetCatalogItems",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetCatalogItemsRequest",
      "result": "GetCatalogItemsResult",
      "seeAlso": [
        "GetUserInventory"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetTitleData",
      "summary": "Gets the global title data settings, as configured by the developer API",
      "requestDetails": "This is intended to store game specific variables that, if changed, will affect every game being played. E.g. run speeds, enemy spawn rates and so on.",
      "subgroup": "Title-Wide Data Management",
      "url": "/Client/GetTitleData",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetTitleDataRequest",
      "result": "GetTitleDataResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetTitleNews",
      "summary": "Gets the title news feed, as set in the developer portal",
      "subgroup": "Title-Wide Data Management",
      "url": "/Client/GetTitleNews",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetTitleNewsRequest",
      "result": "GetTitleNewsResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "ConfirmPurchase",
      "summary": "Purchasing step 3 of 3: Confirms with the payment provider that the purchase was approved (if applicable) and adds the associated virtual goods inventory items to the user's inventory.  For purchases made with virtual currencies or for catalog items that award virtual currencies, adjusts the user's virtual currency balances accordingly.  Recursively adds bundled inventory items.",
      "requestDetails": "This is the final step in confirming to the system that the purchase has gone through. This is a pull system, not a push system, so it is the developers responsiblity to poll this API call regularly if a purchase has been made.",
      "subgroup": "Player Item Management",
      "url": "/Client/ConfirmPurchase",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "ConfirmPurchaseRequest",
      "result": "ConfirmPurchaseResult",
      "seeAlso": [
        "StartPurchase",
        "PayForPurchase"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserInventory",
      "summary": "Get the user's current inventory of virtual goods that they have acquired via purchasing,  grants, coupons, etc. Items that are expired, fully consumed or are no longer valid for whatever reason are not included.",
      "requestDetails": "User inventory can be made up of items from more than one catalog version. This function allows you to specifiy which catalog version you wish to get items from. If CatalogVersion is unset, then the system assumes the caller wants items ONLY from the latest version.",
      "subgroup": "Player Item Management",
      "url": "/Client/GetUserInventory",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetUserInventoryRequest",
      "result": "GetUserInventoryResult",
      "seeAlso": [
        "GetCatalogItems"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "PayForPurchase",
      "summary": "Purchasing step 2 of 3: Selects a payment option for the purchase order and for real-money purchases, initiates the purchase transaction with the payment provider (if necessary). For web-based payment providers, returns the URL to direct the user to approve the purchase.",
      "requestDetails": "This actually fires off the purchase. NOTE - some of the possible purchase providers may take a while to return an affirmative or deny to the actual purchase request. Note also that calling this has the effect of actually adding the possible items for purchase to the users inventory, just marking them as unconfirmed (and therefore not reporting them to the Inventory system).",
      "subgroup": "Player Item Management",
      "url": "/Client/PayForPurchase",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "PayForPurchaseRequest",
      "result": "PayForPurchaseResult",
      "seeAlso": [
        "StartPurchase",
        "ConfirmPurchase"
      ],
      "errors": [
        "InvalidParams",
        "InvalidPaymentProvider",
        "FailedByPaymentProvider"
      ]
    },
    {
      "name": "RedeemCoupon",
      "summary": "Adds the virtual goods associated with the coupon to the user's inventory",
      "requestDetails": "Using a coupon provided by the CSR system, that is tied to specific items in the catalog that can be awarded to a specific player. Calling this function activates that coupon and awards the items to the player.",
      "subgroup": "Player Item Management",
      "url": "/Client/RedeemCoupon",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "RedeemCouponRequest",
      "result": "RedeemCouponResult",
      "errors": [
        "InvalidParams",
        "CouponCodeNotFound"
      ]
    },
    {
      "name": "StartPurchase",
      "summary": "Purchasing step 1 of 3: Creates an order for a list of items in the catalog. Returns a list of applicable payment options and locks-in pricing for the remainder of the purchase transaction.",
      "requestDetails": "NOTE - the cart methodology does not allow for the addition of extra objects once this step has been concluded; the developer has to add all items to be purchased at once. Further note that this action does have the effect of 'freezing prices'- once an item is in the cart to be purchased, it's price cannot change, even if it does at the catalog level. Lastly, this system is NOT intended for mobile - at least not on IOS or Android, where the preferred mechanism is to use the IOS IAP system or Google Play on Android.",
      "subgroup": "Player Item Management",
      "url": "/Client/StartPurchase",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "StartPurchaseRequest",
      "result": "StartPurchaseResult",
      "seeAlso": [
        "PayForPurchase",
        "ConfirmPurchase"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UnlockContainerItem",
      "summary": "Unlocks a container item in the user's inventory and consumes a key item of the type indicated by the container item. Adds an item to the user's inventory as determined by the random item drop table associated with the container item.",
      "requestDetails": "Depending on how the item is set upp (requiring keys and so on), the container will be unlocked and a) provide the player with everything defined in the container at unlock time, plus also handle drop table item generation, if that is set up within the definition.",
      "subgroup": "Player Item Management",
      "url": "/Client/UnlockContainerItem",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "UnlockContainerItemRequest",
      "result": "UnlockContainerItemResult",
      "errors": [
        "InvalidParams",
        "InvalidContainerItem",
        "ContainerNotOwned",
        "KeyNotOwned",
        "InvalidItemIdInTable"
      ]
    },
    {
      "name": "AddFriend",
      "summary": "Adds a playfab user to your friend list",
      "requestDetails": "The player to add to your friends list can be looked up by PlayFabId, username, email address or title display name",
      "subgroup": "Friend List Management",
      "url": "/Client/AddFriend",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "AddFriendRequest",
      "result": "AddFriendResult",
      "seeAlso": [
        "GetFriendsList",
        "SetFriendTags"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "GetFriendsList",
      "summary": "Gets the user's combined friends list, constrained to friends who have PlayFab accounts. Refreshes the user's friends lists from their linked Facebook, Steam and Game Center accounts, if applicable.",
      "resultDetails": "Note - the friends list returned here can be a mixutre of friends from Steam, Facebook and Playfab. Also note, the Facebook friend will ONLY be those who have signed up for this game via facebook.",
      "subgroup": "Friend List Management",
      "url": "/Client/GetFriendsList",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GetFriendsListRequest",
      "result": "GetFriendsListResult",
      "seeAlso": [
        "AddFriend",
        "RemoveFriend"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "RemoveFriend",
      "summary": "Removes a friend from the user's friend list",
      "subgroup": "Friend List Management",
      "url": "/Client/RemoveFriend",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "RemoveFriendRequest",
      "result": "RemoveFriendResult",
      "seeAlso": [
        "AddFriend",
        "SetFriendTags"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "SetFriendTags",
      "summary": "Update's a friends tag list to the new list, replacing the old list",
      "subgroup": "Friend List Management",
      "url": "/Client/SetFriendTags",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "SetFriendTagsRequest",
      "result": "SetFriendTagsResult",
      "seeAlso": [
        "AddFriend",
        "RemoveFriend"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "RegisterForIOSPushNotification",
      "summary": "Registers the iOS device to receive push notifications",
      "subgroup": "IOS-Specific APIs",
      "url": "/Client/RegisterForIOSPushNotification",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "RegisterForIOSPushNotificationRequest",
      "result": "RegisterForIOSPushNotificationResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "ValidateIOSReceipt",
      "summary": "Validates with the iTunes store that the receipt for an iOS in-app purchase is valid and that it matches the purchased catalog item",
      "resultDetails": "Once verified, the catalog item matching the itunes item name will be given to the player",
      "subgroup": "IOS-Specific APIs",
      "url": "/Client/ValidateIOSReceipt",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "ValidateIOSReceiptRequest",
      "result": "ValidateIOSReceiptResult",
      "errors": [
        "InvalidParams",
        "InvalidReceipt",
        "ReceiptAlreadyUsed"
      ]
    },
    {
      "name": "GetCurrentGames",
      "summary": "Get details about all current running game servers matching the given parameters.",
      "subgroup": "Matchmaking APIs",
      "url": "/Client/GetCurrentGames",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "CurrentGamesRequest",
      "result": "CurrentGamesResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetGameServerRegions",
      "summary": " Get details about the regions hosting game servers matching the given parameters.",
      "subgroup": "Matchmaking APIs",
      "url": "/Client/GetGameServerRegions",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "GameServerRegionsRequest",
      "result": "GameServerRegionsResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetRegionPlaylists",
      "summary": "Get statistics about game server mode playlists.",
      "subgroup": "Matchmaking APIs",
      "url": "/Client/GetRegionPlaylists",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "RegionPlaylistsRequest",
      "result": "RegionPlaylistsResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "Matchmake",
      "summary": "Assign the current player to an existing or new game server matching the given parameters and return the connection information.",
      "subgroup": "Matchmaking APIs",
      "url": "/Client/Matchmake",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "MatchmakeRequest",
      "result": "MatchmakeResult",
      "errors": [
        "InvalidParams",
        "GameModeNotFound"
      ]
    },
    {
      "name": "StartGame",
      "summary": "Start a new game server with a given configuration, add the current player and return the connection information.",
      "subgroup": "Matchmaking APIs",
      "url": "/Client/StartGame",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "StartGameRequest",
      "result": "StartGameResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "AndroidDevicePushNotificationRegistration",
      "summary": "Registers the Android device to receive push notifications",
      "subgroup": "Android-Specific APIs",
      "url": "/Client/AndroidDevicePushNotificationRegistration",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "AndroidDevicePushNotificationRegistrationRequest",
      "result": "AndroidDevicePushNotificationRegistrationResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "ValidateGooglePlayPurchase",
      "summary": "Validate a Google Play Store receipt and give the corresponding item to the player",
      "subgroup": "Android-Specific APIs",
      "url": "/Client/ValidateGooglePlayPurchase",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "ValidateGooglePlayPurchaseRequest",
      "result": "ValidateGooglePlayPurchaseResult",
      "errors": [
        "InvalidParams",
        "InvalidReceipt",
        "ReceiptAlreadyUsed",
        "ReceiptCancelled"
      ]
    },
    {
      "name": "LogEvent",
      "summary": "Log analytics event. Returns errors if the event wasn't of the correct format. Otherwise, the event is logged in your game's database.",
      "subgroup": "Reporting",
      "url": "/Client/LogEvent",
      "auth": "SessionTicket",
      "method": "POST",
      "request": "LogEventRequest",
      "result": "LogEventResult",
      "errors": [
        "InvalidParams"
      ]
    }
  ],
  "subgroups": [
    {
      "name": "Authentication",
      "methods": [
        "LoginWithAndroidDeviceID",
        "LoginWithFacebook",
        "LoginWithGoogleAccount",
        "LoginWithIOSDeviceID",
        "LoginWithPlayFab",
        "LoginWithSteam",
        "RegisterPlayFabUser",
        "SendAccountRecoveryEmail"
      ]
    },
    {
      "name": "Account Management",
      "methods": [
        "GetAccountInfo",
        "LinkFacebookAccount",
        "LinkGameCenterAccount",
        "LinkSteamAccount",
        "UnlinkFacebookAccount",
        "UnlinkGameCenterAccount",
        "UnlinkSteamAccount",
        "UpdateEmailAddress",
        "UpdatePassword",
        "UpdateUserTitleDisplayName"
      ]
    },
    {
      "name": "Player Data Management",
      "methods": [
        "GetUserData",
        "GetUserReadOnlyData",
        "UpdateUserData"
      ]
    },
    {
      "name": "Title-Wide Data Management",
      "methods": [
        "GetCatalogItems",
        "GetTitleData",
        "GetTitleNews"
      ]
    },
    {
      "name": "Player Item Management",
      "methods": [
        "ConfirmPurchase",
        "GetUserInventory",
        "PayForPurchase",
        "RedeemCoupon",
        "StartPurchase",
        "UnlockContainerItem"
      ]
    },
    {
      "name": "Friend List Management",
      "methods": [
        "AddFriend",
        "GetFriendsList",
        "RemoveFriend",
        "SetFriendTags"
      ]
    },
    {
      "name": "IOS-Specific APIs",
      "methods": [
        "RegisterForIOSPushNotification",
        "ValidateIOSReceipt"
      ]
    },
    {
      "name": "Matchmaking APIs",
      "methods": [
        "GetCurrentGames",
        "GetGameServerRegions",
        "GetRegionPlaylists",
        "Matchmake",
        "StartGame"
      ]
    },
    {
      "name": "Android-Specific APIs",
      "methods": [
        "AndroidDevicePushNotificationRegistration",
        "ValidateGooglePlayPurchase"
      ]
    },
    {
      "name": "Reporting",
      "methods": [
        "LogEvent"
      ]
    }
  ],
  "errors": {
    "Success": {
      "id": 0,
      "name": "Success"
    },
    "InvalidParams": {
      "id": 1000,
      "name": "InvalidParams"
    },
    "AccountNotFound": {
      "id": 1001,
      "name": "AccountNotFound"
    },
    "AccountBanned": {
      "id": 1002,
      "name": "AccountBanned"
    },
    "InvalidUsernameOrPassword": {
      "id": 1003,
      "name": "InvalidUsernameOrPassword"
    },
    "InvalidTitleId": {
      "id": 1004,
      "name": "InvalidTitleId"
    },
    "InvalidEmailAddress": {
      "id": 1005,
      "name": "InvalidEmailAddress"
    },
    "EmailAddressNotAvailable": {
      "id": 1006,
      "name": "EmailAddressNotAvailable"
    },
    "InvalidUsername": {
      "id": 1007,
      "name": "InvalidUsername"
    },
    "InvalidPassword": {
      "id": 1008,
      "name": "InvalidPassword"
    },
    "UsernameNotAvailable": {
      "id": 1009,
      "name": "UsernameNotAvailable"
    },
    "InvalidSteamTicket": {
      "id": 1010,
      "name": "InvalidSteamTicket"
    },
    "AccountAlreadyLinked": {
      "id": 1011,
      "name": "AccountAlreadyLinked"
    },
    "LinkedAccountAlreadyClaimed": {
      "id": 1012,
      "name": "LinkedAccountAlreadyClaimed"
    },
    "InvalidFacebookToken": {
      "id": 1013,
      "name": "InvalidFacebookToken"
    },
    "AccountNotLinked": {
      "id": 1014,
      "name": "AccountNotLinked"
    },
    "FailedByPaymentProvider": {
      "id": 1015,
      "name": "FailedByPaymentProvider"
    },
    "CouponCodeNotFound": {
      "id": 1016,
      "name": "CouponCodeNotFound"
    },
    "InvalidContainerItem": {
      "id": 1017,
      "name": "InvalidContainerItem"
    },
    "ContainerNotOwned": {
      "id": 1018,
      "name": "ContainerNotOwned"
    },
    "KeyNotOwned": {
      "id": 1019,
      "name": "KeyNotOwned"
    },
    "InvalidItemIdInTable": {
      "id": 1020,
      "name": "InvalidItemIdInTable"
    },
    "InvalidReceipt": {
      "id": 1021,
      "name": "InvalidReceipt"
    },
    "ReceiptAlreadyUsed": {
      "id": 1022,
      "name": "ReceiptAlreadyUsed"
    },
    "ReceiptCancelled": {
      "id": 1023,
      "name": "ReceiptCancelled"
    },
    "GameNotFound": {
      "id": 1024,
      "name": "GameNotFound"
    },
    "GameModeNotFound": {
      "id": 1025,
      "name": "GameModeNotFound"
    },
    "InvalidGoogleToken": {
      "id": 1026,
      "name": "InvalidGoogleToken"
    },
    "BuildNotFound": {
      "id": 1027,
      "name": "BuildNotFound"
    },
    "PlayerNotInGame": {
      "id": 1028,
      "name": "PlayerNotInGame"
    },
    "InvalidTicket": {
      "id": 1029,
      "name": "InvalidTicket"
    },
    "InvalidOrderInfo": {
      "id": 1030,
      "name": "InvalidOrderInfo"
    },
    "RegistrationIncomplete": {
      "id": 1031,
      "name": "RegistrationIncomplete"
    },
    "InvalidPlatform": {
      "id": 1032,
      "name": "InvalidPlatform"
    },
    "SteamApplicationNotOwned": {
      "id": 1033,
      "name": "SteamApplicationNotOwned"
    },
    "WrongSteamAccount": {
      "id": 1034,
      "name": "WrongSteamAccount"
    },
    "TitleNotActivated": {
      "id": 1035,
      "name": "TitleNotActivated"
    },
    "RegistrationSessionNotFound": {
      "id": 1036,
      "name": "RegistrationSessionNotFound"
    },
    "NoSuchMod": {
      "id": 1037,
      "name": "NoSuchMod"
    },
    "FileNotFound": {
      "id": 1038,
      "name": "FileNotFound"
    },
    "DuplicateEmail": {
      "id": 1039,
      "name": "DuplicateEmail"
    },
    "ItemNotFound": {
      "id": 1040,
      "name": "ItemNotFound"
    },
    "ItemNotOwned": {
      "id": 1041,
      "name": "ItemNotOwned"
    },
    "ItemNotRecycleable": {
      "id": 1042,
      "name": "ItemNotRecycleable"
    },
    "ItemNotAffordable": {
      "id": 1043,
      "name": "ItemNotAffordable"
    },
    "InvalidVirtualCurrency": {
      "id": 1044,
      "name": "InvalidVirtualCurrency"
    },
    "NonPositiveValue": {
      "id": 1045,
      "name": "NonPositiveValue"
    },
    "InvalidRegion": {
      "id": 1046,
      "name": "InvalidRegion"
    },
    "RegionAtCapacity": {
      "id": 1047,
      "name": "RegionAtCapacity"
    },
    "ServerFailedToStart": {
      "id": 1048,
      "name": "ServerFailedToStart"
    },
    "NameNotAvailable": {
      "id": 1049,
      "name": "NameNotAvailable"
    },
    "InsufficientFunds": {
      "id": 1050,
      "name": "InsufficientFunds"
    },
    "InvalidDeviceID": {
      "id": 1051,
      "name": "InvalidDeviceID"
    },
    "InvalidPushNotificationToken": {
      "id": 1052,
      "name": "InvalidPushNotificationToken"
    },
    "NoRemainingUses": {
      "id": 1053,
      "name": "NoRemainingUses"
    },
    "InvalidPaymentProvider": {
      "id": 1054,
      "name": "InvalidPaymentProvider"
    },
    "PurchaseInitializationFailure": {
      "id": 1055,
      "name": "PurchaseInitializationFailure"
    },
    "DuplicateUsername": {
      "id": 1056,
      "name": "DuplicateUsername"
    },
    "InvalidBuyerInfo": {
      "id": 1057,
      "name": "InvalidBuyerInfo"
    },
    "NoGameModeParamsSet": {
      "id": 1058,
      "name": "NoGameModeParamsSet"
    }
  },
  "errorList": [
    "Success",
    "InvalidParams",
    "AccountNotFound",
    "AccountBanned",
    "InvalidUsernameOrPassword",
    "InvalidTitleId",
    "InvalidEmailAddress",
    "EmailAddressNotAvailable",
    "InvalidUsername",
    "InvalidPassword",
    "UsernameNotAvailable",
    "InvalidSteamTicket",
    "AccountAlreadyLinked",
    "LinkedAccountAlreadyClaimed",
    "InvalidFacebookToken",
    "AccountNotLinked",
    "FailedByPaymentProvider",
    "CouponCodeNotFound",
    "InvalidContainerItem",
    "ContainerNotOwned",
    "KeyNotOwned",
    "InvalidItemIdInTable",
    "InvalidReceipt",
    "ReceiptAlreadyUsed",
    "ReceiptCancelled",
    "GameNotFound",
    "GameModeNotFound",
    "InvalidGoogleToken",
    "BuildNotFound",
    "PlayerNotInGame",
    "InvalidTicket",
    "InvalidOrderInfo",
    "RegistrationIncomplete",
    "InvalidPlatform",
    "SteamApplicationNotOwned",
    "WrongSteamAccount",
    "TitleNotActivated",
    "RegistrationSessionNotFound",
    "NoSuchMod",
    "FileNotFound",
    "DuplicateEmail",
    "ItemNotFound",
    "ItemNotOwned",
    "ItemNotRecycleable",
    "ItemNotAffordable",
    "InvalidVirtualCurrency",
    "NonPositiveValue",
    "InvalidRegion",
    "RegionAtCapacity",
    "ServerFailedToStart",
    "NameNotAvailable",
    "InsufficientFunds",
    "InvalidDeviceID",
    "InvalidPushNotificationToken",
    "NoRemainingUses",
    "InvalidPaymentProvider",
    "PurchaseInitializationFailure",
    "DuplicateUsername",
    "InvalidBuyerInfo",
    "NoGameModeParamsSet"
  ]
}