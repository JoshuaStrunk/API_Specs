{
  "name": "Server",
  "url": "/Server",
  "description": "Provides functionality to allow external (developer-controlled) servers to interact with user inventories and data in a trusted manner, and to handle matchmaking and client connection orchestration",
  "revision": "1.0.2",
  "datatypes": {
    "AddUserVirtualCurrencyRequest": {
      "name": "AddUserVirtualCurrencyRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose virtual currency balance is to be incremented",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "VirtualCurrency",
          "description": "name of the virtual currency which is to be incremented",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Amount",
          "description": "amount to be added to the user balance of the specified virtual currency",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "AwardSteamAchievementItem": {
      "name": "AwardSteamAchievementItem",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user who is to be granted the specified Steam achievement",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "AchievementName",
          "description": "unique Steam achievement name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Result",
          "description": "result of the award attempt (only valid on response, not on request)",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "AwardSteamAchievementRequest": {
      "name": "AwardSteamAchievementRequest",
      "properties": [
        {
          "name": "Achievements",
          "description": "array of achievements to grant and the users to whom they are to be granted",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "AwardSteamAchievementItem",
          "isclass": true,
          "optional": false
        }
      ]
    },
    "AwardSteamAchievementResult": {
      "name": "AwardSteamAchievementResult",
      "properties": [
        {
          "name": "AchievementResults",
          "description": "array of achievements granted",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "AwardSteamAchievementItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CatalogItem": {
      "name": "CatalogItem",
      "description": "A purchasable item from the item catalog",
      "sortKey": "ItemId",
      "properties": [
        {
          "name": "ItemId",
          "description": "unique identifier for this item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ItemClass",
          "description": "class to which the item belongs",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CatalogVersion",
          "description": "catalog item for this item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "description": "text name for the item, to show in-game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Description",
          "description": "text description of item, to show in-game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrencyPrices",
          "description": "price of this item in virtual currencies and \"RM\" (the base Real Money purchase price, in USD pennies)",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "RealCurrencyPrices",
          "description": "override prices for this item for specific currencies",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "ReleaseDate",
          "description": "the date this item becomes available for purchase",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "ExpirationDate",
          "description": "the date this item will no longer be available for purchase",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "IsFree",
          "description": "(deprecated)",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "NotForSale",
          "description": "can this item be purchased (if not, it can still be granted by a server-based operation, such as a loot drop from a monster)",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "NotForTrade",
          "description": "can an instance of this item be exchanged between players?",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "Tags",
          "description": "list of item tags",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomData",
          "description": "game specific custom data",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GrantedIfPlayerHas",
          "description": "array of ItemId values which are evaluated when any item is added to the player inventory - if all items in this array are present, the this item will also be added to the player inventory",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Consumable",
          "description": "defines the consumable properties (number of uses, timeout) for the item",
          "jsontype": "Object",
          "actualtype": "CatalogItemConsumableInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Container",
          "description": "defines the container properties for the item - what items it contains, including random drop tables and virtual currencies, and what item (if any) is required to open it via the UnlockContainerItem API",
          "jsontype": "Object",
          "actualtype": "CatalogItemContainerInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Bundle",
          "description": "defines the bundle properties for the item - bundles are items which contain other items, including random drop tables and virtual currencies",
          "jsontype": "Object",
          "actualtype": "CatalogItemBundleInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CatalogItemBundleInfo": {
      "name": "CatalogItemBundleInfo",
      "properties": [
        {
          "name": "BundledItems",
          "description": "unique ItemId values for all items which will be added to the player inventory when the bundle is added",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundledResultTables",
          "description": "unique TableId values for all RandomResultTable objects which are part of the bundle (random tables will be resolved and add the relevant items to the player inventory when the bundle is added)",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundledVirtualCurrencies",
          "description": "virtual currency types and balances which will be added to the player inventory when the bundle is added",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "CatalogItemConsumableInfo": {
      "name": "CatalogItemConsumableInfo",
      "properties": [
        {
          "name": "UsageCount",
          "description": "number of times this object can be used, after which it will be removed from the player inventory",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "UsagePeriod",
          "description": "duration in seconds for how long the item will remain in the player inventory - once elapsed, the item will be removed",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "UsagePeriodGroup",
          "description": "all inventory item instances in the player inventory sharing a non-null UsagePeriodGroup have their UsagePeriod values added together, and share the result - when that period has elapsed, all the items in the group will be removed",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CatalogItemContainerInfo": {
      "name": "CatalogItemContainerInfo",
      "description": "Containers are inventory items that can hold other items defined in the catalog, as well as virtual currency, which is added to the player inventory when the container is unlocked, using the UnlockContainerItem API. The items can be anything defined in the catalog, as well as RandomResultTable objects which will be resolved when the container is unlocked. Containers and their keys should be defined as Consumable (having a limited number of uses) in their catalog defintiions, unless the intent is for the player to be able to re-use them infinitely.",
      "properties": [
        {
          "name": "KeyItemId",
          "description": "ItemId for the catalog item used to unlock the container, if any (if not specified, a call to UnlockContainerItem will open the container, adding the contents to the player inventory and currency balances)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemContents",
          "description": "unique ItemId values for all items which will be added to the player inventory, once the container has been unlocked",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ResultTableContents",
          "description": "unique TableId values for all RandomResultTable objects which are part of the container (once unlocked, random tables will be resolved and add the relevant items to the player inventory)",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrencyContents",
          "description": "virtual currency types and balances which will be added to the player inventory when the container is unlocked",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "Currency": {
      "name": "Currency",
      "isenum": true,
      "enumvalues": [
        {
          "name": "USD"
        },
        {
          "name": "GBP"
        },
        {
          "name": "EUR"
        },
        {
          "name": "RUB"
        },
        {
          "name": "BRL"
        },
        {
          "name": "CIS"
        },
        {
          "name": "CAD"
        }
      ]
    },
    "GetCatalogItemsRequest": {
      "name": "GetCatalogItemsRequest",
      "properties": [
        {
          "name": "CatalogVersion",
          "description": "which catalog is being requested",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetCatalogItemsResult": {
      "name": "GetCatalogItemsResult",
      "properties": [
        {
          "name": "Catalog",
          "description": "array of items which can be purchased",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetLeaderboardAroundUserRequest": {
      "name": "GetLeaderboardAroundUserRequest",
      "properties": [
        {
          "name": "StatisticName",
          "description": "unique identifier for the title-specific statistic for the leaderboard",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user to be centered in the list of entries",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "MaxResultsCount",
          "description": "maximum number of entries to retrieve",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "GetLeaderboardAroundUserResult": {
      "name": "GetLeaderboardAroundUserResult",
      "properties": [
        {
          "name": "Leaderboard",
          "description": "ordered list of leaderboard entries",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PlayerLeaderboardEntry",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetLeaderboardRequest": {
      "name": "GetLeaderboardRequest",
      "properties": [
        {
          "name": "StatisticName",
          "description": "unique identifier for the title-specific statistic for the leaderboard",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "StartPosition",
          "description": "first entry in the leaderboard to be retrieved",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "MaxResultsCount",
          "description": "maximum number of entries to retrieve",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "GetLeaderboardResult": {
      "name": "GetLeaderboardResult",
      "properties": [
        {
          "name": "Leaderboard",
          "description": "ordered list of leaderboard entries",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "PlayerLeaderboardEntry",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetTitleDataRequest": {
      "name": "GetTitleDataRequest",
      "properties": [
        {
          "name": "Keys",
          "description": " array of keys to get back data from the TitleData data blob, set by the admin tools",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetTitleDataResult": {
      "name": "GetTitleDataResult",
      "properties": [
        {
          "name": "Data",
          "description": "a dictionary object of key / value pairs",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetUserAccountInfoRequest": {
      "name": "GetUserAccountInfoRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose information is being requested",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetUserAccountInfoResult": {
      "name": "GetUserAccountInfoResult",
      "properties": [
        {
          "name": "UserInfo",
          "description": "PlayFab unique identifier of the user whose information was requested",
          "jsontype": "Object",
          "actualtype": "UserAccountInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetUserDataRequest": {
      "name": "GetUserDataRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose custom data is being requested",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Keys",
          "description": "specific keys to search for in the custom user data",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetUserDataResult": {
      "name": "GetUserDataResult",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose custom data is being returned",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Data",
          "description": "user specific data for this title",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "UserDataRecord",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetUserInventoryRequest": {
      "name": "GetUserInventoryRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose inventory is being requested",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CatalogVersion",
          "description": "used to limit results to only those from a specific catalog version",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetUserInventoryResult": {
      "name": "GetUserInventoryResult",
      "properties": [
        {
          "name": "Inventory",
          "description": "array of inventory items belonging to the user",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        },
        {
          "name": "VirtualCurrency",
          "description": "array of virtual currency balance(s) belonging to the user",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "GetUserStatisticsRequest": {
      "name": "GetUserStatisticsRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "user for whom statistics are being requested",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetUserStatisticsResult": {
      "name": "GetUserStatisticsResult",
      "properties": [
        {
          "name": "UserStatistics",
          "description": "user statistics for the requested user",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "GrantItemsToUsersRequest": {
      "name": "GrantItemsToUsersRequest",
      "properties": [
        {
          "name": "CatalogVersion",
          "description": "catalog version from which items are to be granted",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemGrants",
          "description": "array of items to grant and the users to whom the items are to be granted",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "ItemGrant",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GrantItemsToUsersResult": {
      "name": "GrantItemsToUsersResult",
      "properties": [
        {
          "name": "ItemGrantResults",
          "description": "array of items granted to users",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ItemGrantResult",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "ItemGrant": {
      "name": "ItemGrant",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user to whom the catalog item is to be granted",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ItemId",
          "description": "unique identifier of the catalog item to be granted to the user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Annotation",
          "description": "string detailing any additional information concerning this operation",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ItemGrantResult": {
      "name": "ItemGrantResult",
      "description": "Result of granting an item to a user",
      "sortKey": "ItemInstanceId",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user to whom the catalog item is to be granted",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "unique identifier of the catalog item to be granted to the user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemInstanceId",
          "description": "unique instance Id of the granted item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Annotation",
          "description": "string detailing any additional information concerning this operation",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Result",
          "description": "result of this operation",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "ItemInstance": {
      "name": "ItemInstance",
      "description": "A unique instance of an item in a user's inventory",
      "sortKey": "ItemInstanceId",
      "properties": [
        {
          "name": "ItemId",
          "description": "unique identifier for the inventory item, as defined in the catalog",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemInstanceId",
          "description": "unique item identifier for this specific instance of the item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemClass",
          "description": "class name for the inventory item, as defined in the catalog",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PurchaseDate",
          "description": "timestamp for when this instance was purchased",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "Expiration",
          "description": "timestamp for when this instance will expire",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "RemainingUses",
          "description": "total number of remaining uses, if this is a consumable item",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "Annotation",
          "description": "game specific comment associated with this instance when it was added to the user inventory",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CatalogVersion",
          "description": "catalog version for the inventory item, when this instance was created",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundleParent",
          "description": "unique identifier for the parent inventory item, as defined in the catalog, for object which were added from a bundle or container",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ModifyUserVirtualCurrencyResult": {
      "name": "ModifyUserVirtualCurrencyResult",
      "properties": [
        {
          "name": "VirtualCurrency",
          "description": "name of the virtual currency which was modified",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Balance",
          "description": "balance of the virtual currency after modification",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "NotifyMatchmakerPlayerLeftRequest": {
      "name": "NotifyMatchmakerPlayerLeftRequest",
      "properties": [
        {
          "name": "ServerId",
          "description": "unique identifier of the Game Server Instance the user is leaving",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user that is leaving the Game Server Instance",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "NotifyMatchmakerPlayerLeftResult": {
      "name": "NotifyMatchmakerPlayerLeftResult",
      "properties": [
        {
          "name": "PlayerState",
          "description": "state of user leaving the Game Server Instance",
          "jsontype": "String",
          "actualtype": "PlayerConnectionState",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "PlayerConnectionState": {
      "name": "PlayerConnectionState",
      "isenum": true,
      "enumvalues": [
        {
          "name": "Unassigned"
        },
        {
          "name": "Connecting"
        },
        {
          "name": "Participating"
        },
        {
          "name": "Participated"
        },
        {
          "name": "Reconnecting"
        }
      ]
    },
    "PlayerLeaderboardEntry": {
      "name": "PlayerLeaderboardEntry",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user for this leaderboard entry",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "description": "title-specific display name of the user for this leaderboard entry",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "StatValue",
          "description": "specific value of the user's statistic",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "Position",
          "description": "user's overall position in the leaderboard",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "RedeemMatchmakerTicketRequest": {
      "name": "RedeemMatchmakerTicketRequest",
      "properties": [
        {
          "name": "Ticket",
          "description": "server authorization ticket passed back from a call to Matchmake or StartGame",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "IP",
          "description": "IP Address of the Game Server Instance that is asking for validation of the authorization ticket",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ServerId",
          "description": "unique identifier of the Game Server Instance that is asking for validation of the authorization ticket",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RedeemMatchmakerTicketResult": {
      "name": "RedeemMatchmakerTicketResult",
      "properties": [
        {
          "name": "TicketIsValid",
          "description": "boolean indicating whether the ticket was validated by the PlayFab service",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Error",
          "description": "error value if the ticket was not validated",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "UserInfo",
          "description": "user account information for the user validated",
          "jsontype": "Object",
          "actualtype": "UserAccountInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "SendPushNotificationRequest": {
      "name": "SendPushNotificationRequest",
      "properties": [
        {
          "name": "Recipient",
          "description": "PlayFabId of the recipient of the push notification",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Message",
          "description": "text of message to send",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "SendPushNotificationResult": {
      "name": "SendPushNotificationResult",
      "properties": []
    },
    "SetTitleDataRequest": {
      "name": "SetTitleDataRequest",
      "properties": [
        {
          "name": "Key",
          "description": "key we want to set a value on (note, this is additive - will only replace an existing key's value if they are the same name.) Keys are trimmed of whitespace. Keys may not begin with the '!' character.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Value",
          "description": "new value to set",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "SetTitleDataResult": {
      "name": "SetTitleDataResult",
      "properties": []
    },
    "SubtractUserVirtualCurrencyRequest": {
      "name": "SubtractUserVirtualCurrencyRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose virtual currency balance is to be decremented",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "VirtualCurrency",
          "description": "name of the virtual currency which is to be decremented",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Amount",
          "description": "amount to be subtracted from the user balance of the specified virtual currency",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "TitleActivationStatus": {
      "name": "TitleActivationStatus",
      "isenum": true,
      "enumvalues": [
        {
          "name": "None"
        },
        {
          "name": "ActivatedTitleKey"
        },
        {
          "name": "PendingSteam"
        },
        {
          "name": "ActivatedSteam"
        },
        {
          "name": "RevokedSteam"
        }
      ]
    },
    "UpdateUserDataRequest": {
      "name": "UpdateUserDataRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose custom data is being updated",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Data",
          "description": "data to be written to the user's custom data. Keys are trimmed of whitespace. Keys may not begin with a '!' character.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Permission",
          "description": "Permission to be applied to all user data keys written in this request. Defaults to \"private\" if not set.",
          "jsontype": "String",
          "actualtype": "UserDataPermission",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "UpdateUserDataResult": {
      "name": "UpdateUserDataResult",
      "properties": []
    },
    "UpdateUserInternalDataRequest": {
      "name": "UpdateUserInternalDataRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose custom data is being updated",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Data",
          "description": "data to be written to the user's custom data",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UpdateUserStatisticsRequest": {
      "name": "UpdateUserStatisticsRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "user whose statistics are to be updated",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "UserStatistics",
          "description": "statistics to be updated with the provided values",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "UpdateUserStatisticsResult": {
      "name": "UpdateUserStatisticsResult",
      "properties": []
    },
    "UserAccountInfo": {
      "name": "UserAccountInfo",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "unique identifier for the user account",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Created",
          "description": "timestamp indicating when the user account was created",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "Username",
          "description": "user account name in the PlayFab service",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TitleInfo",
          "description": "title-specific information for the user account",
          "jsontype": "Object",
          "actualtype": "UserTitleInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "PrivateInfo",
          "description": "personal information for the user which is considered more sensitive",
          "jsontype": "Object",
          "actualtype": "UserPrivateAccountInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "FacebookInfo",
          "description": "user Facebook information, if a Facebook account has been linked",
          "jsontype": "Object",
          "actualtype": "UserFacebookInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "SteamInfo",
          "description": "user Steam information, if a Steam account has been linked",
          "jsontype": "Object",
          "actualtype": "UserSteamInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "GameCenterInfo",
          "description": "user Gamecenter information, if a Gamecenter account has been linked",
          "jsontype": "Object",
          "actualtype": "UserGameCenterInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UserDataPermission": {
      "name": "UserDataPermission",
      "isenum": true,
      "enumvalues": [
        {
          "name": "Private"
        },
        {
          "name": "Public"
        }
      ]
    },
    "UserDataRecord": {
      "name": "UserDataRecord",
      "properties": [
        {
          "name": "Value",
          "description": "user-supplied data for this user data key",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "LastUpdated",
          "description": "timestamp indicating when this data was last updated",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "Permission",
          "description": "Permissions on this data key",
          "jsontype": "String",
          "actualtype": "UserDataPermission",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "UserFacebookInfo": {
      "name": "UserFacebookInfo",
      "properties": [
        {
          "name": "FacebookId",
          "description": "Facebook identifier",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FacebookUsername",
          "description": "Facebook username",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FacebookDisplayname",
          "description": "Facebook display name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserGameCenterInfo": {
      "name": "UserGameCenterInfo",
      "properties": [
        {
          "name": "GameCenterId",
          "description": "Gamecenter identifier",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserOrigination": {
      "name": "UserOrigination",
      "isenum": true,
      "enumvalues": [
        {
          "name": "Organic"
        },
        {
          "name": "Steam"
        },
        {
          "name": "Google"
        },
        {
          "name": "Amazon"
        },
        {
          "name": "Facebook"
        },
        {
          "name": "Kongregate"
        },
        {
          "name": "GamersFirst"
        },
        {
          "name": "Unknown"
        },
        {
          "name": "IOS"
        },
        {
          "name": "LoadTest"
        },
        {
          "name": "Android"
        },
        {
          "name": "PSN"
        },
        {
          "name": "GameCenter"
        }
      ]
    },
    "UserPrivateAccountInfo": {
      "name": "UserPrivateAccountInfo",
      "properties": [
        {
          "name": "Email",
          "description": "user email address",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserSteamInfo": {
      "name": "UserSteamInfo",
      "properties": [
        {
          "name": "SteamId",
          "description": "Steam identifier",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SteamCountry",
          "description": "the country in which the player resides, from Steam data",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SteamCurrency",
          "description": "currency type set in the user Steam account",
          "jsontype": "String",
          "actualtype": "Currency",
          "isenum": true,
          "optional": true
        },
        {
          "name": "SteamActivationStatus",
          "description": "what stage of game ownership the user is listed as being in, from Steam",
          "jsontype": "String",
          "actualtype": "TitleActivationStatus",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "UserTitleInfo": {
      "name": "UserTitleInfo",
      "properties": [
        {
          "name": "DisplayName",
          "description": "name of the user, as it is displayed in-game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Origination",
          "description": "source by which the user first joined the game, if known",
          "jsontype": "String",
          "actualtype": "UserOrigination",
          "isenum": true,
          "optional": true
        },
        {
          "name": "Created",
          "description": "timestamp indicating when the user was first associated with this game (this can differ significantly from when the user first registered with PlayFab)",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "LastLogin",
          "description": "timestamp for the last user login for this title",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "FirstLogin",
          "description": "timestamp indicating when the user first signed into this game (this can differ from the Created timestamp, as other events, such as issuing a beta key to the user, can associate the title to the user)",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "isBanned",
          "description": "boolean indicating whether or not the user is currently banned for a title",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    }
  },
  "calls": [
    {
      "name": "GetUserAccountInfo",
      "summary": "Retrieves the relevant details for a specified user",
      "requestDetails": "This API allows for access to details regarding a user in the PlayFab service, usually for purposes of customer support. Note that data returned may be Personally Identifying Information (PII), such as email address, and so care should be taken in how this data is stored and managed. Since this call will always return the relevant information for users who have accessed the title, the recommendation is to not store this data locally.",
      "subgroup": "Account Management",
      "url": "/Server/GetUserAccountInfo",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserAccountInfoRequest",
      "result": "GetUserAccountInfoResult",
      "seeAlso": [
        "GetUserInventory"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "SendPushNotification",
      "summary": "Sends an iOS/Android Push Notification to a specific user, if that user's device has been configured for Push Notifications in PlayFab. If a user has linked both Android and iOS devices, both will be notified.",
      "subgroup": "Account Management",
      "url": "/Server/SendPushNotification",
      "auth": "SecretKey",
      "method": "POST",
      "request": "SendPushNotificationRequest",
      "result": "SendPushNotificationResult",
      "errors": [
        "InvalidParams",
        "PushNotEnabledForAccount",
        "PushServiceError"
      ]
    },
    {
      "name": "GetLeaderboard",
      "summary": "Retrieves a list of ranked users for the given statistic, starting from the indicated point in the leaderboard",
      "resultDetails": "Note that the Position of the user in the results is for the overall leaderboard.",
      "subgroup": "Player Data Management",
      "url": "/Server/GetLeaderboard",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetLeaderboardRequest",
      "result": "GetLeaderboardResult",
      "seeAlso": [
        "GetLeaderboardAroundUser",
        "GetUserStatistics",
        "UpdateUserStatistics"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetLeaderboardAroundUser",
      "summary": "Retrieves a list of ranked users for the given statistic, centered on the currently signed-in user",
      "resultDetails": "Note that the Position of the user in the results is for the overall leaderboard.",
      "subgroup": "Player Data Management",
      "url": "/Server/GetLeaderboardAroundUser",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetLeaderboardAroundUserRequest",
      "result": "GetLeaderboardAroundUserResult",
      "seeAlso": [
        "GetLeaderboard",
        "GetUserStatistics",
        "UpdateUserStatistics"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "GetUserData",
      "summary": "Retrieves the title-specific custom data for the user which is readable and writable by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "url": "/Server/GetUserData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserDataRequest",
      "result": "GetUserDataResult",
      "seeAlso": [
        "UpdateUserData",
        "GetUserReadOnlyData",
        "UpdateUserReadOnlyData",
        "GetUserInternalData",
        "UpdateUserInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserInternalData",
      "summary": "Retrieves the title-specific custom data for the user which cannot be accessed by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "url": "/Server/GetUserInternalData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserDataRequest",
      "result": "GetUserDataResult",
      "seeAlso": [
        "GetUserData",
        "UpdateUserData",
        "GetUserReadOnlyData",
        "UpdateUserReadOnlyData",
        "UpdateUserInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserReadOnlyData",
      "summary": "Retrieves the title-specific custom data for the user which can only be read by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "url": "/Server/GetUserReadOnlyData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserDataRequest",
      "result": "GetUserDataResult",
      "seeAlso": [
        "GetUserData",
        "UpdateUserData",
        "UpdateUserReadOnlyData",
        "GetUserInternalData",
        "UpdateUserInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserStatistics",
      "summary": "Retrieves the details of all title-specific statistics for the user",
      "resultDetails": "User statistics are numeric values which may only be updated by a server operation, in order to minimize the opportunity for unauthorized changes. In addition to being available for use by the title, the statistics are used for all leaderboard operations in PlayFab.",
      "subgroup": "Player Data Management",
      "url": "/Server/GetUserStatistics",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserStatisticsRequest",
      "result": "GetUserStatisticsResult",
      "seeAlso": [
        "GetLeaderboard",
        "GetLeaderboardAroundUser",
        "UpdateUserStatistics"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "UpdateUserData",
      "summary": "Updates the title-specific custom data for the user which is readable and writable by the client",
      "requestDetails": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, while keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call.",
      "subgroup": "Player Data Management",
      "url": "/Server/UpdateUserData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateUserDataRequest",
      "result": "UpdateUserDataResult",
      "seeAlso": [
        "GetUserData",
        "GetUserReadOnlyData",
        "UpdateUserReadOnlyData",
        "GetUserInternalData",
        "UpdateUserInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UpdateUserInternalData",
      "summary": "Updates the title-specific custom data for the user which cannot be accessed by the client",
      "requestDetails": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call.",
      "subgroup": "Player Data Management",
      "url": "/Server/UpdateUserInternalData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateUserInternalDataRequest",
      "result": "UpdateUserDataResult",
      "seeAlso": [
        "GetUserData",
        "UpdateUserData",
        "GetUserReadOnlyData",
        "UpdateUserReadOnlyData",
        "GetUserInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UpdateUserReadOnlyData",
      "summary": "Updates the title-specific custom data for the user which can only be read by the client",
      "requestDetails": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call.",
      "subgroup": "Player Data Management",
      "url": "/Server/UpdateUserReadOnlyData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateUserDataRequest",
      "result": "UpdateUserDataResult",
      "seeAlso": [
        "GetUserData",
        "UpdateUserData",
        "GetUserReadOnlyData",
        "GetUserInternalData",
        "UpdateUserInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UpdateUserStatistics",
      "summary": "Updates the values of the specified title-specific statistics for the user",
      "requestDetails": "This operation is additive. Statistics not currently defined will be added, while those already defined will be updated with the given values. All other user statistics will remain unchanged.",
      "resultDetails": "User statistics are numeric values which may only be updated by a server operation, in order to minimize the opportunity for unauthorized changes. In addition to being available for use by the title, the statistics are used for all leaderboard operations in PlayFab.",
      "subgroup": "Player Data Management",
      "url": "/Server/UpdateUserStatistics",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateUserStatisticsRequest",
      "result": "UpdateUserStatisticsResult",
      "seeAlso": [
        "GetLeaderboard",
        "GetLeaderboardAroundUser",
        "GetUserStatistics"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound",
        "InvalidUserStatistics"
      ]
    },
    {
      "name": "GetCatalogItems",
      "summary": "Retrieves the specified version of the title's catalog of virtual goods, including all defined properties",
      "subgroup": "Title-Wide Data Management",
      "url": "/Server/GetCatalogItems",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetCatalogItemsRequest",
      "result": "GetCatalogItemsResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetTitleData",
      "summary": "Retrieves the key-value store of custom title settings",
      "requestDetails": "This API is designed to return title specific values which can be read, but not written to, by the client. For example, a developer could choose to store values which modify the user experience, such as enemy spawn rates, weapon strengths, movement speeds, etc. This allows a developer to update the title without the need to create, test, and ship a new build.",
      "subgroup": "Title-Wide Data Management",
      "url": "/Server/GetTitleData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetTitleDataRequest",
      "result": "GetTitleDataResult",
      "seeAlso": [
        "SetTitleData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "SetTitleData",
      "summary": "Updates the key-value store of custom title settings",
      "requestDetails": "This API is designed to store title specific values which can be read, but not written to, by the client. For example, a developer could choose to store values which modify the user experience, such as enemy spawn rates, weapon strengths, movement speeds, etc. This allows a developer to update the title without the need to create, test, and ship a new build. This operation is additive. If a Key does not exist in the current dataset, it will be added with the specified Value. If it already exists, the Value for that key will be overwritten with the new Value.",
      "subgroup": "Title-Wide Data Management",
      "url": "/Server/SetTitleData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "SetTitleDataRequest",
      "result": "SetTitleDataResult",
      "seeAlso": [
        "GetTitleData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "AddUserVirtualCurrency",
      "summary": "Increments  the user's balance of the specified virtual currency by the stated amount",
      "subgroup": "Player Item Management",
      "url": "/Server/AddUserVirtualCurrency",
      "auth": "SecretKey",
      "method": "POST",
      "request": "AddUserVirtualCurrencyRequest",
      "result": "ModifyUserVirtualCurrencyResult",
      "seeAlso": [
        "SubtractUserVirtualCurrency"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserInventory",
      "summary": "Retrieves the specified user's current inventory of virtual goods",
      "requestDetails": "All items currently in the user inventory will be returned, irrespective of how they were acquired (via purchasing, grants, coupons, etc.). Items that are expired, fully consumed, or are no longer valid are not considered to be in the user's current inventory, and so will not be not included.",
      "subgroup": "Player Item Management",
      "url": "/Server/GetUserInventory",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserInventoryRequest",
      "result": "GetUserInventoryResult",
      "seeAlso": [
        "GetUserAccountInfo"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GrantItemsToUsers",
      "summary": "Adds the specified items to the specified user inventories",
      "requestDetails": "This function directly adds inventory items to user inventories. As a result of this operations, the user will not be charged any transaction fee, regardless of the inventory item catalog definition.",
      "subgroup": "Player Item Management",
      "url": "/Server/GrantItemsToUsers",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GrantItemsToUsersRequest",
      "result": "GrantItemsToUsersResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "SubtractUserVirtualCurrency",
      "summary": "Decrements the user's balance of the specified virtual currency by the stated amount",
      "subgroup": "Player Item Management",
      "url": "/Server/SubtractUserVirtualCurrency",
      "auth": "SecretKey",
      "method": "POST",
      "request": "SubtractUserVirtualCurrencyRequest",
      "result": "ModifyUserVirtualCurrencyResult",
      "seeAlso": [
        "AddUserVirtualCurrency"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "NotifyMatchmakerPlayerLeft",
      "summary": "Informs the PlayFab match-making service that the user specified has left the Game Server Instance",
      "subgroup": "Matchmaking APIs",
      "url": "/Server/NotifyMatchmakerPlayerLeft",
      "auth": "SecretKey",
      "method": "POST",
      "request": "NotifyMatchmakerPlayerLeftRequest",
      "result": "NotifyMatchmakerPlayerLeftResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "RedeemMatchmakerTicket",
      "summary": "Validates a Game Server session ticket and returns details about the user",
      "requestDetails": "This function is used by a Game Server Instance to validate with the PlayFab service that a user has been registered as connected to the server. The Ticket is provided to the client either as a result of a call to StartGame or Matchmake, each of which return a Ticket specific to the Game Server Instance. This function will fail in any case where the Ticket presented is not valid for the specific Game Server Instance making the call. Note that data returned may be Personally Identifying Information (PII), such as email address, and so care should be taken in how this data is stored and managed. Since this call will always return the relevant information for users who have accessed the title, the recommendation is to not store this data locally.",
      "subgroup": "Matchmaking APIs",
      "url": "/Server/RedeemMatchmakerTicket",
      "auth": "SecretKey",
      "method": "POST",
      "request": "RedeemMatchmakerTicketRequest",
      "result": "RedeemMatchmakerTicketResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "AwardSteamAchievement",
      "summary": "Awards the specified users the specified Steam achievements",
      "subgroup": "Steam-Specific APIs",
      "url": "/Server/AwardSteamAchievement",
      "auth": "SecretKey",
      "method": "POST",
      "request": "AwardSteamAchievementRequest",
      "result": "AwardSteamAchievementResult",
      "errors": [
        "InvalidParams"
      ]
    }
  ],
  "subgroups": [
    {
      "name": "Account Management",
      "methods": [
        "GetUserAccountInfo",
        "SendPushNotification"
      ]
    },
    {
      "name": "Player Data Management",
      "methods": [
        "GetLeaderboard",
        "GetLeaderboardAroundUser",
        "GetUserData",
        "GetUserInternalData",
        "GetUserReadOnlyData",
        "GetUserStatistics",
        "UpdateUserData",
        "UpdateUserInternalData",
        "UpdateUserReadOnlyData",
        "UpdateUserStatistics"
      ]
    },
    {
      "name": "Title-Wide Data Management",
      "methods": [
        "GetCatalogItems",
        "GetTitleData",
        "SetTitleData"
      ]
    },
    {
      "name": "Player Item Management",
      "methods": [
        "AddUserVirtualCurrency",
        "GetUserInventory",
        "GrantItemsToUsers",
        "SubtractUserVirtualCurrency"
      ]
    },
    {
      "name": "Matchmaking APIs",
      "methods": [
        "NotifyMatchmakerPlayerLeft",
        "RedeemMatchmakerTicket"
      ]
    },
    {
      "name": "Steam-Specific APIs",
      "methods": [
        "AwardSteamAchievement"
      ]
    }
  ],
  "errors": {
    "Success": {
      "id": 0,
      "name": "Success"
    },
    "InvalidParams": {
      "id": 1000,
      "name": "InvalidParams"
    },
    "AccountNotFound": {
      "id": 1001,
      "name": "AccountNotFound"
    },
    "AccountBanned": {
      "id": 1002,
      "name": "AccountBanned"
    },
    "InvalidUsernameOrPassword": {
      "id": 1003,
      "name": "InvalidUsernameOrPassword"
    },
    "InvalidTitleId": {
      "id": 1004,
      "name": "InvalidTitleId"
    },
    "InvalidEmailAddress": {
      "id": 1005,
      "name": "InvalidEmailAddress"
    },
    "EmailAddressNotAvailable": {
      "id": 1006,
      "name": "EmailAddressNotAvailable"
    },
    "InvalidUsername": {
      "id": 1007,
      "name": "InvalidUsername"
    },
    "InvalidPassword": {
      "id": 1008,
      "name": "InvalidPassword"
    },
    "UsernameNotAvailable": {
      "id": 1009,
      "name": "UsernameNotAvailable"
    },
    "InvalidSteamTicket": {
      "id": 1010,
      "name": "InvalidSteamTicket"
    },
    "AccountAlreadyLinked": {
      "id": 1011,
      "name": "AccountAlreadyLinked"
    },
    "LinkedAccountAlreadyClaimed": {
      "id": 1012,
      "name": "LinkedAccountAlreadyClaimed"
    },
    "InvalidFacebookToken": {
      "id": 1013,
      "name": "InvalidFacebookToken"
    },
    "AccountNotLinked": {
      "id": 1014,
      "name": "AccountNotLinked"
    },
    "FailedByPaymentProvider": {
      "id": 1015,
      "name": "FailedByPaymentProvider"
    },
    "CouponCodeNotFound": {
      "id": 1016,
      "name": "CouponCodeNotFound"
    },
    "InvalidContainerItem": {
      "id": 1017,
      "name": "InvalidContainerItem"
    },
    "ContainerNotOwned": {
      "id": 1018,
      "name": "ContainerNotOwned"
    },
    "KeyNotOwned": {
      "id": 1019,
      "name": "KeyNotOwned"
    },
    "InvalidItemIdInTable": {
      "id": 1020,
      "name": "InvalidItemIdInTable"
    },
    "InvalidReceipt": {
      "id": 1021,
      "name": "InvalidReceipt"
    },
    "ReceiptAlreadyUsed": {
      "id": 1022,
      "name": "ReceiptAlreadyUsed"
    },
    "ReceiptCancelled": {
      "id": 1023,
      "name": "ReceiptCancelled"
    },
    "GameNotFound": {
      "id": 1024,
      "name": "GameNotFound"
    },
    "GameModeNotFound": {
      "id": 1025,
      "name": "GameModeNotFound"
    },
    "InvalidGoogleToken": {
      "id": 1026,
      "name": "InvalidGoogleToken"
    },
    "UserIsNotPartOfDeveloper": {
      "id": 1027,
      "name": "UserIsNotPartOfDeveloper"
    },
    "InvalidTitleForDeveloper": {
      "id": 1028,
      "name": "InvalidTitleForDeveloper"
    },
    "TitleNameConflicts": {
      "id": 1029,
      "name": "TitleNameConflicts"
    },
    "UserisNotValid": {
      "id": 1030,
      "name": "UserisNotValid"
    },
    "ValueAlreadyExists": {
      "id": 1031,
      "name": "ValueAlreadyExists"
    },
    "BuildNotFound": {
      "id": 1032,
      "name": "BuildNotFound"
    },
    "PlayerNotInGame": {
      "id": 1033,
      "name": "PlayerNotInGame"
    },
    "InvalidTicket": {
      "id": 1034,
      "name": "InvalidTicket"
    },
    "InvalidDeveloper": {
      "id": 1035,
      "name": "InvalidDeveloper"
    },
    "InvalidOrderInfo": {
      "id": 1036,
      "name": "InvalidOrderInfo"
    },
    "RegistrationIncomplete": {
      "id": 1037,
      "name": "RegistrationIncomplete"
    },
    "InvalidPlatform": {
      "id": 1038,
      "name": "InvalidPlatform"
    },
    "UnknownError": {
      "id": 1039,
      "name": "UnknownError"
    },
    "SteamApplicationNotOwned": {
      "id": 1040,
      "name": "SteamApplicationNotOwned"
    },
    "WrongSteamAccount": {
      "id": 1041,
      "name": "WrongSteamAccount"
    },
    "TitleNotActivated": {
      "id": 1042,
      "name": "TitleNotActivated"
    },
    "RegistrationSessionNotFound": {
      "id": 1043,
      "name": "RegistrationSessionNotFound"
    },
    "NoSuchMod": {
      "id": 1044,
      "name": "NoSuchMod"
    },
    "FileNotFound": {
      "id": 1045,
      "name": "FileNotFound"
    },
    "DuplicateEmail": {
      "id": 1046,
      "name": "DuplicateEmail"
    },
    "ItemNotFound": {
      "id": 1047,
      "name": "ItemNotFound"
    },
    "ItemNotOwned": {
      "id": 1048,
      "name": "ItemNotOwned"
    },
    "ItemNotRecycleable": {
      "id": 1049,
      "name": "ItemNotRecycleable"
    },
    "ItemNotAffordable": {
      "id": 1050,
      "name": "ItemNotAffordable"
    },
    "InvalidVirtualCurrency": {
      "id": 1051,
      "name": "InvalidVirtualCurrency"
    },
    "WrongVirtualCurrency": {
      "id": 1052,
      "name": "WrongVirtualCurrency"
    },
    "WrongPrice": {
      "id": 1053,
      "name": "WrongPrice"
    },
    "NonPositiveValue": {
      "id": 1054,
      "name": "NonPositiveValue"
    },
    "InvalidRegion": {
      "id": 1055,
      "name": "InvalidRegion"
    },
    "RegionAtCapacity": {
      "id": 1056,
      "name": "RegionAtCapacity"
    },
    "ServerFailedToStart": {
      "id": 1057,
      "name": "ServerFailedToStart"
    },
    "NameNotAvailable": {
      "id": 1058,
      "name": "NameNotAvailable"
    },
    "InsufficientFunds": {
      "id": 1059,
      "name": "InsufficientFunds"
    },
    "InvalidDeviceID": {
      "id": 1060,
      "name": "InvalidDeviceID"
    },
    "InvalidPushNotificationToken": {
      "id": 1061,
      "name": "InvalidPushNotificationToken"
    },
    "NoRemainingUses": {
      "id": 1062,
      "name": "NoRemainingUses"
    },
    "InvalidPaymentProvider": {
      "id": 1063,
      "name": "InvalidPaymentProvider"
    },
    "PurchaseInitializationFailure": {
      "id": 1064,
      "name": "PurchaseInitializationFailure"
    },
    "DuplicateUsername": {
      "id": 1065,
      "name": "DuplicateUsername"
    },
    "InvalidBuyerInfo": {
      "id": 1066,
      "name": "InvalidBuyerInfo"
    },
    "NoGameModeParamsSet": {
      "id": 1067,
      "name": "NoGameModeParamsSet"
    },
    "BodyTooLarge": {
      "id": 1068,
      "name": "BodyTooLarge"
    },
    "ReservedWordInBody": {
      "id": 1069,
      "name": "ReservedWordInBody"
    },
    "InvalidTypeInBody": {
      "id": 1070,
      "name": "InvalidTypeInBody"
    },
    "InvalidRequest": {
      "id": 1071,
      "name": "InvalidRequest"
    },
    "ReservedEventName": {
      "id": 1072,
      "name": "ReservedEventName"
    },
    "InvalidUserStatistics": {
      "id": 1073,
      "name": "InvalidUserStatistics"
    },
    "NotAuthenticated": {
      "id": 1074,
      "name": "NotAuthenticated"
    },
    "StreamAlreadyExists": {
      "id": 1075,
      "name": "StreamAlreadyExists"
    },
    "ErrorCreatingStream": {
      "id": 1076,
      "name": "ErrorCreatingStream"
    },
    "StreamNotFound": {
      "id": 1077,
      "name": "StreamNotFound"
    },
    "InvalidAccount": {
      "id": 1078,
      "name": "InvalidAccount"
    },
    "PurchaseDoesNotExist": {
      "id": 1080,
      "name": "PurchaseDoesNotExist"
    },
    "InvalidPurchaseTransactionStatus": {
      "id": 1081,
      "name": "InvalidPurchaseTransactionStatus"
    },
    "APINotEnabledForGameClientAccess": {
      "id": 1082,
      "name": "APINotEnabledForGameClientAccess"
    },
    "NoPushNotificationARNForTitle": {
      "id": 1083,
      "name": "NoPushNotificationARNForTitle"
    },
    "BuildAlreadyExists": {
      "id": 1084,
      "name": "BuildAlreadyExists"
    },
    "BuildPackageDoesNotExist": {
      "id": 1085,
      "name": "BuildPackageDoesNotExist"
    },
    "BuildIsActive": {
      "id": 1086,
      "name": "BuildIsActive"
    },
    "CustomAnalyticsEventsNotEnabledForTitle": {
      "id": 1087,
      "name": "CustomAnalyticsEventsNotEnabledForTitle"
    },
    "InvalidSharedGroupId": {
      "id": 1088,
      "name": "InvalidSharedGroupId"
    },
    "NotAuthorized": {
      "id": 1089,
      "name": "NotAuthorized"
    },
    "MissingTitleGoogleProperties": {
      "id": 1090,
      "name": "MissingTitleGoogleProperties"
    },
    "InvalidItemProperties": {
      "id": 1091,
      "name": "InvalidItemProperties"
    },
    "InvalidPSNAuthCode": {
      "id": 1092,
      "name": "InvalidPSNAuthCode"
    },
    "InvalidItemId": {
      "id": 1093,
      "name": "InvalidItemId"
    },
    "PushNotEnabledForAccount": {
      "id": 1094,
      "name": "PushNotEnabledForAccount"
    },
    "PushServiceError": {
      "id": 1095,
      "name": "PushServiceError"
    }
  },
  "errorList": [
    "Success",
    "InvalidParams",
    "AccountNotFound",
    "AccountBanned",
    "InvalidUsernameOrPassword",
    "InvalidTitleId",
    "InvalidEmailAddress",
    "EmailAddressNotAvailable",
    "InvalidUsername",
    "InvalidPassword",
    "UsernameNotAvailable",
    "InvalidSteamTicket",
    "AccountAlreadyLinked",
    "LinkedAccountAlreadyClaimed",
    "InvalidFacebookToken",
    "AccountNotLinked",
    "FailedByPaymentProvider",
    "CouponCodeNotFound",
    "InvalidContainerItem",
    "ContainerNotOwned",
    "KeyNotOwned",
    "InvalidItemIdInTable",
    "InvalidReceipt",
    "ReceiptAlreadyUsed",
    "ReceiptCancelled",
    "GameNotFound",
    "GameModeNotFound",
    "InvalidGoogleToken",
    "UserIsNotPartOfDeveloper",
    "InvalidTitleForDeveloper",
    "TitleNameConflicts",
    "UserisNotValid",
    "ValueAlreadyExists",
    "BuildNotFound",
    "PlayerNotInGame",
    "InvalidTicket",
    "InvalidDeveloper",
    "InvalidOrderInfo",
    "RegistrationIncomplete",
    "InvalidPlatform",
    "UnknownError",
    "SteamApplicationNotOwned",
    "WrongSteamAccount",
    "TitleNotActivated",
    "RegistrationSessionNotFound",
    "NoSuchMod",
    "FileNotFound",
    "DuplicateEmail",
    "ItemNotFound",
    "ItemNotOwned",
    "ItemNotRecycleable",
    "ItemNotAffordable",
    "InvalidVirtualCurrency",
    "WrongVirtualCurrency",
    "WrongPrice",
    "NonPositiveValue",
    "InvalidRegion",
    "RegionAtCapacity",
    "ServerFailedToStart",
    "NameNotAvailable",
    "InsufficientFunds",
    "InvalidDeviceID",
    "InvalidPushNotificationToken",
    "NoRemainingUses",
    "InvalidPaymentProvider",
    "PurchaseInitializationFailure",
    "DuplicateUsername",
    "InvalidBuyerInfo",
    "NoGameModeParamsSet",
    "BodyTooLarge",
    "ReservedWordInBody",
    "InvalidTypeInBody",
    "InvalidRequest",
    "ReservedEventName",
    "InvalidUserStatistics",
    "NotAuthenticated",
    "StreamAlreadyExists",
    "ErrorCreatingStream",
    "StreamNotFound",
    "InvalidAccount",
    "PurchaseDoesNotExist",
    "InvalidPurchaseTransactionStatus",
    "APINotEnabledForGameClientAccess",
    "NoPushNotificationARNForTitle",
    "BuildAlreadyExists",
    "BuildPackageDoesNotExist",
    "BuildIsActive",
    "CustomAnalyticsEventsNotEnabledForTitle",
    "InvalidSharedGroupId",
    "NotAuthorized",
    "MissingTitleGoogleProperties",
    "InvalidItemProperties",
    "InvalidPSNAuthCode",
    "InvalidItemId",
    "PushNotEnabledForAccount",
    "PushServiceError"
  ]
}