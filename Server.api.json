{
  "name": "Server",
  "url": "/Server",
  "description": "Provides functionality to allow external (developer-controlled) servers to interact with user inventories and data in a trusted manner, and to handle matchmaking and client connection orchestration",
  "revision": "1.0.0.b1",
  "datatypes": {
    "AddUserVirtualCurrencyRequest": {
      "name": "AddUserVirtualCurrencyRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose virtual currency balance is to be incremented",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "VirtualCurrency",
          "description": "name of the virtual currency which is to be incremented",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Amount",
          "description": "amount to be added to the user balance of the specified virtual currency",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "AwardSteamAchievementItem": {
      "name": "AwardSteamAchievementItem",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user who is to be granted the specified Steam achievement",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "AchievementName",
          "description": "unique Steam achievement name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Result",
          "description": "result of the award attempt (only valid on response, not on request)",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "AwardSteamAchievementRequest": {
      "name": "AwardSteamAchievementRequest",
      "properties": [
        {
          "name": "Achievements",
          "description": "array of achievements to grant and the users to whom they are to be granted",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "AwardSteamAchievementItem",
          "isclass": true,
          "optional": false
        }
      ]
    },
    "AwardSteamAchievementResult": {
      "name": "AwardSteamAchievementResult",
      "properties": [
        {
          "name": "AchievementResults",
          "description": "array of achievements granted",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "AwardSteamAchievementItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CatalogItem": {
      "name": "CatalogItem",
      "properties": [
        {
          "name": "ItemId",
          "description": "internal item name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ItemClass",
          "description": "class name to which item belongs",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CatalogVersion",
          "description": "catalog item we are working against",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "description": "displayable item name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Description",
          "description": "text description of item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrencyPrices",
          "description": "Price of this object in virtual currencies",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "RealCurrencyPrices",
          "description": "Price of this object in real money currencies",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "ReleaseDate",
          "description": "if this object was dropped, when it was dropped (optional)",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "ExpirationDate",
          "description": "date this object will no longer be viable (optional)",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "IsFree",
          "description": "is this a free object?",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "NotForSale",
          "description": "can we buy this object (might be only gettable by being dropped by a monster)",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "NotForTrade",
          "description": "can we pass this object to someone else?",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "Tags",
          "description": "List of item tags",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomData",
          "description": "Game specific custom data field (could be json, xml, etc)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GrantedIfPlayerHas",
          "description": "array of unique item Id's that, if the player already has, will automatically place this item in a players inventory",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Consumable",
          "description": "If set, makes this item consumable and sets consumable properties",
          "jsontype": "Object",
          "actualtype": "CatalogItemConsumableInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Container",
          "description": "If set, makes this item a container and sets container properties",
          "jsontype": "Object",
          "actualtype": "CatalogItemContainerInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Bundle",
          "description": "If set, makes this item a bundle and sets bundle properties",
          "jsontype": "Object",
          "actualtype": "CatalogItemBundleInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CatalogItemBundleInfo": {
      "name": "CatalogItemBundleInfo",
      "properties": [
        {
          "name": "BundledItems",
          "description": "array of Unique item id's that this item will grant you once you have this item in your inventory",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundledResultTables",
          "description": "array of result table id's that this item will reference and randomly create items from",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundledVirtualCurrencies",
          "description": "Virtual currencies contained in this item",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "CatalogItemConsumableInfo": {
      "name": "CatalogItemConsumableInfo",
      "properties": [
        {
          "name": "UsageCount",
          "description": "number of times this object can be used",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "UsagePeriod",
          "description": "duration of how long this item is viable after player aqquires it (in seconds) (optional)",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "UsagePeriodGroup",
          "description": "All items that have the same value in this string get their expiration dates added together.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CatalogItemContainerInfo": {
      "name": "CatalogItemContainerInfo",
      "properties": [
        {
          "name": "KeyItemId",
          "description": "unique item id that, if in posession, the object unlocks and provides the player with content items",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemContents",
          "description": "array of Unique item id's that this item will grant you once you have opened it",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ResultTableContents",
          "description": "array of result table id's that this item will reference and randomly create items from",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrencyContents",
          "description": "Virtual currencies contained in this item",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "Currency": {
      "name": "Currency",
      "isenum": true,
      "enumvalues": [
        {
          "name": "USD"
        },
        {
          "name": "GBP"
        },
        {
          "name": "EUR"
        },
        {
          "name": "RUB"
        },
        {
          "name": "BRL"
        },
        {
          "name": "CIS"
        },
        {
          "name": "CAD"
        }
      ]
    },
    "GetCatalogItemsRequest": {
      "name": "GetCatalogItemsRequest",
      "properties": [
        {
          "name": "CatalogVersion",
          "description": "which catalog is being requested",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetCatalogItemsResult": {
      "name": "GetCatalogItemsResult",
      "properties": [
        {
          "name": "Catalog",
          "description": "array of items which can be purchased",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetTitleDataRequest": {
      "name": "GetTitleDataRequest",
      "properties": [
        {
          "name": "Keys",
          "description": " array of keys to get back data from the TitleData data blob, set by the admin tools",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetTitleDataResult": {
      "name": "GetTitleDataResult",
      "properties": [
        {
          "name": "Data",
          "description": "a dictionary object of key / value pairs",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetUserAccountInfoRequest": {
      "name": "GetUserAccountInfoRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose information is being requested",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetUserAccountInfoResult": {
      "name": "GetUserAccountInfoResult",
      "properties": [
        {
          "name": "UserInfo",
          "description": "PlayFab unique identifier of the user whose information was requested",
          "jsontype": "Object",
          "actualtype": "UserAccountInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetUserDataRequest": {
      "name": "GetUserDataRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose custom data is being requested",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Keys",
          "description": "specific keys to search for in the custom user data",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetUserDataResult": {
      "name": "GetUserDataResult",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose custom data is being returned",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Data",
          "description": "user specific data for this title",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetUserInventoryRequest": {
      "name": "GetUserInventoryRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose inventory is being requested",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CatalogVersion",
          "description": "used to limit results to only those from a specific catalog version",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetUserInventoryResult": {
      "name": "GetUserInventoryResult",
      "properties": [
        {
          "name": "Inventory",
          "description": "array of inventory items belonging to the user",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GrantItemsToUsersRequest": {
      "name": "GrantItemsToUsersRequest",
      "properties": [
        {
          "name": "CatalogVersion",
          "description": "catalog version from which items are to be granted",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ItemGrants",
          "description": "array of items to grant and the users to whom the items are to be granted",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ItemGrant",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GrantItemsToUsersResult": {
      "name": "GrantItemsToUsersResult",
      "properties": [
        {
          "name": "ItemGrantResults",
          "description": "array of items granted to users",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ItemGrantResult",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "ItemGrant": {
      "name": "ItemGrant",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user to whom the catalog item is to be granted",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ItemId",
          "description": "unique identifier of the catalog item to be granted to the user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Annotation",
          "description": "string detailing any additional information concerning this operation",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ItemGrantResult": {
      "name": "ItemGrantResult",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user to whom the catalog item is to be granted",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ItemId",
          "description": "unique identifier of the catalog item to be granted to the user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Annotation",
          "description": "string detailing any additional information concerning this operation",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Result",
          "description": "result of this operation",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "ItemInstance": {
      "name": "ItemInstance",
      "properties": [
        {
          "name": "ItemId",
          "description": "Object name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemInstanceId",
          "description": "unique item id",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemClass",
          "description": "class name object belongs to",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PurchaseDate",
          "description": "date purchased",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Expiration",
          "description": "date object will expire (optional)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "RemainingUses",
          "description": "number of remaining uses (optional)",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "Annotation",
          "description": "game specific comment",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CatalogVersion",
          "description": "catalog version that this item is part of",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundleParent",
          "description": "Unique ID of the parent of where this item may have come from (e.g. if it comes from a crate or coupon)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ModifyUserVirtualCurrencyResult": {
      "name": "ModifyUserVirtualCurrencyResult",
      "properties": [
        {
          "name": "VirtualCurrency",
          "description": "name of the virtual currency which was modified",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Balance",
          "description": "balance of the virtual currency after modification",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "NotifyMatchmakerPlayerLeftRequest": {
      "name": "NotifyMatchmakerPlayerLeftRequest",
      "properties": [
        {
          "name": "ServerId",
          "description": "unique identifier of the Game Server Instance the user is leaving",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user that is leaving the Game Server Instance",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "NotifyMatchmakerPlayerLeftResult": {
      "name": "NotifyMatchmakerPlayerLeftResult",
      "properties": [
        {
          "name": "PlayerState",
          "description": "state of user leaving the Game Server Instance",
          "jsontype": "String",
          "actualtype": "PlayerConnectionState",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "PlayerConnectionState": {
      "name": "PlayerConnectionState",
      "isenum": true,
      "enumvalues": [
        {
          "name": "Unassigned"
        },
        {
          "name": "Connecting"
        },
        {
          "name": "Participating"
        },
        {
          "name": "Participated"
        },
        {
          "name": "Reconnecting"
        }
      ]
    },
    "RedeemMatchmakerTicketRequest": {
      "name": "RedeemMatchmakerTicketRequest",
      "properties": [
        {
          "name": "Ticket",
          "description": "server authorization ticket passed back from a call to Matchmake or StartGame",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "IP",
          "description": "IP Address of the Game Server Instance that is asking for validation of the authorization ticket",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ServerId",
          "description": "unique identifier of the Game Server Instance that is asking for validation of the authorization ticket",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "RedeemMatchmakerTicketResult": {
      "name": "RedeemMatchmakerTicketResult",
      "properties": [
        {
          "name": "TicketIsValid",
          "description": "boolean indicating whether the ticket was validated by the PlayFab service",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        },
        {
          "name": "Error",
          "description": "error value if the ticket was not validated",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "UserInfo",
          "description": "user account information for the user validated",
          "jsontype": "Object",
          "actualtype": "UserAccountInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "SetTitleDataRequest": {
      "name": "SetTitleDataRequest",
      "properties": [
        {
          "name": "Key",
          "description": "key we want to set a value on (note, this is additive - will only replace an existing key's value if they are the same name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Value",
          "description": "new value to set",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "SetTitleDataResult": {
      "name": "SetTitleDataResult",
      "properties": [
        {
          "name": "Key",
          "description": "key that was set",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Value",
          "description": "new value set for key",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "SubtractUserVirtualCurrencyRequest": {
      "name": "SubtractUserVirtualCurrencyRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose virtual currency balance is to be decremented",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "VirtualCurrency",
          "description": "name of the virtual currency which is to be decremented",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Amount",
          "description": "amount to be subtracted from the user balance of the specified virtual currency",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "TitleActivationStatus": {
      "name": "TitleActivationStatus",
      "isenum": true,
      "enumvalues": [
        {
          "name": "None"
        },
        {
          "name": "ActivatedTitleKey"
        },
        {
          "name": "PendingSteam"
        },
        {
          "name": "ActivatedSteam"
        },
        {
          "name": "RevokedSteam"
        }
      ]
    },
    "UpdateUserDataRequest": {
      "name": "UpdateUserDataRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose custom data is being updated",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Data",
          "description": "data to be written to the user's custom data",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UpdateUserDataResult": {
      "name": "UpdateUserDataResult",
      "properties": []
    },
    "UserAccountInfo": {
      "name": "UserAccountInfo",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "unique id for account",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Created",
          "description": "time / date account was created",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "Username",
          "description": "account name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TitleInfo",
          "description": "specific game title information",
          "jsontype": "Object",
          "actualtype": "UserTitleInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "PrivateInfo",
          "description": "user's private account into",
          "jsontype": "Object",
          "actualtype": "UserPrivateAccountInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "FacebookInfo",
          "description": "facebook information (if linked)",
          "jsontype": "Object",
          "actualtype": "UserFacebookInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "SteamInfo",
          "description": "steam information (if linked)",
          "jsontype": "Object",
          "actualtype": "UserSteamInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "GameCenterInfo",
          "description": "gamecenter information (if linked)",
          "jsontype": "Object",
          "actualtype": "UserGameCenterInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UserFacebookInfo": {
      "name": "UserFacebookInfo",
      "properties": [
        {
          "name": "FacebookId",
          "description": "facebook id",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FacebookUsername",
          "description": "facebook username",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FacebookDisplayname",
          "description": "facebook display name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserGameCenterInfo": {
      "name": "UserGameCenterInfo",
      "properties": [
        {
          "name": "GameCenterId",
          "description": "gamecenter id if account is linked",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserOrigination": {
      "name": "UserOrigination",
      "isenum": true,
      "enumvalues": [
        {
          "name": "Organic"
        },
        {
          "name": "Steam"
        },
        {
          "name": "Google"
        },
        {
          "name": "Amazon"
        },
        {
          "name": "Facebook"
        },
        {
          "name": "Kongregate"
        },
        {
          "name": "GamersFirst"
        },
        {
          "name": "Unknown"
        },
        {
          "name": "IOS"
        },
        {
          "name": "LoadTest"
        },
        {
          "name": "Android"
        }
      ]
    },
    "UserPrivateAccountInfo": {
      "name": "UserPrivateAccountInfo",
      "properties": [
        {
          "name": "Email",
          "description": "Email address",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserSteamInfo": {
      "name": "UserSteamInfo",
      "properties": [
        {
          "name": "SteamId",
          "description": "steam id",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SteamCountry",
          "description": "if account is linked to steam, this is the country that steam reports the player being in",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SteamCurrency",
          "description": "Currency set in the user's steam account",
          "jsontype": "String",
          "actualtype": "Currency",
          "isenum": true,
          "optional": true
        },
        {
          "name": "SteamActivationStatus",
          "description": "STEAM specific - what stage of game ownership is the user at with Steam",
          "jsontype": "String",
          "actualtype": "TitleActivationStatus",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "UserTitleInfo": {
      "name": "UserTitleInfo",
      "properties": [
        {
          "name": "DisplayName",
          "description": "displayable game name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Origination",
          "description": "optional value that details where the user originated",
          "jsontype": "String",
          "actualtype": "UserOrigination",
          "isenum": true,
          "optional": true
        },
        {
          "name": "Created",
          "description": "When this object was created. Title specific reporting for user creation time should be done against this rather than the User created field since account creation can differ significantly between title registration.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "LastLogin",
          "description": "Last time the user logged in to this title",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "FirstLogin",
          "description": " Time the user first logged in. This can be different from when the UTD was created. For example we create a UTD when issuing a beta key. An arbitrary amount of time can pass before the user actually logs in.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        }
      ]
    }
  },
  "calls": [
    {
      "name": "GetUserAccountInfo",
      "summary": "Retrieves the relevant details for a specified user",
      "requestDetails": "This API allows for access to details regarding a user in the PlayFab service, usually for purposes of customer support. Note that data returned may be Personally Identifying Information (PII), such as email address, and so care should be taken in how this data is stored and managed. Since this call will always return the relevant information for users who have accessed the title, the recommendation is to not store this data locally.",
      "subgroup": "Account Management",
      "url": "/Server/GetUserAccountInfo",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserAccountInfoRequest",
      "result": "GetUserAccountInfoResult",
      "seeAlso": [
        "GetUserInventory"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserData",
      "summary": "Retrieves the title-specific custom data for the user which is readable and writable by the client",
      "requestDetails": "Data is stored as an arbitrary JSON object of key-value pairs. If the Keys parameter is provided, the custom data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "url": "/Server/GetUserData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserDataRequest",
      "result": "GetUserDataResult",
      "seeAlso": [
        "UpdateUserData",
        "GetUserReadOnlyData",
        "UpdateUserReadOnlyData",
        "GetUserInternalData",
        "UpdateUserInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserInternalData",
      "summary": "Retrieves the title-specific custom data for the user which cannot be accessed by the client",
      "requestDetails": "Data is stored as an arbitrary JSON object of key-value pairs. If the Keys parameter is provided, the custom data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "url": "/Server/GetUserInternalData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserDataRequest",
      "result": "GetUserDataResult",
      "seeAlso": [
        "GetUserData",
        "UpdateUserData",
        "GetUserReadOnlyData",
        "UpdateUserReadOnlyData",
        "UpdateUserInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserReadOnlyData",
      "summary": "Retrieves the title-specific custom data for the user which can only be read by the client",
      "requestDetails": "Data is stored as an arbitrary JSON object of key-value pairs. If the Keys parameter is provided, the custom data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "url": "/Server/GetUserReadOnlyData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserDataRequest",
      "result": "GetUserDataResult",
      "seeAlso": [
        "GetUserData",
        "UpdateUserData",
        "UpdateUserReadOnlyData",
        "GetUserInternalData",
        "UpdateUserInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UpdateUserData",
      "summary": "Updates the title-specific custom data for the user which is readable and writable by the client",
      "requestDetails": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, while keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call.",
      "subgroup": "Player Data Management",
      "url": "/Server/UpdateUserData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateUserDataRequest",
      "result": "UpdateUserDataResult",
      "seeAlso": [
        "GetUserData",
        "GetUserReadOnlyData",
        "UpdateUserReadOnlyData",
        "GetUserInternalData",
        "UpdateUserInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UpdateUserInternalData",
      "summary": "Updates the title-specific custom data for the user which cannot be accessed by the client",
      "requestDetails": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call.",
      "subgroup": "Player Data Management",
      "url": "/Server/UpdateUserInternalData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateUserDataRequest",
      "result": "UpdateUserDataResult",
      "seeAlso": [
        "GetUserData",
        "UpdateUserData",
        "GetUserReadOnlyData",
        "UpdateUserReadOnlyData",
        "GetUserInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UpdateUserReadOnlyData",
      "summary": "Updates the title-specific custom data for the user which can only be read by the client",
      "requestDetails": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call.",
      "subgroup": "Player Data Management",
      "url": "/Server/UpdateUserReadOnlyData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateUserDataRequest",
      "result": "UpdateUserDataResult",
      "seeAlso": [
        "GetUserData",
        "UpdateUserData",
        "GetUserReadOnlyData",
        "GetUserInternalData",
        "UpdateUserInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetCatalogItems",
      "summary": "Retrieves the specified version of the title's catalog of virtual goods, including all defined properties",
      "subgroup": "Title-Wide Data Management",
      "url": "/Server/GetCatalogItems",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetCatalogItemsRequest",
      "result": "GetCatalogItemsResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetTitleData",
      "summary": "Retrieves the key-value store of custom title settings",
      "requestDetails": "This API is designed to return title specific values which can be read, but not written to, by the client. For example, a developer could choose to store values which modify the user experience, such as enemy spawn rates, weapon strengths, movement speeds, etc. This allows a developer to update the title without the need to create, test, and ship a new build.",
      "subgroup": "Title-Wide Data Management",
      "url": "/Server/GetTitleData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetTitleDataRequest",
      "result": "GetTitleDataResult",
      "seeAlso": [
        "SetTitleData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "SetTitleData",
      "summary": "Updates the key-value store of custom title settings",
      "requestDetails": "This API is designed to store title specific values which can be read, but not written to, by the client. For example, a developer could choose to store values which modify the user experience, such as enemy spawn rates, weapon strengths, movement speeds, etc. This allows a developer to update the title without the need to create, test, and ship a new build. This operation is additive. If a Key does not exist in the current dataset, it will be added with the specified Value. If it already exists, the Value for that key will be overwritten with the new Value.",
      "subgroup": "Title-Wide Data Management",
      "url": "/Server/SetTitleData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "SetTitleDataRequest",
      "result": "SetTitleDataResult",
      "seeAlso": [
        "GetTitleData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "AddUserVirtualCurrency",
      "summary": "Increments the specified virtual currency by the stated amount",
      "subgroup": "Player Item Management",
      "url": "/Server/AddUserVirtualCurrency",
      "auth": "SecretKey",
      "method": "POST",
      "request": "AddUserVirtualCurrencyRequest",
      "result": "ModifyUserVirtualCurrencyResult",
      "seeAlso": [
        "SubtractUserVirtualCurrency"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserInventory",
      "summary": "Retrieves the specified user's current inventory of virtual goods",
      "requestDetails": "All items currently in the user inventory will be returned, irrespective of how they were acquired (via purchasing, grants, coupons, etc.). Items that are expired, fully consumed, or are no longer valid are not considered to be in the user's current inventory, and so will not be not included.",
      "subgroup": "Player Item Management",
      "url": "/Server/GetUserInventory",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserInventoryRequest",
      "result": "GetUserInventoryResult",
      "seeAlso": [
        "GetUserAccountInfo"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GrantItemsToUsers",
      "summary": "Adds the specified items to the specified user inventories",
      "requestDetails": "This function directly adds inventory items to user inventories. As a result of this operations, the user will not be charged any transaction fee, regardless of the inventory item catalog definition.",
      "subgroup": "Player Item Management",
      "url": "/Server/GrantItemsToUsers",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GrantItemsToUsersRequest",
      "result": "GrantItemsToUsersResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "SubtractUserVirtualCurrency",
      "summary": "Decrements the specified virtual currency by the stated amount",
      "subgroup": "Player Item Management",
      "url": "/Server/SubtractUserVirtualCurrency",
      "auth": "SecretKey",
      "method": "POST",
      "request": "SubtractUserVirtualCurrencyRequest",
      "result": "ModifyUserVirtualCurrencyResult",
      "seeAlso": [
        "AddUserVirtualCurrency"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "NotifyMatchmakerPlayerLeft",
      "summary": "Informs the PlayFab match-making service that the user specified has left the Game Server Instance",
      "subgroup": "Matchmaking APIs",
      "url": "/Server/NotifyMatchmakerPlayerLeft",
      "auth": "SecretKey",
      "method": "POST",
      "request": "NotifyMatchmakerPlayerLeftRequest",
      "result": "NotifyMatchmakerPlayerLeftResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "RedeemMatchmakerTicket",
      "summary": "Validates a Game Server session ticket and returns details about the user",
      "requestDetails": "This function is used by a Game Server Instance to validate with the PlayFab service that a user has been registered as connected to the server. The Ticket is provided to the client either as a result of a call to StartGame or Matchmake, each of which return a Ticket specific to the Game Server Instance. This function will fail in any case where the Ticket presented is not valid for the specific Game Server Instance making the call. Note that data returned may be Personally Identifying Information (PII), such as email address, and so care should be taken in how this data is stored and managed. Since this call will always return the relevant information for users who have accessed the title, the recommendation is to not store this data locally.",
      "subgroup": "Matchmaking APIs",
      "url": "/Server/RedeemMatchmakerTicket",
      "auth": "SecretKey",
      "method": "POST",
      "request": "RedeemMatchmakerTicketRequest",
      "result": "RedeemMatchmakerTicketResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "AwardSteamAchievement",
      "summary": "Awards the specified users the specified Steam achievements",
      "subgroup": "Steam-Specific APIs",
      "url": "/Server/AwardSteamAchievement",
      "auth": "SecretKey",
      "method": "POST",
      "request": "AwardSteamAchievementRequest",
      "result": "AwardSteamAchievementResult",
      "errors": [
        "InvalidParams"
      ]
    }
  ],
  "subgroups": [
    {
      "name": "Account Management",
      "methods": [
        "GetUserAccountInfo"
      ]
    },
    {
      "name": "Player Data Management",
      "methods": [
        "GetUserData",
        "GetUserInternalData",
        "GetUserReadOnlyData",
        "UpdateUserData",
        "UpdateUserInternalData",
        "UpdateUserReadOnlyData"
      ]
    },
    {
      "name": "Title-Wide Data Management",
      "methods": [
        "GetCatalogItems",
        "GetTitleData",
        "SetTitleData"
      ]
    },
    {
      "name": "Player Item Management",
      "methods": [
        "AddUserVirtualCurrency",
        "GetUserInventory",
        "GrantItemsToUsers",
        "SubtractUserVirtualCurrency"
      ]
    },
    {
      "name": "Matchmaking APIs",
      "methods": [
        "NotifyMatchmakerPlayerLeft",
        "RedeemMatchmakerTicket"
      ]
    },
    {
      "name": "Steam-Specific APIs",
      "methods": [
        "AwardSteamAchievement"
      ]
    }
  ],
  "errors": {
    "Success": {
      "id": 0,
      "name": "Success"
    },
    "InvalidParams": {
      "id": 1000,
      "name": "InvalidParams"
    },
    "AccountNotFound": {
      "id": 1001,
      "name": "AccountNotFound"
    },
    "AccountBanned": {
      "id": 1002,
      "name": "AccountBanned"
    },
    "InvalidUsernameOrPassword": {
      "id": 1003,
      "name": "InvalidUsernameOrPassword"
    },
    "InvalidTitleId": {
      "id": 1004,
      "name": "InvalidTitleId"
    },
    "InvalidEmailAddress": {
      "id": 1005,
      "name": "InvalidEmailAddress"
    },
    "EmailAddressNotAvailable": {
      "id": 1006,
      "name": "EmailAddressNotAvailable"
    },
    "InvalidUsername": {
      "id": 1007,
      "name": "InvalidUsername"
    },
    "InvalidPassword": {
      "id": 1008,
      "name": "InvalidPassword"
    },
    "UsernameNotAvailable": {
      "id": 1009,
      "name": "UsernameNotAvailable"
    },
    "InvalidSteamTicket": {
      "id": 1010,
      "name": "InvalidSteamTicket"
    },
    "AccountAlreadyLinked": {
      "id": 1011,
      "name": "AccountAlreadyLinked"
    },
    "LinkedAccountAlreadyClaimed": {
      "id": 1012,
      "name": "LinkedAccountAlreadyClaimed"
    },
    "InvalidFacebookToken": {
      "id": 1013,
      "name": "InvalidFacebookToken"
    },
    "AccountNotLinked": {
      "id": 1014,
      "name": "AccountNotLinked"
    },
    "FailedByPaymentProvider": {
      "id": 1015,
      "name": "FailedByPaymentProvider"
    },
    "CouponCodeNotFound": {
      "id": 1016,
      "name": "CouponCodeNotFound"
    },
    "InvalidContainerItem": {
      "id": 1017,
      "name": "InvalidContainerItem"
    },
    "ContainerNotOwned": {
      "id": 1018,
      "name": "ContainerNotOwned"
    },
    "KeyNotOwned": {
      "id": 1019,
      "name": "KeyNotOwned"
    },
    "InvalidItemIdInTable": {
      "id": 1020,
      "name": "InvalidItemIdInTable"
    },
    "InvalidReceipt": {
      "id": 1021,
      "name": "InvalidReceipt"
    },
    "ReceiptAlreadyUsed": {
      "id": 1022,
      "name": "ReceiptAlreadyUsed"
    },
    "ReceiptCancelled": {
      "id": 1023,
      "name": "ReceiptCancelled"
    },
    "GameNotFound": {
      "id": 1024,
      "name": "GameNotFound"
    },
    "GameModeNotFound": {
      "id": 1025,
      "name": "GameModeNotFound"
    },
    "InvalidGoogleToken": {
      "id": 1026,
      "name": "InvalidGoogleToken"
    },
    "BuildNotFound": {
      "id": 1027,
      "name": "BuildNotFound"
    },
    "PlayerNotInGame": {
      "id": 1028,
      "name": "PlayerNotInGame"
    },
    "InvalidTicket": {
      "id": 1029,
      "name": "InvalidTicket"
    },
    "InvalidOrderInfo": {
      "id": 1030,
      "name": "InvalidOrderInfo"
    },
    "RegistrationIncomplete": {
      "id": 1031,
      "name": "RegistrationIncomplete"
    },
    "InvalidPlatform": {
      "id": 1032,
      "name": "InvalidPlatform"
    },
    "SteamApplicationNotOwned": {
      "id": 1033,
      "name": "SteamApplicationNotOwned"
    },
    "WrongSteamAccount": {
      "id": 1034,
      "name": "WrongSteamAccount"
    },
    "TitleNotActivated": {
      "id": 1035,
      "name": "TitleNotActivated"
    },
    "RegistrationSessionNotFound": {
      "id": 1036,
      "name": "RegistrationSessionNotFound"
    },
    "NoSuchMod": {
      "id": 1037,
      "name": "NoSuchMod"
    },
    "FileNotFound": {
      "id": 1038,
      "name": "FileNotFound"
    },
    "DuplicateEmail": {
      "id": 1039,
      "name": "DuplicateEmail"
    },
    "ItemNotFound": {
      "id": 1040,
      "name": "ItemNotFound"
    },
    "ItemNotOwned": {
      "id": 1041,
      "name": "ItemNotOwned"
    },
    "ItemNotRecycleable": {
      "id": 1042,
      "name": "ItemNotRecycleable"
    },
    "ItemNotAffordable": {
      "id": 1043,
      "name": "ItemNotAffordable"
    },
    "InvalidVirtualCurrency": {
      "id": 1044,
      "name": "InvalidVirtualCurrency"
    },
    "WrongVirtualCurrency": {
      "id": 1045,
      "name": "WrongVirtualCurrency"
    },
    "WrongPrice": {
      "id": 1046,
      "name": "WrongPrice"
    },
    "NonPositiveValue": {
      "id": 1047,
      "name": "NonPositiveValue"
    },
    "InvalidRegion": {
      "id": 1048,
      "name": "InvalidRegion"
    },
    "RegionAtCapacity": {
      "id": 1049,
      "name": "RegionAtCapacity"
    },
    "ServerFailedToStart": {
      "id": 1050,
      "name": "ServerFailedToStart"
    },
    "NameNotAvailable": {
      "id": 1051,
      "name": "NameNotAvailable"
    },
    "InsufficientFunds": {
      "id": 1052,
      "name": "InsufficientFunds"
    },
    "InvalidDeviceID": {
      "id": 1053,
      "name": "InvalidDeviceID"
    },
    "InvalidPushNotificationToken": {
      "id": 1054,
      "name": "InvalidPushNotificationToken"
    },
    "NoRemainingUses": {
      "id": 1055,
      "name": "NoRemainingUses"
    },
    "InvalidPaymentProvider": {
      "id": 1056,
      "name": "InvalidPaymentProvider"
    },
    "PurchaseInitializationFailure": {
      "id": 1057,
      "name": "PurchaseInitializationFailure"
    },
    "DuplicateUsername": {
      "id": 1058,
      "name": "DuplicateUsername"
    },
    "InvalidBuyerInfo": {
      "id": 1059,
      "name": "InvalidBuyerInfo"
    },
    "NoGameModeParamsSet": {
      "id": 1060,
      "name": "NoGameModeParamsSet"
    }
  },
  "errorList": [
    "Success",
    "InvalidParams",
    "AccountNotFound",
    "AccountBanned",
    "InvalidUsernameOrPassword",
    "InvalidTitleId",
    "InvalidEmailAddress",
    "EmailAddressNotAvailable",
    "InvalidUsername",
    "InvalidPassword",
    "UsernameNotAvailable",
    "InvalidSteamTicket",
    "AccountAlreadyLinked",
    "LinkedAccountAlreadyClaimed",
    "InvalidFacebookToken",
    "AccountNotLinked",
    "FailedByPaymentProvider",
    "CouponCodeNotFound",
    "InvalidContainerItem",
    "ContainerNotOwned",
    "KeyNotOwned",
    "InvalidItemIdInTable",
    "InvalidReceipt",
    "ReceiptAlreadyUsed",
    "ReceiptCancelled",
    "GameNotFound",
    "GameModeNotFound",
    "InvalidGoogleToken",
    "BuildNotFound",
    "PlayerNotInGame",
    "InvalidTicket",
    "InvalidOrderInfo",
    "RegistrationIncomplete",
    "InvalidPlatform",
    "SteamApplicationNotOwned",
    "WrongSteamAccount",
    "TitleNotActivated",
    "RegistrationSessionNotFound",
    "NoSuchMod",
    "FileNotFound",
    "DuplicateEmail",
    "ItemNotFound",
    "ItemNotOwned",
    "ItemNotRecycleable",
    "ItemNotAffordable",
    "InvalidVirtualCurrency",
    "WrongVirtualCurrency",
    "WrongPrice",
    "NonPositiveValue",
    "InvalidRegion",
    "RegionAtCapacity",
    "ServerFailedToStart",
    "NameNotAvailable",
    "InsufficientFunds",
    "InvalidDeviceID",
    "InvalidPushNotificationToken",
    "NoRemainingUses",
    "InvalidPaymentProvider",
    "PurchaseInitializationFailure",
    "DuplicateUsername",
    "InvalidBuyerInfo",
    "NoGameModeParamsSet"
  ]
}