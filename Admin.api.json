{
  "name": "Admin",
  "url": "/Admin",
  "description": "APIs for managing title configurations, uploaded Game Server code executables, and user data",
  "revision": "1.0.1",
  "datatypes": {
    "AddNewsRequest": {
      "name": "AddNewsRequest",
      "properties": [
        {
          "name": "Timestamp",
          "description": "Time this news was published. If not set, defaults to now.",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "Title",
          "description": "Title (headline) of the news item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Body",
          "description": "Body text of the news",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "AddNewsResult": {
      "name": "AddNewsResult",
      "properties": [
        {
          "name": "NewsId",
          "description": "Unique id of the new news item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "AddServerBuildRequest": {
      "name": "AddServerBuildRequest",
      "properties": [
        {
          "name": "BuildId",
          "description": "unique identifier for the build executable",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "AdditionalCommandLineArguments",
          "description": "appended to the end of the command line when starting game servers",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ActiveRegions",
          "description": "regions in which this build should be running / available",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": true
        },
        {
          "name": "Comment",
          "description": "developer comment(s) for this build",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "MaxGamesPerHost",
          "description": "maximum number of game server instances that can run on a single host machine",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "AddServerBuildResult": {
      "name": "AddServerBuildResult",
      "properties": [
        {
          "name": "BuildId",
          "description": "unique identifier for this build executable",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ActiveRegions",
          "description": "array of regions where this build can used, when it is active",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": true
        },
        {
          "name": "MaxGamesPerHost",
          "description": "maximum number of game server instances that can run on a single host machine",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "AdditionalCommandLineArguments",
          "description": "appended to the end of the command line when starting game servers",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Comment",
          "description": "developer comment(s) for this build",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Timestamp",
          "description": "time this build was last modified (or uploaded, if this build has never been modified)",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "TitleId",
          "description": "the unique identifier for the title, found in the Settings > Game Properties section of the PlayFab developer site when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Status",
          "description": "the current status of the build validation and processing steps",
          "jsontype": "String",
          "actualtype": "GameBuildStatus",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "AddUserVirtualCurrencyRequest": {
      "name": "AddUserVirtualCurrencyRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose virtual currency balance is to be incremented",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "VirtualCurrency",
          "description": "name of the virtual currency which is to be incremented",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Amount",
          "description": "amount to be added to the user balance of the specified virtual currency",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "AddVirtualCurrencyTypesRequest": {
      "name": "AddVirtualCurrencyTypesRequest",
      "properties": [
        {
          "name": "VirtualCurrencies",
          "description": "List of virtual currency names to add as valid virtual currencies for this title",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "VirtualCurrencyData",
          "isclass": true,
          "optional": false
        }
      ]
    },
    "BlankResult": {
      "name": "BlankResult",
      "properties": []
    },
    "CatalogItem": {
      "name": "CatalogItem",
      "description": "A purchasable item from the item catalog",
      "sortKey": "ItemId",
      "properties": [
        {
          "name": "ItemId",
          "description": "unique identifier for this item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ItemClass",
          "description": "class to which the item belongs",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CatalogVersion",
          "description": "catalog item for this item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "DisplayName",
          "description": "text name for the item, to show in-game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Description",
          "description": "text description of item, to show in-game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrencyPrices",
          "description": "price of this item in virtual currencies and \"RM\" (the base Real Money purchase price, in USD pennies)",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "RealCurrencyPrices",
          "description": "override prices for this item for specific currencies",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "ReleaseDate",
          "description": "the date this item becomes available for purchase",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "ExpirationDate",
          "description": "the date this item will no longer be available for purchase",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "IsFree",
          "description": "(deprecated)",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "NotForSale",
          "description": "can this item be purchased (if not, it can still be granted by a server-based operation, such as a loot drop from a monster)",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "NotForTrade",
          "description": "can an instance of this item be exchanged between players?",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        },
        {
          "name": "Tags",
          "description": "list of item tags",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CustomData",
          "description": "game specific custom data",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "GrantedIfPlayerHas",
          "description": "array of ItemId values which are evaluated when any item is added to the player inventory - if all items in this array are present, the this item will also be added to the player inventory",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Consumable",
          "description": "defines the consumable properties (number of uses, timeout) for the item",
          "jsontype": "Object",
          "actualtype": "CatalogItemConsumableInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Container",
          "description": "defines the container properties for the item - what items it contains, including random drop tables and virtual currencies, and what item (if any) is required to open it via the UnlockContainerItem API",
          "jsontype": "Object",
          "actualtype": "CatalogItemContainerInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "Bundle",
          "description": "defines the bundle properties for the item - bundles are items which contain other items, including random drop tables and virtual currencies",
          "jsontype": "Object",
          "actualtype": "CatalogItemBundleInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "CatalogItemBundleInfo": {
      "name": "CatalogItemBundleInfo",
      "properties": [
        {
          "name": "BundledItems",
          "description": "unique ItemId values for all items which will be added to the player inventory when the bundle is added",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundledResultTables",
          "description": "unique TableId values for all RandomResultTable objects which are part of the bundle (random tables will be resolved and add the relevant items to the player inventory when the bundle is added)",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundledVirtualCurrencies",
          "description": "virtual currency types and balances which will be added to the player inventory when the bundle is added",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "CatalogItemConsumableInfo": {
      "name": "CatalogItemConsumableInfo",
      "properties": [
        {
          "name": "UsageCount",
          "description": "number of times this object can be used, after which it will be removed from the player inventory",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "UsagePeriod",
          "description": "duration in seconds for how long the item will remain in the player inventory - once elapsed, the item will be removed",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "UsagePeriodGroup",
          "description": "all inventory item instances in the player inventory sharing a non-null UsagePeriodGroup have their UsagePeriod values added together, and share the result - when that period has elapsed, all the items in the group will be removed",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "CatalogItemContainerInfo": {
      "name": "CatalogItemContainerInfo",
      "description": "Containers are inventory items that can hold other items defined in the catalog, as well as virtual currency, which is added to the player inventory when the container is unlocked, using the UnlockContainerItem API. The items can be anything defined in the catalog, as well as RandomResultTable objects which will be resolved when the container is unlocked. Containers and their keys should be defined as Consumable (having a limited number of uses) in their catalog defintiions, unless the intent is for the player to be able to re-use them infinitely.",
      "properties": [
        {
          "name": "KeyItemId",
          "description": "ItemId for the catalog item used to unlock the container, if any (if not specified, a call to UnlockContainerItem will open the container, adding the contents to the player inventory and currency balances)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemContents",
          "description": "unique ItemId values for all items which will be added to the player inventory, once the container has been unlocked",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ResultTableContents",
          "description": "unique TableId values for all RandomResultTable objects which are part of the container (once unlocked, random tables will be resolved and add the relevant items to the player inventory)",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrencyContents",
          "description": "virtual currency types and balances which will be added to the player inventory when the container is unlocked",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "Currency": {
      "name": "Currency",
      "isenum": true,
      "enumvalues": [
        {
          "name": "USD"
        },
        {
          "name": "GBP"
        },
        {
          "name": "EUR"
        },
        {
          "name": "RUB"
        },
        {
          "name": "BRL"
        },
        {
          "name": "CIS"
        },
        {
          "name": "CAD"
        }
      ]
    },
    "GameBuildStatus": {
      "name": "GameBuildStatus",
      "isenum": true,
      "enumvalues": [
        {
          "name": "Available"
        },
        {
          "name": "Validating"
        },
        {
          "name": "InvalidBuildPackage"
        },
        {
          "name": "Processing"
        },
        {
          "name": "FailedToProcess"
        }
      ]
    },
    "GameModeInfo": {
      "name": "GameModeInfo",
      "properties": [
        {
          "name": "Gamemode",
          "description": "specific game mode type",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "MinPlayerCount",
          "description": "minimum user count required for this Game Server Instance to continue (usually 1)",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        },
        {
          "name": "MaxPlayerCount",
          "description": "maximum user count a specific Game Server Instance can support",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        }
      ]
    },
    "GetCatalogItemsRequest": {
      "name": "GetCatalogItemsRequest",
      "properties": [
        {
          "name": "CatalogVersion",
          "description": "which catalog is being requested",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetCatalogItemsResult": {
      "name": "GetCatalogItemsResult",
      "properties": [
        {
          "name": "Catalog",
          "description": "array of items which can be purchased",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetMatchmakerGameInfoRequest": {
      "name": "GetMatchmakerGameInfoRequest",
      "properties": [
        {
          "name": "LobbyId",
          "description": "unique identifier of the lobby for which info is being requested",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetMatchmakerGameInfoResult": {
      "name": "GetMatchmakerGameInfoResult",
      "properties": [
        {
          "name": "LobbyId",
          "description": "unique identifier of the lobby ",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TitleId",
          "description": "unique identifier of the Game Server Instance for this lobby",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "StartTime",
          "description": "time when the Game Server Instance was created",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "EndTime",
          "description": "time when Game Server Instance is currently scheduled to end",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "Mode",
          "description": "game mode for this Game Server Instance",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BuildVersion",
          "description": "version identifier of the game server executable binary being run",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Region",
          "description": "region in which the Game Server Instance is running",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": true
        },
        {
          "name": "Players",
          "description": "array of unique PlayFab identifiers for users currently connected to this Game Server Instance",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ServerAddress",
          "description": "IP address for this Game Server Instance",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ServerPort",
          "description": "communication port for this Game Server Instance",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": false
        }
      ]
    },
    "GetMatchmakerGameModesRequest": {
      "name": "GetMatchmakerGameModesRequest",
      "properties": [
        {
          "name": "BuildVersion",
          "description": "previously uploaded build version for which game modes are being requested",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetMatchmakerGameModesResult": {
      "name": "GetMatchmakerGameModesResult",
      "properties": [
        {
          "name": "GameModes",
          "description": "array of game modes available for the specified build",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "GameModeInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetRandomResultTablesRequest": {
      "name": "GetRandomResultTablesRequest",
      "properties": []
    },
    "GetRandomResultTablesResult": {
      "name": "GetRandomResultTablesResult",
      "properties": [
        {
          "name": "Tables",
          "description": "array of random result tables currently available",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "RandomResultTable",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetServerBuildInfoRequest": {
      "name": "GetServerBuildInfoRequest",
      "properties": [
        {
          "name": "BuildId",
          "description": "unique identifier of the previously uploaded build executable for which information is being requested",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetServerBuildInfoResult": {
      "name": "GetServerBuildInfoResult",
      "description": "Information about particular server build",
      "sortKey": "BuildId",
      "properties": [
        {
          "name": "BuildId",
          "description": "unique identifier for this build executable",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ActiveRegions",
          "description": "array of regions where this build can used, when it is active",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": true
        },
        {
          "name": "MaxGamesPerHost",
          "description": "maximum number of game server instances that can run on a single host machine",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "Comment",
          "description": "developer comment(s) for this build",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Timestamp",
          "description": "time this build was last modified (or uploaded, if this build has never been modified)",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "TitleId",
          "description": "the unique identifier for the title, found in the Settings > Game Properties section of the PlayFab developer site when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Status",
          "description": "the current status of the build validation and processing steps",
          "jsontype": "String",
          "actualtype": "GameBuildStatus",
          "isenum": true,
          "optional": true
        },
        {
          "name": "ErrorMessage",
          "description": "error message, if any, about this build",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetServerBuildUploadURLRequest": {
      "name": "GetServerBuildUploadURLRequest",
      "properties": [
        {
          "name": "BuildId",
          "description": "unique identifier of the game server build to upload",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetServerBuildUploadURLResult": {
      "name": "GetServerBuildUploadURLResult",
      "properties": [
        {
          "name": "URL",
          "description": "pre-authorized URL for uploading the game server build package",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetStoreItemsRequest": {
      "name": "GetStoreItemsRequest",
      "properties": [
        {
          "name": "StoreId",
          "description": "unqiue identifier for the store which is being requested",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetStoreItemsResult": {
      "name": "GetStoreItemsResult",
      "properties": [
        {
          "name": "Store",
          "description": "array of items which can be purchased from this store",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "StoreItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetTitleDataRequest": {
      "name": "GetTitleDataRequest",
      "properties": [
        {
          "name": "Keys",
          "description": " array of keys to get back data from the TitleData data blob, set by the admin tools",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "GetTitleDataResult": {
      "name": "GetTitleDataResult",
      "properties": [
        {
          "name": "Data",
          "description": "a dictionary object of key / value pairs",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetUserDataRequest": {
      "name": "GetUserDataRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose custom data is being requested",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Keys",
          "description": "specific keys to search for in the custom user data",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetUserDataResult": {
      "name": "GetUserDataResult",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose custom data is being returned",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Data",
          "description": "user specific data for this title",
          "collection": "map",
          "jsontype": "Object",
          "actualtype": "UserDataRecord",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GetUserInventoryRequest": {
      "name": "GetUserInventoryRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose inventory is being requested",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CatalogVersion",
          "description": "used to limit results to only those from a specific catalog version",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "GetUserInventoryResult": {
      "name": "GetUserInventoryResult",
      "properties": [
        {
          "name": "Inventory",
          "description": "array of inventory items belonging to the user",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "ItemInstance",
          "isclass": true,
          "optional": true
        },
        {
          "name": "VirtualCurrency",
          "description": "array of virtual currency balance(s) belonging to the user",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    },
    "GrantItemsToUsersRequest": {
      "name": "GrantItemsToUsersRequest",
      "properties": [
        {
          "name": "CatalogVersion",
          "description": "catalog version from which items are to be granted",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemGrants",
          "description": "array of items to grant and the users to whom the items are to be granted",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "ItemGrant",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "GrantItemsToUsersResult": {
      "name": "GrantItemsToUsersResult",
      "properties": [
        {
          "name": "ItemGrantResults",
          "description": "array of items granted to users",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ItemGrantResult",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "ItemGrant": {
      "name": "ItemGrant",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user to whom the catalog item is to be granted",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ItemId",
          "description": "unique identifier of the catalog item to be granted to the user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Annotation",
          "description": "string detailing any additional information concerning this operation",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ItemGrantResult": {
      "name": "ItemGrantResult",
      "description": "Result of granting an item to a user",
      "sortKey": "ItemInstanceId",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user to whom the catalog item is to be granted",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemId",
          "description": "unique identifier of the catalog item to be granted to the user",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemInstanceId",
          "description": "unique instance Id of the granted item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Annotation",
          "description": "string detailing any additional information concerning this operation",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Result",
          "description": "result of this operation",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "ItemInstance": {
      "name": "ItemInstance",
      "description": "A unique instance of an item in a user's inventory",
      "sortKey": "ItemInstanceId",
      "properties": [
        {
          "name": "ItemId",
          "description": "unique identifier for the inventory item, as defined in the catalog",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemInstanceId",
          "description": "unique item identifier for this specific instance of the item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ItemClass",
          "description": "class name for the inventory item, as defined in the catalog",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "PurchaseDate",
          "description": "timestamp for when this instance was purchased",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "Expiration",
          "description": "timestamp for when this instance will expire",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "RemainingUses",
          "description": "total number of remaining uses, if this is a consumable item",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "Annotation",
          "description": "game specific comment associated with this instance when it was added to the user inventory",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "CatalogVersion",
          "description": "catalog version for the inventory item, when this instance was created",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "BundleParent",
          "description": "unique identifier for the parent inventory item, as defined in the catalog, for object which were added from a bundle or container",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ListBuildsRequest": {
      "name": "ListBuildsRequest",
      "properties": []
    },
    "ListBuildsResult": {
      "name": "ListBuildsResult",
      "properties": [
        {
          "name": "Builds",
          "description": "array of uploaded builds",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "GetServerBuildInfoResult",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "ListVirtualCurrencyTypesRequest": {
      "name": "ListVirtualCurrencyTypesRequest",
      "properties": []
    },
    "ListVirtualCurrencyTypesResult": {
      "name": "ListVirtualCurrencyTypesResult",
      "properties": [
        {
          "name": "VirtualCurrencies",
          "description": "List of virtual currency names defined for this title",
          "collection": "array",
          "isUnordered": true,
          "jsontype": "Object",
          "actualtype": "VirtualCurrencyData",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "LookupUserAccountInfoRequest": {
      "name": "LookupUserAccountInfoRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier to match against existing user accounts",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Email",
          "description": "email address to match against existing user accounts",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Username",
          "description": "PlayFab username to match against existing user accounts",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TitleDisplayName",
          "description": "title-specific username to match against existing user accounts",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "LookupUserAccountInfoResult": {
      "name": "LookupUserAccountInfoResult",
      "properties": [
        {
          "name": "UserInfo",
          "description": "user info for the user matching the request",
          "jsontype": "Object",
          "actualtype": "UserAccountInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "ModifyMatchmakerGameModesRequest": {
      "name": "ModifyMatchmakerGameModesRequest",
      "properties": [
        {
          "name": "BuildVersion",
          "description": "previously uploaded build version for which game modes are being specified",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "GameModes",
          "description": "array of game modes (Note: this will replace all game modes for the indicated build version)",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "GameModeInfo",
          "isclass": true,
          "optional": false
        }
      ]
    },
    "ModifyMatchmakerGameModesResult": {
      "name": "ModifyMatchmakerGameModesResult",
      "properties": []
    },
    "ModifyServerBuildRequest": {
      "name": "ModifyServerBuildRequest",
      "properties": [
        {
          "name": "BuildId",
          "description": "unique identifier of the previously uploaded build executable to be updated",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Timestamp",
          "description": "new timestamp",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "ActiveRegions",
          "description": "array of regions where this build can used, when it is active",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": true
        },
        {
          "name": "MaxGamesPerHost",
          "description": "maximum number of game server instances that can run on a single host machine",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "AdditionalCommandLineArguments",
          "description": "appended to the end of the command line when starting game servers",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Comment",
          "description": "developer comment(s) for this build",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "ModifyServerBuildResult": {
      "name": "ModifyServerBuildResult",
      "properties": [
        {
          "name": "BuildId",
          "description": "unique identifier for this build executable",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "ActiveRegions",
          "description": "array of regions where this build can used, when it is active",
          "collection": "array",
          "jsontype": "String",
          "actualtype": "Region",
          "isenum": true,
          "optional": true
        },
        {
          "name": "MaxGamesPerHost",
          "description": "maximum number of game server instances that can run on a single host machine",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        },
        {
          "name": "AdditionalCommandLineArguments",
          "description": "appended to the end of the command line when starting game servers",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Comment",
          "description": "developer comment(s) for this build",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Timestamp",
          "description": "time this build was last modified (or uploaded, if this build has never been modified)",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "TitleId",
          "description": "the unique identifier for the title, found in the Settings > Game Properties section of the PlayFab developer site when a title has been selected",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Status",
          "description": "the current status of the build validation and processing steps",
          "jsontype": "String",
          "actualtype": "GameBuildStatus",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "ModifyUserVirtualCurrencyResult": {
      "name": "ModifyUserVirtualCurrencyResult",
      "properties": [
        {
          "name": "VirtualCurrency",
          "description": "name of the virtual currency which was modified",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Balance",
          "description": "balance of the virtual currency after modification",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "RandomResultTable": {
      "name": "RandomResultTable",
      "properties": [
        {
          "name": "TableId",
          "description": "Unique name for this drop table",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Nodes",
          "description": "Child nodes that indicate what kind of drop table item this actually is.",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "ResultTableNode",
          "isclass": true,
          "optional": false
        }
      ]
    },
    "Region": {
      "name": "Region",
      "isenum": true,
      "enumvalues": [
        {
          "name": "USCentral"
        },
        {
          "name": "USEast"
        },
        {
          "name": "EUWest"
        },
        {
          "name": "Singapore"
        },
        {
          "name": "Japan"
        },
        {
          "name": "Brazil"
        },
        {
          "name": "Australia"
        }
      ]
    },
    "RemoveServerBuildRequest": {
      "name": "RemoveServerBuildRequest",
      "properties": [
        {
          "name": "BuildId",
          "description": "unique identifier of the previously uploaded build executable to be removed",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "RemoveServerBuildResult": {
      "name": "RemoveServerBuildResult",
      "properties": []
    },
    "ResetUserStatisticsRequest": {
      "name": "ResetUserStatisticsRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose statistics are to be reset",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "ResetUserStatisticsResult": {
      "name": "ResetUserStatisticsResult",
      "properties": []
    },
    "ResultTableNode": {
      "name": "ResultTableNode",
      "properties": [
        {
          "name": "ResultItemType",
          "description": "Whether this entry in the table is an item or a link to another table",
          "jsontype": "String",
          "actualtype": "ResultTableNodeType",
          "isenum": true,
          "optional": false
        },
        {
          "name": "ResultItem",
          "description": "Either an ItemId, or the TableId of another random result table",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Weight",
          "description": "How likely this is to be rolled - larger numbers add more weight",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "ResultTableNodeType": {
      "name": "ResultTableNodeType",
      "isenum": true,
      "enumvalues": [
        {
          "name": "ItemId"
        },
        {
          "name": "TableId"
        }
      ]
    },
    "RevokeInventoryItemRequest": {
      "name": "RevokeInventoryItemRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "unique PlayFab identifier for the user account which is to have the specified item removed",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "ItemInstanceId",
          "description": "unique PlayFab identifier for the item instance to be removed",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "RevokeInventoryResult": {
      "name": "RevokeInventoryResult",
      "properties": []
    },
    "SendAccountRecoveryEmailRequest": {
      "name": "SendAccountRecoveryEmailRequest",
      "properties": [
        {
          "name": "Email",
          "description": "email address to match against existing user accounts",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "SendAccountRecoveryEmailResult": {
      "name": "SendAccountRecoveryEmailResult",
      "properties": []
    },
    "SetTitleDataRequest": {
      "name": "SetTitleDataRequest",
      "properties": [
        {
          "name": "Key",
          "description": "key we want to set a value on (note, this is additive - will only replace an existing key's value if they are the same name.) Keys are trimmed of whitespace. Keys may not begin with the '!' character.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Value",
          "description": "new value to set",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "SetTitleDataResult": {
      "name": "SetTitleDataResult",
      "properties": []
    },
    "SetupPushNotificationRequest": {
      "name": "SetupPushNotificationRequest",
      "properties": [
        {
          "name": "Name",
          "description": "name of the application sending the messsage (application names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, hyphens, and periods, and must be between 1 and 256 characters long)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Platform",
          "description": "supported notification platforms are Apple Push Notification Service (APNS and APNS_SANDBOX) for iOS and Google Cloud Messaging (GCM) for Android",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Key",
          "description": "for APNS, this is the PlatformPrincipal (SSL Certificate)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Credential",
          "description": "Credential is the Private Key for APNS/APNS_SANDBOX, and the API Key for GCM",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "OverwriteOldARN",
          "description": "replace any existing ARN with the newly generated one. If this is set to false, an error will be returned if notifactions have already setup for this platform.",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": false
        }
      ]
    },
    "SetupPushNotificationResult": {
      "name": "SetupPushNotificationResult",
      "properties": [
        {
          "name": "ARN",
          "description": "Amazon Resource Name for the created notification topic.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "StoreItem": {
      "name": "StoreItem",
      "description": "A store entry that list a catalog item at a particular price",
      "sortKey": "ItemId",
      "properties": [
        {
          "name": "ItemId",
          "description": "unique identifier of the item as it exists in the catalog - note that this must exactly match the ItemId from the catalog",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "CatalogVersion",
          "description": "catalog version for this item",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "VirtualCurrencyPrices",
          "description": "price of this item in virtual currencies and \"RM\" (the base Real Money purchase price, in USD pennies)",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        },
        {
          "name": "RealCurrencyPrices",
          "description": "override prices for this item for specific currencies",
          "collection": "map",
          "jsontype": "Number",
          "actualtype": "uint32",
          "optional": true
        }
      ]
    },
    "SubtractUserVirtualCurrencyRequest": {
      "name": "SubtractUserVirtualCurrencyRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose virtual currency balance is to be decremented",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "VirtualCurrency",
          "description": "name of the virtual currency which is to be decremented",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Amount",
          "description": "amount to be subtracted from the user balance of the specified virtual currency",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": false
        }
      ]
    },
    "TitleActivationStatus": {
      "name": "TitleActivationStatus",
      "isenum": true,
      "enumvalues": [
        {
          "name": "None"
        },
        {
          "name": "ActivatedTitleKey"
        },
        {
          "name": "PendingSteam"
        },
        {
          "name": "ActivatedSteam"
        },
        {
          "name": "RevokedSteam"
        }
      ]
    },
    "UpdateCatalogItemsRequest": {
      "name": "UpdateCatalogItemsRequest",
      "properties": [
        {
          "name": "CatalogVersion",
          "description": "which catalog is being updated",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Catalog",
          "description": "array of catalog items to be submitted",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "CatalogItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UpdateCatalogItemsResult": {
      "name": "UpdateCatalogItemsResult",
      "properties": []
    },
    "UpdateRandomResultTablesRequest": {
      "name": "UpdateRandomResultTablesRequest",
      "properties": [
        {
          "name": "Tables",
          "description": "array of random result tables to make available (Note: specifying an existing TableId will result in overwriting that table, while any others will be added to the available set)",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "RandomResultTable",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UpdateRandomResultTablesResult": {
      "name": "UpdateRandomResultTablesResult",
      "properties": []
    },
    "UpdateStoreItemsRequest": {
      "name": "UpdateStoreItemsRequest",
      "properties": [
        {
          "name": "StoreId",
          "description": "unqiue identifier for the store which is to be updated",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Store",
          "description": "array of store items - references to catalog items, with specific pricing - to be added",
          "collection": "array",
          "jsontype": "Object",
          "actualtype": "StoreItem",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UpdateStoreItemsResult": {
      "name": "UpdateStoreItemsResult",
      "properties": []
    },
    "UpdateUserDataRequest": {
      "name": "UpdateUserDataRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose custom data is being updated",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Data",
          "description": "data to be written to the user's custom data. Keys are trimmed of whitespace. Keys may not begin with a '!' character.",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Permission",
          "description": "Permission to be applied to all user data keys written in this request. Defaults to \"private\" if not set.",
          "jsontype": "String",
          "actualtype": "UserDataPermission",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "UpdateUserDataResult": {
      "name": "UpdateUserDataResult",
      "properties": []
    },
    "UpdateUserInternalDataRequest": {
      "name": "UpdateUserInternalDataRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose custom data is being updated",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "Data",
          "description": "data to be written to the user's custom data",
          "collection": "map",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UpdateUserTitleDisplayNameRequest": {
      "name": "UpdateUserTitleDisplayNameRequest",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "PlayFab unique identifier of the user whose title specific display name is to be changed",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "DisplayName",
          "description": "new title display name for the user - must be between 3 and 25 characters",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        }
      ]
    },
    "UpdateUserTitleDisplayNameResult": {
      "name": "UpdateUserTitleDisplayNameResult",
      "properties": [
        {
          "name": "DisplayName",
          "description": "current title display name for the user (this will be the original display name if the rename attempt failed)",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserAccountInfo": {
      "name": "UserAccountInfo",
      "properties": [
        {
          "name": "PlayFabId",
          "description": "unique identifier for the user account",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Created",
          "description": "timestamp indicating when the user account was created",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "Username",
          "description": "user account name in the PlayFab service",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "TitleInfo",
          "description": "title-specific information for the user account",
          "jsontype": "Object",
          "actualtype": "UserTitleInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "PrivateInfo",
          "description": "personal information for the user which is considered more sensitive",
          "jsontype": "Object",
          "actualtype": "UserPrivateAccountInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "FacebookInfo",
          "description": "user Facebook information, if a Facebook account has been linked",
          "jsontype": "Object",
          "actualtype": "UserFacebookInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "SteamInfo",
          "description": "user Steam information, if a Steam account has been linked",
          "jsontype": "Object",
          "actualtype": "UserSteamInfo",
          "isclass": true,
          "optional": true
        },
        {
          "name": "GameCenterInfo",
          "description": "user Gamecenter information, if a Gamecenter account has been linked",
          "jsontype": "Object",
          "actualtype": "UserGameCenterInfo",
          "isclass": true,
          "optional": true
        }
      ]
    },
    "UserDataPermission": {
      "name": "UserDataPermission",
      "isenum": true,
      "enumvalues": [
        {
          "name": "Private"
        },
        {
          "name": "Public"
        }
      ]
    },
    "UserDataRecord": {
      "name": "UserDataRecord",
      "properties": [
        {
          "name": "Value",
          "description": "user-supplied data for this user data key",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "LastUpdated",
          "description": "timestamp indicating when this data was last updated",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "Permission",
          "description": "Permissions on this data key",
          "jsontype": "String",
          "actualtype": "UserDataPermission",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "UserFacebookInfo": {
      "name": "UserFacebookInfo",
      "properties": [
        {
          "name": "FacebookId",
          "description": "Facebook identifier",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FacebookUsername",
          "description": "Facebook username",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "FacebookDisplayname",
          "description": "Facebook display name",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserGameCenterInfo": {
      "name": "UserGameCenterInfo",
      "properties": [
        {
          "name": "GameCenterId",
          "description": "Gamecenter identifier",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserOrigination": {
      "name": "UserOrigination",
      "isenum": true,
      "enumvalues": [
        {
          "name": "Organic"
        },
        {
          "name": "Steam"
        },
        {
          "name": "Google"
        },
        {
          "name": "Amazon"
        },
        {
          "name": "Facebook"
        },
        {
          "name": "Kongregate"
        },
        {
          "name": "GamersFirst"
        },
        {
          "name": "Unknown"
        },
        {
          "name": "IOS"
        },
        {
          "name": "LoadTest"
        },
        {
          "name": "Android"
        },
        {
          "name": "PSN"
        }
      ]
    },
    "UserPrivateAccountInfo": {
      "name": "UserPrivateAccountInfo",
      "properties": [
        {
          "name": "Email",
          "description": "user email address",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        }
      ]
    },
    "UserSteamInfo": {
      "name": "UserSteamInfo",
      "properties": [
        {
          "name": "SteamId",
          "description": "Steam identifier",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SteamCountry",
          "description": "the country in which the player resides, from Steam data",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "SteamCurrency",
          "description": "currency type set in the user Steam account",
          "jsontype": "String",
          "actualtype": "Currency",
          "isenum": true,
          "optional": true
        },
        {
          "name": "SteamActivationStatus",
          "description": "what stage of game ownership the user is listed as being in, from Steam",
          "jsontype": "String",
          "actualtype": "TitleActivationStatus",
          "isenum": true,
          "optional": true
        }
      ]
    },
    "UserTitleInfo": {
      "name": "UserTitleInfo",
      "properties": [
        {
          "name": "DisplayName",
          "description": "name of the user, as it is displayed in-game",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "Origination",
          "description": "source by which the user first joined the game, if known",
          "jsontype": "String",
          "actualtype": "UserOrigination",
          "isenum": true,
          "optional": true
        },
        {
          "name": "Created",
          "description": "timestamp indicating when the user was first associated with this game (this can differ significantly from when the user first registered with PlayFab)",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": false
        },
        {
          "name": "LastLogin",
          "description": "timestamp for the last user login for this title",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "FirstLogin",
          "description": "timestamp indicating when the user first signed into this game (this can differ from the Created timestamp, as other events, such as issuing a beta key to the user, can associate the title to the user)",
          "jsontype": "String",
          "actualtype": "DateTime",
          "optional": true
        },
        {
          "name": "isBanned",
          "description": "boolean indicating whether or not the user is currently banned for a title",
          "jsontype": "Boolean",
          "actualtype": "Boolean",
          "optional": true
        }
      ]
    },
    "VirtualCurrencyData": {
      "name": "VirtualCurrencyData",
      "properties": [
        {
          "name": "CurrencyCode",
          "description": "unique id for this currency type",
          "jsontype": "String",
          "actualtype": "String",
          "optional": false
        },
        {
          "name": "DisplayName",
          "description": "friendly name to show in the developer portal, reports, etc.",
          "jsontype": "String",
          "actualtype": "String",
          "optional": true
        },
        {
          "name": "InitialDeposit",
          "description": "Users receive this amount upon first login to the title. Defaults to 0.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "RechargeRate",
          "description": "Rate at which the currency accumulates over time, in units per day. Defaults to 0.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        },
        {
          "name": "RechargeMax",
          "description": "Maximum amount the currency will recharge to. Defaults to 0.",
          "jsontype": "Number",
          "actualtype": "int32",
          "optional": true
        }
      ]
    }
  },
  "calls": [
    {
      "name": "GetUserAccountInfo",
      "summary": "Retrieves the relevant details for a specified user, based upon a match against a supplied unique identifier",
      "requestDetails": "This API allows for access to details regarding a user in the PlayFab service, usually for purposes of customer support. Note that data returned may be Personally Identifying Information (PII), such as email address, and so care should be taken in how this data is stored and managed. Since this call will always return the relevant information for users who have accessed the title, the recommendation is to not store this data locally.",
      "subgroup": "Account Management",
      "url": "/Admin/GetUserAccountInfo",
      "auth": "SecretKey",
      "method": "POST",
      "request": "LookupUserAccountInfoRequest",
      "result": "LookupUserAccountInfoResult",
      "seeAlso": [
        "GetUserInventory"
      ],
      "errors": [
        "InvalidParams",
        "AccountNotFound",
        "NotAuthorized"
      ]
    },
    {
      "name": "SendAccountRecoveryEmail",
      "summary": "Forces an email to be sent to the registered email address for the specified account, with a link allowing the user to change the password",
      "requestDetails": "If the account in question is a \"temporary\" account (for example, one that was created via a call to LoginFromIOSDeviceID), thisfunction will have no effect. Only PlayFab accounts which have valid email addresses will be able to receive a password reset email using this API.",
      "subgroup": "Account Management",
      "url": "/Admin/SendAccountRecoveryEmail",
      "auth": "SecretKey",
      "method": "POST",
      "request": "SendAccountRecoveryEmailRequest",
      "result": "SendAccountRecoveryEmailResult",
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "UpdateUserTitleDisplayName",
      "summary": "Updates the title specific display name for a user",
      "requestDetails": "In addition to the PlayFab username, titles can make use of a DisplayName which is also a unique identifier, but specific to the title. This allows for unique names which more closely match the theme or genre of a title, for example. This API enables changing that name, whether due to a customer request, an offensive name choice, etc.",
      "subgroup": "Account Management",
      "url": "/Admin/UpdateUserTitleDisplayName",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateUserTitleDisplayNameRequest",
      "result": "UpdateUserTitleDisplayNameResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserData",
      "summary": "Retrieves the title-specific custom data for the user which is readable and writable by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "url": "/Admin/GetUserData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserDataRequest",
      "result": "GetUserDataResult",
      "seeAlso": [
        "UpdateUserData",
        "GetUserReadOnlyData",
        "UpdateUserReadOnlyData",
        "GetUserInternalData",
        "UpdateUserInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserInternalData",
      "summary": "Retrieves the title-specific custom data for the user which cannot be accessed by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "url": "/Admin/GetUserInternalData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserDataRequest",
      "result": "GetUserDataResult",
      "seeAlso": [
        "GetUserData",
        "UpdateUserData",
        "GetUserReadOnlyData",
        "UpdateUserReadOnlyData",
        "UpdateUserInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserReadOnlyData",
      "summary": "Retrieves the title-specific custom data for the user which can only be read by the client",
      "requestDetails": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned.",
      "subgroup": "Player Data Management",
      "url": "/Admin/GetUserReadOnlyData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserDataRequest",
      "result": "GetUserDataResult",
      "seeAlso": [
        "GetUserData",
        "UpdateUserData",
        "UpdateUserReadOnlyData",
        "GetUserInternalData",
        "UpdateUserInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "ResetUserStatistics",
      "summary": "Completely removes all statistics of the specified user, for this title",
      "requestDetails": "Note that this action cannot be un-done. All statistics for this user will be deleted, removing the user from all leaderboards for the title.",
      "subgroup": "Player Data Management",
      "url": "/Admin/ResetUserStatistics",
      "auth": "SecretKey",
      "method": "POST",
      "request": "ResetUserStatisticsRequest",
      "result": "ResetUserStatisticsResult",
      "errors": [
        "InvalidParams",
        "AccountNotFound"
      ]
    },
    {
      "name": "UpdateUserData",
      "summary": "Updates the title-specific custom data for the user which is readable and writable by the client",
      "requestDetails": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, while keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call.",
      "subgroup": "Player Data Management",
      "url": "/Admin/UpdateUserData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateUserDataRequest",
      "result": "UpdateUserDataResult",
      "seeAlso": [
        "GetUserData",
        "GetUserReadOnlyData",
        "UpdateUserReadOnlyData",
        "GetUserInternalData",
        "UpdateUserInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UpdateUserInternalData",
      "summary": "Updates the title-specific custom data for the user which cannot be accessed by the client",
      "requestDetails": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call.",
      "subgroup": "Player Data Management",
      "url": "/Admin/UpdateUserInternalData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateUserInternalDataRequest",
      "result": "UpdateUserDataResult",
      "seeAlso": [
        "GetUserData",
        "UpdateUserData",
        "GetUserReadOnlyData",
        "UpdateUserReadOnlyData",
        "GetUserInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UpdateUserReadOnlyData",
      "summary": "Updates the title-specific custom data for the user which can only be read by the client",
      "requestDetails": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call.",
      "subgroup": "Player Data Management",
      "url": "/Admin/UpdateUserReadOnlyData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateUserDataRequest",
      "result": "UpdateUserDataResult",
      "seeAlso": [
        "GetUserData",
        "UpdateUserData",
        "GetUserReadOnlyData",
        "GetUserInternalData",
        "UpdateUserInternalData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "AddNews",
      "summary": "Adds a new news item to the title's news feed",
      "subgroup": "Title-Wide Data Management",
      "url": "/Admin/AddNews",
      "auth": "SecretKey",
      "method": "POST",
      "request": "AddNewsRequest",
      "result": "AddNewsResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "AddVirtualCurrencyTypes",
      "summary": "Adds a list of virtual currencies to this title",
      "subgroup": "Title-Wide Data Management",
      "url": "/Admin/AddVirtualCurrencyTypes",
      "auth": "SecretKey",
      "method": "POST",
      "request": "AddVirtualCurrencyTypesRequest",
      "result": "BlankResult",
      "seeAlso": [
        "ListVirtualCurrencyTypes"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetCatalogItems",
      "summary": "Retrieves the specified version of the title's catalog of virtual goods, including all defined properties",
      "subgroup": "Title-Wide Data Management",
      "url": "/Admin/GetCatalogItems",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetCatalogItemsRequest",
      "result": "GetCatalogItemsResult",
      "seeAlso": [
        "SetCatalogItems",
        "UpdateCatalogItems"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetRandomResultTables",
      "summary": "Retrieves the random drop table configuration for the title",
      "subgroup": "Title-Wide Data Management",
      "url": "/Admin/GetRandomResultTables",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetRandomResultTablesRequest",
      "result": "GetRandomResultTablesResult",
      "seeAlso": [
        "UpdateRandomResultTables"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetStoreItems",
      "summary": "Retrieves the set of items defined for the specified store, including all prices defined",
      "requestDetails": "A store contains an array of references to items defined in one or more catalog versions of the game, along with the prices for the item, in both real world and virtual currencies. These prices act as an override to any prices defined in the catalog. In this way, the base definitions of the items may be defined in the catalog, with all associated properties, while the pricing can be set for each store, as needed. This allows for subsets of goods to be defined for different purposes (in order to simplify showing some, but not all catalog items to users, based upon different characteristics), along with unique prices. Note that all prices defined in the catalog and store definitions for the item are considered valid, and that a compromised client can be made to send a request for an item based upon any of these definitions. If no price is specified in the store for an item, the price set in the catalog should be displayed to the user.",
      "subgroup": "Title-Wide Data Management",
      "url": "/Admin/GetStoreItems",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetStoreItemsRequest",
      "result": "GetStoreItemsResult",
      "seeAlso": [
        "SetStoreItems",
        "UpdateStoreItems"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetTitleData",
      "summary": "Retrieves the key-value store of custom title settings",
      "requestDetails": "This API is designed to return title specific values which can be read, but not written to, by the client. For example, a developer could choose to store values which modify the user experience, such as enemy spawn rates, weapon strengths, movement speeds, etc. This allows a developer to update the title without the need to create, test, and ship a new build.",
      "subgroup": "Title-Wide Data Management",
      "url": "/Admin/GetTitleData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetTitleDataRequest",
      "result": "GetTitleDataResult",
      "seeAlso": [
        "SetTitleData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "ListVirtualCurrencyTypes",
      "summary": "Retuns a list of all defined virtual currencies for this title",
      "subgroup": "Title-Wide Data Management",
      "url": "/Admin/ListVirtualCurrencyTypes",
      "auth": "SecretKey",
      "method": "POST",
      "request": "ListVirtualCurrencyTypesRequest",
      "result": "ListVirtualCurrencyTypesResult",
      "seeAlso": [
        "AddVirtualCurrencyTypes"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "SetCatalogItems",
      "summary": "Creates the catalog configuration of all virtual goods for the specified catalog version",
      "requestDetails": "This operation is not additive. Using it will cause the indicated catalog version to be created from scratch. If there is an existing catalog with the version number in question, it will be deleted and replaced with only the items specified in this call.",
      "subgroup": "Title-Wide Data Management",
      "url": "/Admin/SetCatalogItems",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateCatalogItemsRequest",
      "result": "UpdateCatalogItemsResult",
      "seeAlso": [
        "GetCatalogItems",
        "UpdateCatalogItems"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "SetStoreItems",
      "summary": "Sets all the items in one virtual store",
      "requestDetails": "This operation is not additive. Using it will cause the indicated virtual store to be created from scratch. If there is an existing store with the same storeId, it will be deleted and replaced with only the items specified in this call. A store contains an array of references to items defined in one or more catalog versions of the game, along with the prices for the item, in both real world and virtual currencies. These prices act as an override to any prices defined in the catalog. In this way, the base definitions of the items may be defined in the catalog, with all associated properties, while the pricing can be set for each store, as needed. This allows for subsets of goods to be defined for different purposes (in order to simplify showing some, but not all catalog items to users, based upon different characteristics), along with unique prices. Note that all prices defined in the catalog and store definitions for the item are considered valid, and that a compromised client can be made to send a request for an item based upon any of these definitions. If no price is specified in the store for an item, the price set in the catalog should be displayed to the user.",
      "subgroup": "Title-Wide Data Management",
      "url": "/Admin/SetStoreItems",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateStoreItemsRequest",
      "result": "UpdateStoreItemsResult",
      "seeAlso": [
        "GetStoreItems",
        "UpdateStoreItems"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "SetTitleData",
      "summary": "Creates and updates the key-value store of custom title settings",
      "requestDetails": "This API is designed to store title specific values which can be read, but not written to, by the client. For example, a developer could choose to store values which modify the user experience, such as enemy spawn rates, weapon strengths, movement speeds, etc. This allows a developer to update the title without the need to create, test, and ship a new build. This operation is additive. If a Key does not exist in the current dataset, it will be added with the specified Value. If it already exists, the Value for that key will be overwritten with the new Value.",
      "subgroup": "Title-Wide Data Management",
      "url": "/Admin/SetTitleData",
      "auth": "SecretKey",
      "method": "POST",
      "request": "SetTitleDataRequest",
      "result": "SetTitleDataResult",
      "seeAlso": [
        "GetTitleData"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UpdateCatalogItems",
      "summary": "Updates the catalog configuration for virtual goods in the specified catalog version",
      "requestDetails": "This operation is additive. Items with ItemId values not currently in the catalog will be added, while those with ItemId values matching items currently in the catalog will overwrite those items with the given values.",
      "subgroup": "Title-Wide Data Management",
      "url": "/Admin/UpdateCatalogItems",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateCatalogItemsRequest",
      "result": "UpdateCatalogItemsResult",
      "seeAlso": [
        "GetCatalogItems",
        "SetCatalogItems"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UpdateRandomResultTables",
      "summary": "Updates the random drop table configuration for the title",
      "requestDetails": "This operation is additive. Tables with TableId values not currently defined will be added, while those with TableId values matching Tables currently in the catalog will be overwritten with the given values.",
      "subgroup": "Title-Wide Data Management",
      "url": "/Admin/UpdateRandomResultTables",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateRandomResultTablesRequest",
      "result": "UpdateRandomResultTablesResult",
      "seeAlso": [
        "GetRandomResultTables"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "UpdateStoreItems",
      "summary": "Updates an existing virtual item store with new or modified items",
      "requestDetails": "This operation is additive. Items with ItemId values not currently in the store will be added, while those with ItemId values matching items currently in the catalog will overwrite those items with the given values. A store contains an array of references to items defined in one or more catalog versions of the game, along with the prices for the item, in both real world and virtual currencies. These prices act as an override to any prices defined in the catalog. In this way, the base definitions of the items may be defined in the catalog, with all associated properties, while the pricing can be set for each store, as needed. This allows for subsets of goods to be defined for different purposes (in order to simplify showing some, but not all catalog items to users, based upon different characteristics), along with unique prices. Note that all prices defined in the catalog and store definitions for the item are considered valid, and that a compromised client can be made to send a request for an item based upon any of these definitions. If no price is specified in the store for an item, the price set in the catalog should be displayed to the user.",
      "subgroup": "Title-Wide Data Management",
      "url": "/Admin/UpdateStoreItems",
      "auth": "SecretKey",
      "method": "POST",
      "request": "UpdateStoreItemsRequest",
      "result": "UpdateStoreItemsResult",
      "seeAlso": [
        "GetStoreItems",
        "SetStoreItems"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "AddUserVirtualCurrency",
      "summary": "Increments the specified virtual currency by the stated amount",
      "subgroup": "Player Item Management",
      "url": "/Admin/AddUserVirtualCurrency",
      "auth": "SecretKey",
      "method": "POST",
      "request": "AddUserVirtualCurrencyRequest",
      "result": "ModifyUserVirtualCurrencyResult",
      "seeAlso": [
        "SubtractUserVirtualCurrency"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetUserInventory",
      "summary": "Retrieves the specified user's current inventory of virtual goods",
      "requestDetails": "All items currently in the user inventory will be returned, irrespective of how they were acquired (via purchasing, grants, coupons, etc.). Items that are expired, fully consumed, or are no longer valid are not considered to be in the user's current inventory, and so will not be not included.",
      "subgroup": "Player Item Management",
      "url": "/Admin/GetUserInventory",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetUserInventoryRequest",
      "result": "GetUserInventoryResult",
      "seeAlso": [
        "GetUserAccountInfo"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GrantItemsToUsers",
      "summary": "Adds the specified items to the specified user inventories",
      "requestDetails": "This function directly adds inventory items to user inventories. As a result of this operations, the user will not be charged any transaction fee, regardless of the inventory item catalog definition.",
      "subgroup": "Player Item Management",
      "url": "/Admin/GrantItemsToUsers",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GrantItemsToUsersRequest",
      "result": "GrantItemsToUsersResult",
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "RevokeInventoryItem",
      "summary": "Revokes access to an item in a user's inventory",
      "requestDetails": "In cases where the inventory item in question is a \"crate\", and the items it contained have already been dispensed, this will not revoke access or otherwise remove the items which were dispensed.",
      "subgroup": "Player Item Management",
      "url": "/Admin/RevokeInventoryItem",
      "auth": "SecretKey",
      "method": "POST",
      "request": "RevokeInventoryItemRequest",
      "result": "RevokeInventoryResult",
      "seeAlso": [
        "GetUserInventory"
      ],
      "errors": [
        "InvalidParams",
        "ItemNotFound"
      ]
    },
    {
      "name": "SubtractUserVirtualCurrency",
      "summary": "Decrements the specified virtual currency by the stated amount",
      "subgroup": "Player Item Management",
      "url": "/Admin/SubtractUserVirtualCurrency",
      "auth": "SecretKey",
      "method": "POST",
      "request": "SubtractUserVirtualCurrencyRequest",
      "result": "ModifyUserVirtualCurrencyResult",
      "seeAlso": [
        "AddUserVirtualCurrency"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "GetMatchmakerGameInfo",
      "summary": "Retrieves the details for a specific completed session, including links to standard out and standard error logs",
      "subgroup": "Matchmaking APIs",
      "url": "/Admin/GetMatchmakerGameInfo",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetMatchmakerGameInfoRequest",
      "result": "GetMatchmakerGameInfoResult",
      "seeAlso": [
        "GetMatchmakerGameModes",
        "ModifyMatchmakerGameModes"
      ],
      "errors": [
        "InvalidParams",
        "GameNotFound"
      ]
    },
    {
      "name": "GetMatchmakerGameModes",
      "summary": "Retrieves the details of defined game modes for the specified game server executable",
      "requestDetails": "These details are used by the PlayFab matchmaking service to determine if an existing Game Server Instance has room for additional users, and by the PlayFab game server management service to determine when a new Game Server Host should be created in order to prevent excess load on existing Hosts.",
      "subgroup": "Matchmaking APIs",
      "url": "/Admin/GetMatchmakerGameModes",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetMatchmakerGameModesRequest",
      "result": "GetMatchmakerGameModesResult",
      "seeAlso": [
        "GetMatchmakerGameInfo",
        "ModifyMatchmakerGameModes"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "ModifyMatchmakerGameModes",
      "summary": "Updates the game server mode details for the specified game server executable",
      "requestDetails": "These details are used by the PlayFab matchmaking service to determine if an existing Game Server Instance has room for additional users, and by the PlayFab game server management service to determine when a new Game Server Host should be created in order to prevent excess load on existing Hosts. This operation is not additive. Using it will cause the game mode definition for the game server executable in question to be created from scratch. If there is an existing game server mode definition for the given BuildVersion, it will be deleted and replaced with the data specified in this call.",
      "subgroup": "Matchmaking APIs",
      "url": "/Admin/ModifyMatchmakerGameModes",
      "auth": "SecretKey",
      "method": "POST",
      "request": "ModifyMatchmakerGameModesRequest",
      "result": "ModifyMatchmakerGameModesResult",
      "seeAlso": [
        "GetMatchmakerGameInfo",
        "GetMatchmakerGameModes"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "AddServerBuild",
      "summary": "Adds the game server executable specified to the set of those a client is permitted to request in a call to StartGame",
      "subgroup": "Custom Server Management",
      "url": "/Admin/AddServerBuild",
      "auth": "SecretKey",
      "method": "POST",
      "request": "AddServerBuildRequest",
      "result": "AddServerBuildResult",
      "seeAlso": [
        "RemoveServerBuild",
        "ListServerBuilds",
        "GetServerBuildInfo",
        "ModifyServerBuild"
      ],
      "errors": [
        "InvalidParams",
        "BuildAlreadyExists",
        "BuildPackageDoesNotExist"
      ]
    },
    {
      "name": "GetServerBuildInfo",
      "summary": "Retrieves the build details for the specified game server executable",
      "subgroup": "Custom Server Management",
      "url": "/Admin/GetServerBuildInfo",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetServerBuildInfoRequest",
      "result": "GetServerBuildInfoResult",
      "seeAlso": [
        "RemoveServerBuild",
        "ListServerBuilds",
        "AddServerBuild",
        "ModifyServerBuild"
      ],
      "errors": [
        "InvalidParams",
        "BuildNotFound"
      ]
    },
    {
      "name": "GetServerBuildUploadUrl",
      "summary": "Retrieves the pre-authorized URL for uploading the game server package for a new build",
      "subgroup": "Custom Server Management",
      "url": "/Admin/GetServerBuildUploadUrl",
      "auth": "SecretKey",
      "method": "POST",
      "request": "GetServerBuildUploadURLRequest",
      "result": "GetServerBuildUploadURLResult",
      "seeAlso": [
        "RemoveServerBuild",
        "ListServerBuilds",
        "AddServerBuild",
        "ModifyServerBuild"
      ],
      "errors": [
        "InvalidParams",
        "BuildAlreadyExists"
      ]
    },
    {
      "name": "ListServerBuilds",
      "summary": "Retrieves the build details for all game server executables which are currently defined for the title",
      "subgroup": "Custom Server Management",
      "url": "/Admin/ListServerBuilds",
      "auth": "SecretKey",
      "method": "POST",
      "request": "ListBuildsRequest",
      "result": "ListBuildsResult",
      "seeAlso": [
        "RemoveServerBuild",
        "AddServerBuild",
        "GetServerBuildInfo",
        "ModifyServerBuild"
      ],
      "errors": [
        "InvalidParams"
      ]
    },
    {
      "name": "ModifyServerBuild",
      "summary": "Updates the build details for the specified game server executable",
      "subgroup": "Custom Server Management",
      "url": "/Admin/ModifyServerBuild",
      "auth": "SecretKey",
      "method": "POST",
      "request": "ModifyServerBuildRequest",
      "result": "ModifyServerBuildResult",
      "seeAlso": [
        "RemoveServerBuild",
        "ListServerBuilds",
        "GetServerBuildInfo",
        "AddServerBuild"
      ],
      "errors": [
        "InvalidParams",
        "BuildNotFound"
      ]
    },
    {
      "name": "RemoveServerBuild",
      "summary": "Remove the game server executable specified from the set of those a client is permitted to request in a call to StartGame",
      "subgroup": "Custom Server Management",
      "url": "/Admin/RemoveServerBuild",
      "auth": "SecretKey",
      "method": "POST",
      "request": "RemoveServerBuildRequest",
      "result": "RemoveServerBuildResult",
      "seeAlso": [
        "AddServerBuild",
        "ListServerBuilds",
        "GetServerBuildInfo",
        "ModifyServerBuild"
      ],
      "errors": [
        "InvalidParams",
        "BuildIsActive"
      ]
    }
  ],
  "subgroups": [
    {
      "name": "Account Management",
      "methods": [
        "GetUserAccountInfo",
        "SendAccountRecoveryEmail",
        "UpdateUserTitleDisplayName"
      ]
    },
    {
      "name": "Player Data Management",
      "methods": [
        "GetUserData",
        "GetUserInternalData",
        "GetUserReadOnlyData",
        "ResetUserStatistics",
        "UpdateUserData",
        "UpdateUserInternalData",
        "UpdateUserReadOnlyData"
      ]
    },
    {
      "name": "Title-Wide Data Management",
      "methods": [
        "AddNews",
        "AddVirtualCurrencyTypes",
        "GetCatalogItems",
        "GetRandomResultTables",
        "GetStoreItems",
        "GetTitleData",
        "ListVirtualCurrencyTypes",
        "SetCatalogItems",
        "SetStoreItems",
        "SetTitleData",
        "UpdateCatalogItems",
        "UpdateRandomResultTables",
        "UpdateStoreItems"
      ]
    },
    {
      "name": "Player Item Management",
      "methods": [
        "AddUserVirtualCurrency",
        "GetUserInventory",
        "GrantItemsToUsers",
        "RevokeInventoryItem",
        "SubtractUserVirtualCurrency"
      ]
    },
    {
      "name": "Matchmaking APIs",
      "methods": [
        "GetMatchmakerGameInfo",
        "GetMatchmakerGameModes",
        "ModifyMatchmakerGameModes"
      ]
    },
    {
      "name": "Custom Server Management",
      "methods": [
        "AddServerBuild",
        "GetServerBuildInfo",
        "GetServerBuildUploadUrl",
        "ListServerBuilds",
        "ModifyServerBuild",
        "RemoveServerBuild"
      ]
    }
  ],
  "errors": {
    "Success": {
      "id": 0,
      "name": "Success"
    },
    "InvalidParams": {
      "id": 1000,
      "name": "InvalidParams"
    },
    "AccountNotFound": {
      "id": 1001,
      "name": "AccountNotFound"
    },
    "AccountBanned": {
      "id": 1002,
      "name": "AccountBanned"
    },
    "InvalidUsernameOrPassword": {
      "id": 1003,
      "name": "InvalidUsernameOrPassword"
    },
    "InvalidTitleId": {
      "id": 1004,
      "name": "InvalidTitleId"
    },
    "InvalidEmailAddress": {
      "id": 1005,
      "name": "InvalidEmailAddress"
    },
    "EmailAddressNotAvailable": {
      "id": 1006,
      "name": "EmailAddressNotAvailable"
    },
    "InvalidUsername": {
      "id": 1007,
      "name": "InvalidUsername"
    },
    "InvalidPassword": {
      "id": 1008,
      "name": "InvalidPassword"
    },
    "UsernameNotAvailable": {
      "id": 1009,
      "name": "UsernameNotAvailable"
    },
    "InvalidSteamTicket": {
      "id": 1010,
      "name": "InvalidSteamTicket"
    },
    "AccountAlreadyLinked": {
      "id": 1011,
      "name": "AccountAlreadyLinked"
    },
    "LinkedAccountAlreadyClaimed": {
      "id": 1012,
      "name": "LinkedAccountAlreadyClaimed"
    },
    "InvalidFacebookToken": {
      "id": 1013,
      "name": "InvalidFacebookToken"
    },
    "AccountNotLinked": {
      "id": 1014,
      "name": "AccountNotLinked"
    },
    "FailedByPaymentProvider": {
      "id": 1015,
      "name": "FailedByPaymentProvider"
    },
    "CouponCodeNotFound": {
      "id": 1016,
      "name": "CouponCodeNotFound"
    },
    "InvalidContainerItem": {
      "id": 1017,
      "name": "InvalidContainerItem"
    },
    "ContainerNotOwned": {
      "id": 1018,
      "name": "ContainerNotOwned"
    },
    "KeyNotOwned": {
      "id": 1019,
      "name": "KeyNotOwned"
    },
    "InvalidItemIdInTable": {
      "id": 1020,
      "name": "InvalidItemIdInTable"
    },
    "InvalidReceipt": {
      "id": 1021,
      "name": "InvalidReceipt"
    },
    "ReceiptAlreadyUsed": {
      "id": 1022,
      "name": "ReceiptAlreadyUsed"
    },
    "ReceiptCancelled": {
      "id": 1023,
      "name": "ReceiptCancelled"
    },
    "GameNotFound": {
      "id": 1024,
      "name": "GameNotFound"
    },
    "GameModeNotFound": {
      "id": 1025,
      "name": "GameModeNotFound"
    },
    "InvalidGoogleToken": {
      "id": 1026,
      "name": "InvalidGoogleToken"
    },
    "UserIsNotPartOfDeveloper": {
      "id": 1027,
      "name": "UserIsNotPartOfDeveloper"
    },
    "InvalidTitleForDeveloper": {
      "id": 1028,
      "name": "InvalidTitleForDeveloper"
    },
    "TitleNameConflicts": {
      "id": 1029,
      "name": "TitleNameConflicts"
    },
    "UserisNotValid": {
      "id": 1030,
      "name": "UserisNotValid"
    },
    "ValueAlreadyExists": {
      "id": 1031,
      "name": "ValueAlreadyExists"
    },
    "BuildNotFound": {
      "id": 1032,
      "name": "BuildNotFound"
    },
    "PlayerNotInGame": {
      "id": 1033,
      "name": "PlayerNotInGame"
    },
    "InvalidTicket": {
      "id": 1034,
      "name": "InvalidTicket"
    },
    "InvalidDeveloper": {
      "id": 1035,
      "name": "InvalidDeveloper"
    },
    "InvalidOrderInfo": {
      "id": 1036,
      "name": "InvalidOrderInfo"
    },
    "RegistrationIncomplete": {
      "id": 1037,
      "name": "RegistrationIncomplete"
    },
    "InvalidPlatform": {
      "id": 1038,
      "name": "InvalidPlatform"
    },
    "UnknownError": {
      "id": 1039,
      "name": "UnknownError"
    },
    "SteamApplicationNotOwned": {
      "id": 1040,
      "name": "SteamApplicationNotOwned"
    },
    "WrongSteamAccount": {
      "id": 1041,
      "name": "WrongSteamAccount"
    },
    "TitleNotActivated": {
      "id": 1042,
      "name": "TitleNotActivated"
    },
    "RegistrationSessionNotFound": {
      "id": 1043,
      "name": "RegistrationSessionNotFound"
    },
    "NoSuchMod": {
      "id": 1044,
      "name": "NoSuchMod"
    },
    "FileNotFound": {
      "id": 1045,
      "name": "FileNotFound"
    },
    "DuplicateEmail": {
      "id": 1046,
      "name": "DuplicateEmail"
    },
    "ItemNotFound": {
      "id": 1047,
      "name": "ItemNotFound"
    },
    "ItemNotOwned": {
      "id": 1048,
      "name": "ItemNotOwned"
    },
    "ItemNotRecycleable": {
      "id": 1049,
      "name": "ItemNotRecycleable"
    },
    "ItemNotAffordable": {
      "id": 1050,
      "name": "ItemNotAffordable"
    },
    "InvalidVirtualCurrency": {
      "id": 1051,
      "name": "InvalidVirtualCurrency"
    },
    "WrongVirtualCurrency": {
      "id": 1052,
      "name": "WrongVirtualCurrency"
    },
    "WrongPrice": {
      "id": 1053,
      "name": "WrongPrice"
    },
    "NonPositiveValue": {
      "id": 1054,
      "name": "NonPositiveValue"
    },
    "InvalidRegion": {
      "id": 1055,
      "name": "InvalidRegion"
    },
    "RegionAtCapacity": {
      "id": 1056,
      "name": "RegionAtCapacity"
    },
    "ServerFailedToStart": {
      "id": 1057,
      "name": "ServerFailedToStart"
    },
    "NameNotAvailable": {
      "id": 1058,
      "name": "NameNotAvailable"
    },
    "InsufficientFunds": {
      "id": 1059,
      "name": "InsufficientFunds"
    },
    "InvalidDeviceID": {
      "id": 1060,
      "name": "InvalidDeviceID"
    },
    "InvalidPushNotificationToken": {
      "id": 1061,
      "name": "InvalidPushNotificationToken"
    },
    "NoRemainingUses": {
      "id": 1062,
      "name": "NoRemainingUses"
    },
    "InvalidPaymentProvider": {
      "id": 1063,
      "name": "InvalidPaymentProvider"
    },
    "PurchaseInitializationFailure": {
      "id": 1064,
      "name": "PurchaseInitializationFailure"
    },
    "DuplicateUsername": {
      "id": 1065,
      "name": "DuplicateUsername"
    },
    "InvalidBuyerInfo": {
      "id": 1066,
      "name": "InvalidBuyerInfo"
    },
    "NoGameModeParamsSet": {
      "id": 1067,
      "name": "NoGameModeParamsSet"
    },
    "BodyTooLarge": {
      "id": 1068,
      "name": "BodyTooLarge"
    },
    "ReservedWordInBody": {
      "id": 1069,
      "name": "ReservedWordInBody"
    },
    "InvalidTypeInBody": {
      "id": 1070,
      "name": "InvalidTypeInBody"
    },
    "InvalidRequest": {
      "id": 1071,
      "name": "InvalidRequest"
    },
    "ReservedEventName": {
      "id": 1072,
      "name": "ReservedEventName"
    },
    "InvalidUserStatistics": {
      "id": 1073,
      "name": "InvalidUserStatistics"
    },
    "NotAuthenticated": {
      "id": 1074,
      "name": "NotAuthenticated"
    },
    "StreamAlreadyExists": {
      "id": 1075,
      "name": "StreamAlreadyExists"
    },
    "ErrorCreatingStream": {
      "id": 1076,
      "name": "ErrorCreatingStream"
    },
    "StreamNotFound": {
      "id": 1077,
      "name": "StreamNotFound"
    },
    "InvalidAccount": {
      "id": 1078,
      "name": "InvalidAccount"
    },
    "PurchaseDoesNotExist": {
      "id": 1080,
      "name": "PurchaseDoesNotExist"
    },
    "InvalidPurchaseTransactionStatus": {
      "id": 1081,
      "name": "InvalidPurchaseTransactionStatus"
    },
    "APINotEnabledForGameClientAccess": {
      "id": 1082,
      "name": "APINotEnabledForGameClientAccess"
    },
    "NoPushNotificationARNForTitle": {
      "id": 1083,
      "name": "NoPushNotificationARNForTitle"
    },
    "BuildAlreadyExists": {
      "id": 1084,
      "name": "BuildAlreadyExists"
    },
    "BuildPackageDoesNotExist": {
      "id": 1085,
      "name": "BuildPackageDoesNotExist"
    },
    "BuildIsActive": {
      "id": 1086,
      "name": "BuildIsActive"
    },
    "CustomAnalyticsEventsNotEnabledForTitle": {
      "id": 1087,
      "name": "CustomAnalyticsEventsNotEnabledForTitle"
    },
    "InvalidSharedGroupId": {
      "id": 1088,
      "name": "InvalidSharedGroupId"
    },
    "NotAuthorized": {
      "id": 1089,
      "name": "NotAuthorized"
    },
    "MissingTitleGoogleProperties": {
      "id": 1090,
      "name": "MissingTitleGoogleProperties"
    },
    "InvalidItemProperties": {
      "id": 1091,
      "name": "InvalidItemProperties"
    },
    "InvalidPSNAuthCode": {
      "id": 1092,
      "name": "InvalidPSNAuthCode"
    },
    "InvalidItemId": {
      "id": 1093,
      "name": "InvalidItemId"
    },
    "PushNotEnabledForAccount": {
      "id": 1094,
      "name": "PushNotEnabledForAccount"
    },
    "PushServiceError": {
      "id": 1095,
      "name": "PushServiceError"
    }
  },
  "errorList": [
    "Success",
    "InvalidParams",
    "AccountNotFound",
    "AccountBanned",
    "InvalidUsernameOrPassword",
    "InvalidTitleId",
    "InvalidEmailAddress",
    "EmailAddressNotAvailable",
    "InvalidUsername",
    "InvalidPassword",
    "UsernameNotAvailable",
    "InvalidSteamTicket",
    "AccountAlreadyLinked",
    "LinkedAccountAlreadyClaimed",
    "InvalidFacebookToken",
    "AccountNotLinked",
    "FailedByPaymentProvider",
    "CouponCodeNotFound",
    "InvalidContainerItem",
    "ContainerNotOwned",
    "KeyNotOwned",
    "InvalidItemIdInTable",
    "InvalidReceipt",
    "ReceiptAlreadyUsed",
    "ReceiptCancelled",
    "GameNotFound",
    "GameModeNotFound",
    "InvalidGoogleToken",
    "UserIsNotPartOfDeveloper",
    "InvalidTitleForDeveloper",
    "TitleNameConflicts",
    "UserisNotValid",
    "ValueAlreadyExists",
    "BuildNotFound",
    "PlayerNotInGame",
    "InvalidTicket",
    "InvalidDeveloper",
    "InvalidOrderInfo",
    "RegistrationIncomplete",
    "InvalidPlatform",
    "UnknownError",
    "SteamApplicationNotOwned",
    "WrongSteamAccount",
    "TitleNotActivated",
    "RegistrationSessionNotFound",
    "NoSuchMod",
    "FileNotFound",
    "DuplicateEmail",
    "ItemNotFound",
    "ItemNotOwned",
    "ItemNotRecycleable",
    "ItemNotAffordable",
    "InvalidVirtualCurrency",
    "WrongVirtualCurrency",
    "WrongPrice",
    "NonPositiveValue",
    "InvalidRegion",
    "RegionAtCapacity",
    "ServerFailedToStart",
    "NameNotAvailable",
    "InsufficientFunds",
    "InvalidDeviceID",
    "InvalidPushNotificationToken",
    "NoRemainingUses",
    "InvalidPaymentProvider",
    "PurchaseInitializationFailure",
    "DuplicateUsername",
    "InvalidBuyerInfo",
    "NoGameModeParamsSet",
    "BodyTooLarge",
    "ReservedWordInBody",
    "InvalidTypeInBody",
    "InvalidRequest",
    "ReservedEventName",
    "InvalidUserStatistics",
    "NotAuthenticated",
    "StreamAlreadyExists",
    "ErrorCreatingStream",
    "StreamNotFound",
    "InvalidAccount",
    "PurchaseDoesNotExist",
    "InvalidPurchaseTransactionStatus",
    "APINotEnabledForGameClientAccess",
    "NoPushNotificationARNForTitle",
    "BuildAlreadyExists",
    "BuildPackageDoesNotExist",
    "BuildIsActive",
    "CustomAnalyticsEventsNotEnabledForTitle",
    "InvalidSharedGroupId",
    "NotAuthorized",
    "MissingTitleGoogleProperties",
    "InvalidItemProperties",
    "InvalidPSNAuthCode",
    "InvalidItemId",
    "PushNotEnabledForAccount",
    "PushServiceError"
  ]
}